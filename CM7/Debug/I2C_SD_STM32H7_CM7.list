
I2C_SD_STM32H7_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfe4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  0800d288  0800d288  0001d288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d664  0800d664  00021108  2**0
                  CONTENTS
  4 .ARM          00000000  0800d664  0800d664  00021108  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d664  0800d664  00021108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d664  0800d664  0001d664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d668  0800d668  0001d668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001108  24000000  0800d66c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  24001108  0800e774  00021108  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  24001708  0800e774  00021708  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00021108  2**0
                  CONTENTS, READONLY
 12 .debug_info   000251e6  00000000  00000000  00021136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004266  00000000  00000000  0004631c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  0004a588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  0004b828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041752  00000000  00000000  0004c940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018fe5  00000000  00000000  0008e092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019641f  00000000  00000000  000a7077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0023d496  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059e0  00000000  00000000  0023d4ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24001108 	.word	0x24001108
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d26c 	.word	0x0800d26c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400110c 	.word	0x2400110c
 80002dc:	0800d26c 	.word	0x0800d26c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3f      	ldr	r3, [pc, #252]	; (8000484 <SystemInit+0x104>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a3e      	ldr	r2, [pc, #248]	; (8000484 <SystemInit+0x104>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b3b      	ldr	r3, [pc, #236]	; (8000484 <SystemInit+0x104>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a3a      	ldr	r2, [pc, #232]	; (8000484 <SystemInit+0x104>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b39      	ldr	r3, [pc, #228]	; (8000488 <SystemInit+0x108>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b36      	ldr	r3, [pc, #216]	; (8000488 <SystemInit+0x108>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a34      	ldr	r2, [pc, #208]	; (8000488 <SystemInit+0x108>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b33      	ldr	r3, [pc, #204]	; (800048c <SystemInit+0x10c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a32      	ldr	r2, [pc, #200]	; (800048c <SystemInit+0x10c>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b30      	ldr	r3, [pc, #192]	; (800048c <SystemInit+0x10c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2f      	ldr	r3, [pc, #188]	; (800048c <SystemInit+0x10c>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492e      	ldr	r1, [pc, #184]	; (800048c <SystemInit+0x10c>)
 80003d4:	4b2e      	ldr	r3, [pc, #184]	; (8000490 <SystemInit+0x110>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <SystemInit+0x108>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b28      	ldr	r3, [pc, #160]	; (8000488 <SystemInit+0x108>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a26      	ldr	r2, [pc, #152]	; (8000488 <SystemInit+0x108>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b25      	ldr	r3, [pc, #148]	; (800048c <SystemInit+0x10c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b23      	ldr	r3, [pc, #140]	; (800048c <SystemInit+0x10c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b22      	ldr	r3, [pc, #136]	; (800048c <SystemInit+0x10c>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b20      	ldr	r3, [pc, #128]	; (800048c <SystemInit+0x10c>)
 800040a:	4a22      	ldr	r2, [pc, #136]	; (8000494 <SystemInit+0x114>)
 800040c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1f      	ldr	r3, [pc, #124]	; (800048c <SystemInit+0x10c>)
 8000410:	4a21      	ldr	r2, [pc, #132]	; (8000498 <SystemInit+0x118>)
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1d      	ldr	r3, [pc, #116]	; (800048c <SystemInit+0x10c>)
 8000416:	4a21      	ldr	r2, [pc, #132]	; (800049c <SystemInit+0x11c>)
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1c      	ldr	r3, [pc, #112]	; (800048c <SystemInit+0x10c>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b1a      	ldr	r3, [pc, #104]	; (800048c <SystemInit+0x10c>)
 8000422:	4a1e      	ldr	r2, [pc, #120]	; (800049c <SystemInit+0x11c>)
 8000424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b19      	ldr	r3, [pc, #100]	; (800048c <SystemInit+0x10c>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b17      	ldr	r3, [pc, #92]	; (800048c <SystemInit+0x10c>)
 800042e:	4a1b      	ldr	r2, [pc, #108]	; (800049c <SystemInit+0x11c>)
 8000430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b16      	ldr	r3, [pc, #88]	; (800048c <SystemInit+0x10c>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <SystemInit+0x10c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a13      	ldr	r2, [pc, #76]	; (800048c <SystemInit+0x10c>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <SystemInit+0x10c>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <SystemInit+0x120>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044e:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <SystemInit+0x120>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000454:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <SystemInit+0x124>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <SystemInit+0x128>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <SystemInit+0x12c>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <SystemInit+0x130>)
 800046c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000470:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000472:	4b04      	ldr	r3, [pc, #16]	; (8000484 <SystemInit+0x104>)
 8000474:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000478:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	e000ed00 	.word	0xe000ed00
 8000488:	52002000 	.word	0x52002000
 800048c:	58024400 	.word	0x58024400
 8000490:	eaf6ed7f 	.word	0xeaf6ed7f
 8000494:	02020200 	.word	0x02020200
 8000498:	01ff0000 	.word	0x01ff0000
 800049c:	01010280 	.word	0x01010280
 80004a0:	580000c0 	.word	0x580000c0
 80004a4:	5c001000 	.word	0x5c001000
 80004a8:	ffff0000 	.word	0xffff0000
 80004ac:	51008108 	.word	0x51008108
 80004b0:	52004000 	.word	0x52004000

080004b4 <GY_init>:




void GY_init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af02      	add	r7, sp, #8

	 if(HAL_I2C_IsDeviceReady(&hi2c4, 0xD0, 2, 10)==HAL_OK)//check status
 80004ba:	230a      	movs	r3, #10
 80004bc:	2202      	movs	r2, #2
 80004be:	21d0      	movs	r1, #208	; 0xd0
 80004c0:	480b      	ldr	r0, [pc, #44]	; (80004f0 <GY_init+0x3c>)
 80004c2:	f001 fc8f 	bl	8001de4 <HAL_I2C_IsDeviceReady>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d10d      	bne.n	80004e8 <GY_init+0x34>
	  {
		 //config
		 i2c_conf[0]=0x6B;//register to be written on
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <GY_init+0x40>)
 80004ce:	226b      	movs	r2, #107	; 0x6b
 80004d0:	701a      	strb	r2, [r3, #0]
		 i2c_conf[1]=0x00;// what we want to write to make it clear (CH) . This makes the MPU-6050 to start
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <GY_init+0x40>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	705a      	strb	r2, [r3, #1]
		 HAL_I2C_Master_Transmit(&hi2c4, 0xD0, i2c_conf, 2, 10);
 80004d8:	230a      	movs	r3, #10
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	2302      	movs	r3, #2
 80004de:	4a05      	ldr	r2, [pc, #20]	; (80004f4 <GY_init+0x40>)
 80004e0:	21d0      	movs	r1, #208	; 0xd0
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <GY_init+0x3c>)
 80004e4:	f001 fa94 	bl	8001a10 <HAL_I2C_Master_Transmit>
	  }


}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	240011ac 	.word	0x240011ac
 80004f4:	24001288 	.word	0x24001288

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80004fe:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000504:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000508:	bf00      	nop
 800050a:	4b38      	ldr	r3, [pc, #224]	; (80005ec <main+0xf4>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000512:	2b00      	cmp	r3, #0
 8000514:	d006      	beq.n	8000524 <main+0x2c>
 8000516:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800051a:	1e5a      	subs	r2, r3, #1
 800051c:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 8000520:	2b00      	cmp	r3, #0
 8000522:	dcf2      	bgt.n	800050a <main+0x12>
  if ( timeout < 0 )
 8000524:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000528:	2b00      	cmp	r3, #0
 800052a:	da01      	bge.n	8000530 <main+0x38>
  {
  Error_Handler();
 800052c:	f000 fbb0 	bl	8000c90 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 fdfc 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 fa5e 	bl	80009f4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000538:	4b2c      	ldr	r3, [pc, #176]	; (80005ec <main+0xf4>)
 800053a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800053e:	4a2b      	ldr	r2, [pc, #172]	; (80005ec <main+0xf4>)
 8000540:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <main+0xf4>)
 800054a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800054e:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8000552:	463b      	mov	r3, r7
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	463b      	mov	r3, r7
 8000558:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800055a:	2000      	movs	r0, #0
 800055c:	f001 f99a 	bl	8001894 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000560:	2100      	movs	r1, #0
 8000562:	2000      	movs	r0, #0
 8000564:	f001 f9b0 	bl	80018c8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000568:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800056c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000570:	bf00      	nop
 8000572:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <main+0xf4>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800057a:	2b00      	cmp	r3, #0
 800057c:	d106      	bne.n	800058c <main+0x94>
 800057e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000582:	1e5a      	subs	r2, r3, #1
 8000584:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 8000588:	2b00      	cmp	r3, #0
 800058a:	dcf2      	bgt.n	8000572 <main+0x7a>
if ( timeout < 0 )
 800058c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000590:	2b00      	cmp	r3, #0
 8000592:	da01      	bge.n	8000598 <main+0xa0>
{
Error_Handler();
 8000594:	f000 fb7c 	bl	8000c90 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 fb08 	bl	8000bac <MX_GPIO_Init>
  MX_I2C4_Init();
 800059c:	f000 faa2 	bl	8000ae4 <MX_I2C4_Init>
  MX_SDMMC1_SD_Init();
 80005a0:	f000 fae0 	bl	8000b64 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80005a4:	f007 fb22 	bl	8007bec <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  GY_init();
 80005a8:	f7ff ff84 	bl	80004b4 <GY_init>



  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) == FR_OK)
 80005ac:	2200      	movs	r2, #0
 80005ae:	4910      	ldr	r1, [pc, #64]	; (80005f0 <main+0xf8>)
 80005b0:	4810      	ldr	r0, [pc, #64]	; (80005f4 <main+0xfc>)
 80005b2:	f009 faa9 	bl	8009b08 <f_mount>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	f040 8207 	bne.w	80009cc <main+0x4d4>
  {
	  //Formating
	  if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) == FR_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	2200      	movs	r2, #0
 80005c8:	2107      	movs	r1, #7
 80005ca:	4809      	ldr	r0, [pc, #36]	; (80005f0 <main+0xf8>)
 80005cc:	f009 febe 	bl	800a34c <f_mkfs>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	f040 81f5 	bne.w	80009c2 <main+0x4ca>
	  {

		  //Open file for writing (Create)
		  if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 80005d8:	220a      	movs	r2, #10
 80005da:	4907      	ldr	r1, [pc, #28]	; (80005f8 <main+0x100>)
 80005dc:	4807      	ldr	r0, [pc, #28]	; (80005fc <main+0x104>)
 80005de:	f009 fad9 	bl	8009b94 <f_open>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	f040 81ec 	bne.w	80009c2 <main+0x4ca>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
			  while (i<101)
 80005ea:	e1e2      	b.n	80009b2 <main+0x4ba>
 80005ec:	58024400 	.word	0x58024400
 80005f0:	24001294 	.word	0x24001294
 80005f4:	240014c8 	.word	0x240014c8
 80005f8:	0800d288 	.word	0x0800d288
 80005fc:	24001298 	.word	0x24001298
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


				 i2c_data[0]=0x3B; // First of the 14 registers we want data from
 8000600:	4bbb      	ldr	r3, [pc, #748]	; (80008f0 <main+0x3f8>)
 8000602:	223b      	movs	r2, #59	; 0x3b
 8000604:	701a      	strb	r2, [r3, #0]
				 HAL_I2C_Master_Transmit(&hi2c4, 0xD0, i2c_data, 1, 10);
 8000606:	230a      	movs	r3, #10
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2301      	movs	r3, #1
 800060c:	4ab8      	ldr	r2, [pc, #736]	; (80008f0 <main+0x3f8>)
 800060e:	21d0      	movs	r1, #208	; 0xd0
 8000610:	48b8      	ldr	r0, [pc, #736]	; (80008f4 <main+0x3fc>)
 8000612:	f001 f9fd 	bl	8001a10 <HAL_I2C_Master_Transmit>
				 HAL_I2C_Master_Receive(&hi2c4, 0xD1, i2c_data, 14, 10);//Read from all 14 registers
 8000616:	230a      	movs	r3, #10
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	230e      	movs	r3, #14
 800061c:	4ab4      	ldr	r2, [pc, #720]	; (80008f0 <main+0x3f8>)
 800061e:	21d1      	movs	r1, #209	; 0xd1
 8000620:	48b4      	ldr	r0, [pc, #720]	; (80008f4 <main+0x3fc>)
 8000622:	f001 fae9 	bl	8001bf8 <HAL_I2C_Master_Receive>

				 acc_x_raw=(int16_t)(i2c_data[0]<<8 |i2c_data[1]); //first 2 values are acc_x_H and acc_x_L
 8000626:	4bb2      	ldr	r3, [pc, #712]	; (80008f0 <main+0x3f8>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	021b      	lsls	r3, r3, #8
 800062c:	b21a      	sxth	r2, r3
 800062e:	4bb0      	ldr	r3, [pc, #704]	; (80008f0 <main+0x3f8>)
 8000630:	785b      	ldrb	r3, [r3, #1]
 8000632:	b21b      	sxth	r3, r3
 8000634:	4313      	orrs	r3, r2
 8000636:	b21a      	sxth	r2, r3
 8000638:	4baf      	ldr	r3, [pc, #700]	; (80008f8 <main+0x400>)
 800063a:	801a      	strh	r2, [r3, #0]
				 acc_y_raw=(int16_t)(i2c_data[2]<<8 |i2c_data[3]); //next 2 values are acc_y_H and acc_y_L
 800063c:	4bac      	ldr	r3, [pc, #688]	; (80008f0 <main+0x3f8>)
 800063e:	789b      	ldrb	r3, [r3, #2]
 8000640:	021b      	lsls	r3, r3, #8
 8000642:	b21a      	sxth	r2, r3
 8000644:	4baa      	ldr	r3, [pc, #680]	; (80008f0 <main+0x3f8>)
 8000646:	78db      	ldrb	r3, [r3, #3]
 8000648:	b21b      	sxth	r3, r3
 800064a:	4313      	orrs	r3, r2
 800064c:	b21a      	sxth	r2, r3
 800064e:	4bab      	ldr	r3, [pc, #684]	; (80008fc <main+0x404>)
 8000650:	801a      	strh	r2, [r3, #0]
				 acc_z_raw=(int16_t)(i2c_data[4]<<8 |i2c_data[5]); //next 2 values are acc_z_H and acc_z_L
 8000652:	4ba7      	ldr	r3, [pc, #668]	; (80008f0 <main+0x3f8>)
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	021b      	lsls	r3, r3, #8
 8000658:	b21a      	sxth	r2, r3
 800065a:	4ba5      	ldr	r3, [pc, #660]	; (80008f0 <main+0x3f8>)
 800065c:	795b      	ldrb	r3, [r3, #5]
 800065e:	b21b      	sxth	r3, r3
 8000660:	4313      	orrs	r3, r2
 8000662:	b21a      	sxth	r2, r3
 8000664:	4ba6      	ldr	r3, [pc, #664]	; (8000900 <main+0x408>)
 8000666:	801a      	strh	r2, [r3, #0]

				 temp_raw=(int16_t)(i2c_data[6]<<8 |i2c_data[7]);  //next 2 values are temp_H and temp_L
 8000668:	4ba1      	ldr	r3, [pc, #644]	; (80008f0 <main+0x3f8>)
 800066a:	799b      	ldrb	r3, [r3, #6]
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	b21a      	sxth	r2, r3
 8000670:	4b9f      	ldr	r3, [pc, #636]	; (80008f0 <main+0x3f8>)
 8000672:	79db      	ldrb	r3, [r3, #7]
 8000674:	b21b      	sxth	r3, r3
 8000676:	4313      	orrs	r3, r2
 8000678:	b21a      	sxth	r2, r3
 800067a:	4ba2      	ldr	r3, [pc, #648]	; (8000904 <main+0x40c>)
 800067c:	801a      	strh	r2, [r3, #0]

				 ////////////////////////////////////////////////////////////////////////


				 gyro_x_raw=(int16_t)(i2c_data[8]<<8 |i2c_data[9]);
 800067e:	4b9c      	ldr	r3, [pc, #624]	; (80008f0 <main+0x3f8>)
 8000680:	7a1b      	ldrb	r3, [r3, #8]
 8000682:	021b      	lsls	r3, r3, #8
 8000684:	b21a      	sxth	r2, r3
 8000686:	4b9a      	ldr	r3, [pc, #616]	; (80008f0 <main+0x3f8>)
 8000688:	7a5b      	ldrb	r3, [r3, #9]
 800068a:	b21b      	sxth	r3, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	b21a      	sxth	r2, r3
 8000690:	4b9d      	ldr	r3, [pc, #628]	; (8000908 <main+0x410>)
 8000692:	801a      	strh	r2, [r3, #0]
				 gyro_y_raw=(int16_t)(i2c_data[10]<<8 |i2c_data[11]);
 8000694:	4b96      	ldr	r3, [pc, #600]	; (80008f0 <main+0x3f8>)
 8000696:	7a9b      	ldrb	r3, [r3, #10]
 8000698:	021b      	lsls	r3, r3, #8
 800069a:	b21a      	sxth	r2, r3
 800069c:	4b94      	ldr	r3, [pc, #592]	; (80008f0 <main+0x3f8>)
 800069e:	7adb      	ldrb	r3, [r3, #11]
 80006a0:	b21b      	sxth	r3, r3
 80006a2:	4313      	orrs	r3, r2
 80006a4:	b21a      	sxth	r2, r3
 80006a6:	4b99      	ldr	r3, [pc, #612]	; (800090c <main+0x414>)
 80006a8:	801a      	strh	r2, [r3, #0]
				 gyro_z_raw=(int16_t)(i2c_data[12]<<8 |i2c_data[13]);
 80006aa:	4b91      	ldr	r3, [pc, #580]	; (80008f0 <main+0x3f8>)
 80006ac:	7b1b      	ldrb	r3, [r3, #12]
 80006ae:	021b      	lsls	r3, r3, #8
 80006b0:	b21a      	sxth	r2, r3
 80006b2:	4b8f      	ldr	r3, [pc, #572]	; (80008f0 <main+0x3f8>)
 80006b4:	7b5b      	ldrb	r3, [r3, #13]
 80006b6:	b21b      	sxth	r3, r3
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b21a      	sxth	r2, r3
 80006bc:	4b94      	ldr	r3, [pc, #592]	; (8000910 <main+0x418>)
 80006be:	801a      	strh	r2, [r3, #0]


				 acc_x=acc_x_raw/16384.0;
 80006c0:	4b8d      	ldr	r3, [pc, #564]	; (80008f8 <main+0x400>)
 80006c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c6:	ee07 3a90 	vmov	s15, r3
 80006ca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80006ce:	ed9f 5b80 	vldr	d5, [pc, #512]	; 80008d0 <main+0x3d8>
 80006d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006da:	4b8e      	ldr	r3, [pc, #568]	; (8000914 <main+0x41c>)
 80006dc:	edc3 7a00 	vstr	s15, [r3]
				 acc_y=acc_y_raw/16384.0;
 80006e0:	4b86      	ldr	r3, [pc, #536]	; (80008fc <main+0x404>)
 80006e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006e6:	ee07 3a90 	vmov	s15, r3
 80006ea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80006ee:	ed9f 5b78 	vldr	d5, [pc, #480]	; 80008d0 <main+0x3d8>
 80006f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006fa:	4b87      	ldr	r3, [pc, #540]	; (8000918 <main+0x420>)
 80006fc:	edc3 7a00 	vstr	s15, [r3]
				 acc_z=acc_z_raw/16384.0;
 8000700:	4b7f      	ldr	r3, [pc, #508]	; (8000900 <main+0x408>)
 8000702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000706:	ee07 3a90 	vmov	s15, r3
 800070a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800070e:	ed9f 5b70 	vldr	d5, [pc, #448]	; 80008d0 <main+0x3d8>
 8000712:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000716:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800071a:	4b80      	ldr	r3, [pc, #512]	; (800091c <main+0x424>)
 800071c:	edc3 7a00 	vstr	s15, [r3]

				 temp=(temp_raw+12412.0) / 340.0;
 8000720:	4b78      	ldr	r3, [pc, #480]	; (8000904 <main+0x40c>)
 8000722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000726:	ee07 3a90 	vmov	s15, r3
 800072a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800072e:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80008d8 <main+0x3e0>
 8000732:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000736:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80008e0 <main+0x3e8>
 800073a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800073e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000742:	4b77      	ldr	r3, [pc, #476]	; (8000920 <main+0x428>)
 8000744:	edc3 7a00 	vstr	s15, [r3]

				 gyro_x=gyro_x_raw/131.0;
 8000748:	4b6f      	ldr	r3, [pc, #444]	; (8000908 <main+0x410>)
 800074a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800074e:	ee07 3a90 	vmov	s15, r3
 8000752:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000756:	ed9f 5b64 	vldr	d5, [pc, #400]	; 80008e8 <main+0x3f0>
 800075a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800075e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000762:	4b70      	ldr	r3, [pc, #448]	; (8000924 <main+0x42c>)
 8000764:	edc3 7a00 	vstr	s15, [r3]
				 gyro_y=gyro_y_raw/131.0;
 8000768:	4b68      	ldr	r3, [pc, #416]	; (800090c <main+0x414>)
 800076a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800076e:	ee07 3a90 	vmov	s15, r3
 8000772:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000776:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 80008e8 <main+0x3f0>
 800077a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800077e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000782:	4b69      	ldr	r3, [pc, #420]	; (8000928 <main+0x430>)
 8000784:	edc3 7a00 	vstr	s15, [r3]
				 gyro_z=gyro_z_raw/131.0;
 8000788:	4b61      	ldr	r3, [pc, #388]	; (8000910 <main+0x418>)
 800078a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800078e:	ee07 3a90 	vmov	s15, r3
 8000792:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000796:	ed9f 5b54 	vldr	d5, [pc, #336]	; 80008e8 <main+0x3f0>
 800079a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800079e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007a2:	4b62      	ldr	r3, [pc, #392]	; (800092c <main+0x434>)
 80007a4:	edc3 7a00 	vstr	s15, [r3]

				 ////////////////////////////////////////////////////
				 gcvt(temp,5,str2);
 80007a8:	4b5d      	ldr	r3, [pc, #372]	; (8000920 <main+0x428>)
 80007aa:	edd3 7a00 	vldr	s15, [r3]
 80007ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007b2:	495f      	ldr	r1, [pc, #380]	; (8000930 <main+0x438>)
 80007b4:	2005      	movs	r0, #5
 80007b6:	eeb0 0b47 	vmov.f64	d0, d7
 80007ba:	f00a fa4f 	bl	800ac5c <gcvt>
				 str2[iter + 5]='|';
 80007be:	4b5d      	ldr	r3, [pc, #372]	; (8000934 <main+0x43c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3305      	adds	r3, #5
 80007c4:	4a5a      	ldr	r2, [pc, #360]	; (8000930 <main+0x438>)
 80007c6:	217c      	movs	r1, #124	; 0x7c
 80007c8:	54d1      	strb	r1, [r2, r3]

				 gcvt(acc_x,5,&str2[iter +6]);
 80007ca:	4b52      	ldr	r3, [pc, #328]	; (8000914 <main+0x41c>)
 80007cc:	edd3 7a00 	vldr	s15, [r3]
 80007d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007d4:	4b57      	ldr	r3, [pc, #348]	; (8000934 <main+0x43c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3306      	adds	r3, #6
 80007da:	4a55      	ldr	r2, [pc, #340]	; (8000930 <main+0x438>)
 80007dc:	4413      	add	r3, r2
 80007de:	4619      	mov	r1, r3
 80007e0:	2005      	movs	r0, #5
 80007e2:	eeb0 0b47 	vmov.f64	d0, d7
 80007e6:	f00a fa39 	bl	800ac5c <gcvt>
				 str2[iter + 11]='|';
 80007ea:	4b52      	ldr	r3, [pc, #328]	; (8000934 <main+0x43c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	330b      	adds	r3, #11
 80007f0:	4a4f      	ldr	r2, [pc, #316]	; (8000930 <main+0x438>)
 80007f2:	217c      	movs	r1, #124	; 0x7c
 80007f4:	54d1      	strb	r1, [r2, r3]

				 gcvt(acc_y,5,&str2[iter + 12]);
 80007f6:	4b48      	ldr	r3, [pc, #288]	; (8000918 <main+0x420>)
 80007f8:	edd3 7a00 	vldr	s15, [r3]
 80007fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000800:	4b4c      	ldr	r3, [pc, #304]	; (8000934 <main+0x43c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	330c      	adds	r3, #12
 8000806:	4a4a      	ldr	r2, [pc, #296]	; (8000930 <main+0x438>)
 8000808:	4413      	add	r3, r2
 800080a:	4619      	mov	r1, r3
 800080c:	2005      	movs	r0, #5
 800080e:	eeb0 0b47 	vmov.f64	d0, d7
 8000812:	f00a fa23 	bl	800ac5c <gcvt>
				 str2[iter + 17]='|';
 8000816:	4b47      	ldr	r3, [pc, #284]	; (8000934 <main+0x43c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	3311      	adds	r3, #17
 800081c:	4a44      	ldr	r2, [pc, #272]	; (8000930 <main+0x438>)
 800081e:	217c      	movs	r1, #124	; 0x7c
 8000820:	54d1      	strb	r1, [r2, r3]

				 gcvt(acc_z,5,&str2[iter +18]);
 8000822:	4b3e      	ldr	r3, [pc, #248]	; (800091c <main+0x424>)
 8000824:	edd3 7a00 	vldr	s15, [r3]
 8000828:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800082c:	4b41      	ldr	r3, [pc, #260]	; (8000934 <main+0x43c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	3312      	adds	r3, #18
 8000832:	4a3f      	ldr	r2, [pc, #252]	; (8000930 <main+0x438>)
 8000834:	4413      	add	r3, r2
 8000836:	4619      	mov	r1, r3
 8000838:	2005      	movs	r0, #5
 800083a:	eeb0 0b47 	vmov.f64	d0, d7
 800083e:	f00a fa0d 	bl	800ac5c <gcvt>
				 str2[iter + 23]='|';
 8000842:	4b3c      	ldr	r3, [pc, #240]	; (8000934 <main+0x43c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	3317      	adds	r3, #23
 8000848:	4a39      	ldr	r2, [pc, #228]	; (8000930 <main+0x438>)
 800084a:	217c      	movs	r1, #124	; 0x7c
 800084c:	54d1      	strb	r1, [r2, r3]

				 gcvt(gyro_x,5,&str2[iter +24]);
 800084e:	4b35      	ldr	r3, [pc, #212]	; (8000924 <main+0x42c>)
 8000850:	edd3 7a00 	vldr	s15, [r3]
 8000854:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000858:	4b36      	ldr	r3, [pc, #216]	; (8000934 <main+0x43c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	3318      	adds	r3, #24
 800085e:	4a34      	ldr	r2, [pc, #208]	; (8000930 <main+0x438>)
 8000860:	4413      	add	r3, r2
 8000862:	4619      	mov	r1, r3
 8000864:	2005      	movs	r0, #5
 8000866:	eeb0 0b47 	vmov.f64	d0, d7
 800086a:	f00a f9f7 	bl	800ac5c <gcvt>
				 str2[iter + 29]='|';
 800086e:	4b31      	ldr	r3, [pc, #196]	; (8000934 <main+0x43c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	331d      	adds	r3, #29
 8000874:	4a2e      	ldr	r2, [pc, #184]	; (8000930 <main+0x438>)
 8000876:	217c      	movs	r1, #124	; 0x7c
 8000878:	54d1      	strb	r1, [r2, r3]

				 gcvt(gyro_y,5,&str2[iter +30]);
 800087a:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <main+0x430>)
 800087c:	edd3 7a00 	vldr	s15, [r3]
 8000880:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000884:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <main+0x43c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	331e      	adds	r3, #30
 800088a:	4a29      	ldr	r2, [pc, #164]	; (8000930 <main+0x438>)
 800088c:	4413      	add	r3, r2
 800088e:	4619      	mov	r1, r3
 8000890:	2005      	movs	r0, #5
 8000892:	eeb0 0b47 	vmov.f64	d0, d7
 8000896:	f00a f9e1 	bl	800ac5c <gcvt>
				 str2[iter + 35]='|';
 800089a:	4b26      	ldr	r3, [pc, #152]	; (8000934 <main+0x43c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	3323      	adds	r3, #35	; 0x23
 80008a0:	4a23      	ldr	r2, [pc, #140]	; (8000930 <main+0x438>)
 80008a2:	217c      	movs	r1, #124	; 0x7c
 80008a4:	54d1      	strb	r1, [r2, r3]

				 gcvt(gyro_z,5,&str2[iter +36]);
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <main+0x434>)
 80008a8:	edd3 7a00 	vldr	s15, [r3]
 80008ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008b0:	4b20      	ldr	r3, [pc, #128]	; (8000934 <main+0x43c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	3324      	adds	r3, #36	; 0x24
 80008b6:	4a1e      	ldr	r2, [pc, #120]	; (8000930 <main+0x438>)
 80008b8:	4413      	add	r3, r2
 80008ba:	4619      	mov	r1, r3
 80008bc:	2005      	movs	r0, #5
 80008be:	eeb0 0b47 	vmov.f64	d0, d7
 80008c2:	f00a f9cb 	bl	800ac5c <gcvt>
				 str2[iter + 41]='|';
 80008c6:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <main+0x43c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3329      	adds	r3, #41	; 0x29
 80008cc:	e034      	b.n	8000938 <main+0x440>
 80008ce:	bf00      	nop
 80008d0:	00000000 	.word	0x00000000
 80008d4:	40d00000 	.word	0x40d00000
 80008d8:	00000000 	.word	0x00000000
 80008dc:	40c83e00 	.word	0x40c83e00
 80008e0:	00000000 	.word	0x00000000
 80008e4:	40754000 	.word	0x40754000
 80008e8:	00000000 	.word	0x00000000
 80008ec:	40606000 	.word	0x40606000
 80008f0:	24001278 	.word	0x24001278
 80008f4:	240011ac 	.word	0x240011ac
 80008f8:	2400112c 	.word	0x2400112c
 80008fc:	2400112e 	.word	0x2400112e
 8000900:	24001130 	.word	0x24001130
 8000904:	24001124 	.word	0x24001124
 8000908:	24001140 	.word	0x24001140
 800090c:	24001142 	.word	0x24001142
 8000910:	24001144 	.word	0x24001144
 8000914:	24001134 	.word	0x24001134
 8000918:	24001138 	.word	0x24001138
 800091c:	2400113c 	.word	0x2400113c
 8000920:	24001128 	.word	0x24001128
 8000924:	24001148 	.word	0x24001148
 8000928:	2400114c 	.word	0x2400114c
 800092c:	24001150 	.word	0x24001150
 8000930:	24000008 	.word	0x24000008
 8000934:	24001160 	.word	0x24001160
 8000938:	4a27      	ldr	r2, [pc, #156]	; (80009d8 <main+0x4e0>)
 800093a:	217c      	movs	r1, #124	; 0x7c
 800093c:	54d1      	strb	r1, [r2, r3]

				for (int k=0;k<42;k++)
 800093e:	2300      	movs	r3, #0
 8000940:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8000944:	e012      	b.n	800096c <main+0x474>
				{
					str3[size]=str2[k];
 8000946:	4b25      	ldr	r3, [pc, #148]	; (80009dc <main+0x4e4>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4923      	ldr	r1, [pc, #140]	; (80009d8 <main+0x4e0>)
 800094c:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8000950:	440a      	add	r2, r1
 8000952:	7811      	ldrb	r1, [r2, #0]
 8000954:	4a22      	ldr	r2, [pc, #136]	; (80009e0 <main+0x4e8>)
 8000956:	54d1      	strb	r1, [r2, r3]
					size++;
 8000958:	4b20      	ldr	r3, [pc, #128]	; (80009dc <main+0x4e4>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	3301      	adds	r3, #1
 800095e:	4a1f      	ldr	r2, [pc, #124]	; (80009dc <main+0x4e4>)
 8000960:	6013      	str	r3, [r2, #0]
				for (int k=0;k<42;k++)
 8000962:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000966:	3301      	adds	r3, #1
 8000968:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 800096c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000970:	2b29      	cmp	r3, #41	; 0x29
 8000972:	dde8      	ble.n	8000946 <main+0x44e>
				}



				if (j==100)
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <main+0x4ec>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b64      	cmp	r3, #100	; 0x64
 800097a:	d10d      	bne.n	8000998 <main+0x4a0>
				{
					f_write(&SDFile,str3,sizeof(str3), (void *)&byteswritten);
 800097c:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8000980:	f241 0268 	movw	r2, #4200	; 0x1068
 8000984:	4916      	ldr	r1, [pc, #88]	; (80009e0 <main+0x4e8>)
 8000986:	4818      	ldr	r0, [pc, #96]	; (80009e8 <main+0x4f0>)
 8000988:	f009 fac2 	bl	8009f10 <f_write>
					j=0;
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <main+0x4ec>)
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
					size=0;
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <main+0x4e4>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]

				}

				//iter=iter+42;
				i=i+1;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <main+0x4f4>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	3301      	adds	r3, #1
 800099e:	4a13      	ldr	r2, [pc, #76]	; (80009ec <main+0x4f4>)
 80009a0:	6013      	str	r3, [r2, #0]
				j=j+1;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <main+0x4ec>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <main+0x4ec>)
 80009aa:	6013      	str	r3, [r2, #0]



*/

				 HAL_Delay(60);
 80009ac:	203c      	movs	r0, #60	; 0x3c
 80009ae:	f000 fc4f 	bl	8001250 <HAL_Delay>
			  while (i<101)
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <main+0x4f4>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b64      	cmp	r3, #100	; 0x64
 80009b8:	f77f ae22 	ble.w	8000600 <main+0x108>
			  	 }




  	  	  	f_close(&SDFile);
 80009bc:	480a      	ldr	r0, [pc, #40]	; (80009e8 <main+0x4f0>)
 80009be:	f009 fc9a 	bl	800a2f6 <f_close>
  	 		}
	  }
  f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	480a      	ldr	r0, [pc, #40]	; (80009f0 <main+0x4f8>)
 80009c8:	f009 f89e 	bl	8009b08 <f_mount>
 80009cc:	2300      	movs	r3, #0
  }


  /* USER CODE END 3 */
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	24000008 	.word	0x24000008
 80009dc:	24001154 	.word	0x24001154
 80009e0:	24000034 	.word	0x24000034
 80009e4:	2400115c 	.word	0x2400115c
 80009e8:	24001298 	.word	0x24001298
 80009ec:	24001158 	.word	0x24001158
 80009f0:	240014c8 	.word	0x240014c8

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b09c      	sub	sp, #112	; 0x70
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fe:	224c      	movs	r2, #76	; 0x4c
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f00a f972 	bl	800acec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2220      	movs	r2, #32
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f00a f96c 	bl	800acec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a14:	2004      	movs	r0, #4
 8000a16:	f001 fd65 	bl	80024e4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <SystemClock_Config+0xe4>)
 8000a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a22:	4a2d      	ldr	r2, [pc, #180]	; (8000ad8 <SystemClock_Config+0xe4>)
 8000a24:	f023 0301 	bic.w	r3, r3, #1
 8000a28:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <SystemClock_Config+0xe4>)
 8000a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	4b29      	ldr	r3, [pc, #164]	; (8000adc <SystemClock_Config+0xe8>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a28      	ldr	r2, [pc, #160]	; (8000adc <SystemClock_Config+0xe8>)
 8000a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <SystemClock_Config+0xe8>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a4c:	bf00      	nop
 8000a4e:	4b23      	ldr	r3, [pc, #140]	; (8000adc <SystemClock_Config+0xe8>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a5a:	d1f8      	bne.n	8000a4e <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a5c:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <SystemClock_Config+0xec>)
 8000a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a60:	f023 0303 	bic.w	r3, r3, #3
 8000a64:	4a1e      	ldr	r2, [pc, #120]	; (8000ae0 <SystemClock_Config+0xec>)
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7a:	2340      	movs	r3, #64	; 0x40
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a82:	2302      	movs	r3, #2
 8000a84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 fd84 	bl	8002598 <HAL_RCC_OscConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a96:	f000 f8fb 	bl	8000c90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9a:	233f      	movs	r3, #63	; 0x3f
 8000a9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f002 f97a 	bl	8002db8 <HAL_RCC_ClockConfig>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000aca:	f000 f8e1 	bl	8000c90 <Error_Handler>
  }
}
 8000ace:	bf00      	nop
 8000ad0:	3770      	adds	r7, #112	; 0x70
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	58000400 	.word	0x58000400
 8000adc:	58024800 	.word	0x58024800
 8000ae0:	58024400 	.word	0x58024400

08000ae4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000aea:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <MX_I2C4_Init+0x78>)
 8000aec:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x403032CA;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000af0:	4a1b      	ldr	r2, [pc, #108]	; (8000b60 <MX_I2C4_Init+0x7c>)
 8000af2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000af4:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000b06:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000b1e:	480e      	ldr	r0, [pc, #56]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000b20:	f000 fee6 	bl	80018f0 <HAL_I2C_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b2a:	f000 f8b1 	bl	8000c90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4809      	ldr	r0, [pc, #36]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000b32:	f001 fc3f 	bl	80023b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b3c:	f000 f8a8 	bl	8000c90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b40:	2100      	movs	r1, #0
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_I2C4_Init+0x74>)
 8000b44:	f001 fc81 	bl	800244a <HAL_I2CEx_ConfigDigitalFilter>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b4e:	f000 f89f 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	240011ac 	.word	0x240011ac
 8000b5c:	58001c00 	.word	0x58001c00
 8000b60:	403032ca 	.word	0x403032ca

08000b64 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_SDMMC1_SD_Init+0x40>)
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <MX_SDMMC1_SD_Init+0x44>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MX_SDMMC1_SD_Init+0x40>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_SDMMC1_SD_Init+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_SDMMC1_SD_Init+0x40>)
 8000b7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b80:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_SDMMC1_SD_Init+0x40>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_SDMMC1_SD_Init+0x40>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_SDMMC1_SD_Init+0x40>)
 8000b90:	f004 fe28 	bl	80057e4 <HAL_SD_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000b9a:	f000 f879 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	240011fc 	.word	0x240011fc
 8000ba8:	52007000 	.word	0x52007000

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	4b31      	ldr	r3, [pc, #196]	; (8000c88 <MX_GPIO_Init+0xdc>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	4a2f      	ldr	r2, [pc, #188]	; (8000c88 <MX_GPIO_Init+0xdc>)
 8000bca:	f043 0304 	orr.w	r3, r3, #4
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <MX_GPIO_Init+0xdc>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <MX_GPIO_Init+0xdc>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be6:	4a28      	ldr	r2, [pc, #160]	; (8000c88 <MX_GPIO_Init+0xdc>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf0:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <MX_GPIO_Init+0xdc>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000bfe:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <MX_GPIO_Init+0xdc>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	4a20      	ldr	r2, [pc, #128]	; (8000c88 <MX_GPIO_Init+0xdc>)
 8000c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <MX_GPIO_Init+0xdc>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_GPIO_Init+0xdc>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c22:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <MX_GPIO_Init+0xdc>)
 8000c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_GPIO_Init+0xdc>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000c40:	4812      	ldr	r0, [pc, #72]	; (8000c8c <MX_GPIO_Init+0xe0>)
 8000c42:	f000 fe0d 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480c      	ldr	r0, [pc, #48]	; (8000c8c <MX_GPIO_Init+0xe0>)
 8000c5c:	f000 fc38 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000c60:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	4804      	ldr	r0, [pc, #16]	; (8000c8c <MX_GPIO_Init+0xe0>)
 8000c7a:	f000 fc29 	bl	80014d0 <HAL_GPIO_Init>

}
 8000c7e:	bf00      	nop
 8000c80:	3728      	adds	r7, #40	; 0x28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	58024400 	.word	0x58024400
 8000c8c:	58022000 	.word	0x58022000

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_MspInit+0x30>)
 8000ca4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ca8:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_MspInit+0x30>)
 8000caa:	f043 0302 	orr.w	r3, r3, #2
 8000cae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MspInit+0x30>)
 8000cb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	58024400 	.word	0x58024400

08000cd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b0ba      	sub	sp, #232	; 0xe8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	22c0      	movs	r2, #192	; 0xc0
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f009 fffb 	bl	800acec <memset>
  if(hi2c->Instance==I2C4)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <HAL_I2C_MspInit+0xc0>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d142      	bne.n	8000d86 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000d00:	2310      	movs	r3, #16
 8000d02:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f002 fbb2 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d1a:	f7ff ffb9 	bl	8000c90 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <HAL_I2C_MspInit+0xc4>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <HAL_I2C_MspInit+0xc4>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <HAL_I2C_MspInit+0xc4>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	f003 0308 	and.w	r3, r3, #8
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000d3c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d44:	2312      	movs	r3, #18
 8000d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000d56:	2304      	movs	r3, #4
 8000d58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d60:	4619      	mov	r1, r3
 8000d62:	480d      	ldr	r0, [pc, #52]	; (8000d98 <HAL_I2C_MspInit+0xc8>)
 8000d64:	f000 fbb4 	bl	80014d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_I2C_MspInit+0xc4>)
 8000d6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d6e:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <HAL_I2C_MspInit+0xc4>)
 8000d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_I2C_MspInit+0xc4>)
 8000d7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000d86:	bf00      	nop
 8000d88:	37e8      	adds	r7, #232	; 0xe8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	58001c00 	.word	0x58001c00
 8000d94:	58024400 	.word	0x58024400
 8000d98:	58020c00 	.word	0x58020c00

08000d9c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0ba      	sub	sp, #232	; 0xe8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	22c0      	movs	r2, #192	; 0xc0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f009 ff95 	bl	800acec <memset>
  if(hsd->Instance==SDMMC1)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a43      	ldr	r2, [pc, #268]	; (8000ed4 <HAL_SD_MspInit+0x138>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d17f      	bne.n	8000ecc <HAL_SD_MspInit+0x130>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000dcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000dd6:	230c      	movs	r3, #12
 8000dd8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000dde:	2302      	movs	r3, #2
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000de2:	2301      	movs	r3, #1
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000de6:	23c0      	movs	r3, #192	; 0xc0
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000dea:	2320      	movs	r3, #32
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f002 fb3b 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 8000e08:	f7ff ff42 	bl	8000c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000e0c:	4b32      	ldr	r3, [pc, #200]	; (8000ed8 <HAL_SD_MspInit+0x13c>)
 8000e0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e12:	4a31      	ldr	r2, [pc, #196]	; (8000ed8 <HAL_SD_MspInit+0x13c>)
 8000e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e18:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000e1c:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <HAL_SD_MspInit+0x13c>)
 8000e1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <HAL_SD_MspInit+0x13c>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	4a29      	ldr	r2, [pc, #164]	; (8000ed8 <HAL_SD_MspInit+0x13c>)
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3a:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <HAL_SD_MspInit+0x13c>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e48:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <HAL_SD_MspInit+0x13c>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	4a22      	ldr	r2, [pc, #136]	; (8000ed8 <HAL_SD_MspInit+0x13c>)
 8000e50:	f043 0308 	orr.w	r3, r3, #8
 8000e54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e58:	4b1f      	ldr	r3, [pc, #124]	; (8000ed8 <HAL_SD_MspInit+0x13c>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 8000e66:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000e80:	230c      	movs	r3, #12
 8000e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e86:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4813      	ldr	r0, [pc, #76]	; (8000edc <HAL_SD_MspInit+0x140>)
 8000e8e:	f000 fb1f 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e92:	2304      	movs	r3, #4
 8000e94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000eaa:	230c      	movs	r3, #12
 8000eac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <HAL_SD_MspInit+0x144>)
 8000eb8:	f000 fb0a 	bl	80014d0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2031      	movs	r0, #49	; 0x31
 8000ec2:	f000 fad0 	bl	8001466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000ec6:	2031      	movs	r0, #49	; 0x31
 8000ec8:	f000 fae7 	bl	800149a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000ecc:	bf00      	nop
 8000ece:	37e8      	adds	r7, #232	; 0xe8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	52007000 	.word	0x52007000
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	58020800 	.word	0x58020800
 8000ee0:	58020c00 	.word	0x58020c00

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler+0x4>

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f30:	f000 f96e 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <SDMMC1_IRQHandler+0x10>)
 8000f3e:	f004 feb9 	bl	8005cb4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	240011fc 	.word	0x240011fc

08000f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
	return 1;
 8000f50:	2301      	movs	r3, #1
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <_kill>:

int _kill(int pid, int sig)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f66:	f009 fe97 	bl	800ac98 <__errno>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2216      	movs	r2, #22
 8000f6e:	601a      	str	r2, [r3, #0]
	return -1;
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <_exit>:

void _exit (int status)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ffe7 	bl	8000f5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f8e:	e7fe      	b.n	8000f8e <_exit+0x12>

08000f90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	e00a      	b.n	8000fb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fa2:	f3af 8000 	nop.w
 8000fa6:	4601      	mov	r1, r0
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	1c5a      	adds	r2, r3, #1
 8000fac:	60ba      	str	r2, [r7, #8]
 8000fae:	b2ca      	uxtb	r2, r1
 8000fb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	dbf0      	blt.n	8000fa2 <_read+0x12>
	}

return len;
 8000fc0:	687b      	ldr	r3, [r7, #4]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	60f8      	str	r0, [r7, #12]
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	e009      	b.n	8000ff0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	60ba      	str	r2, [r7, #8]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3301      	adds	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dbf1      	blt.n	8000fdc <_write+0x12>
	}
	return len;
 8000ff8:	687b      	ldr	r3, [r7, #4]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <_close>:

int _close(int file)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
	return -1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800102a:	605a      	str	r2, [r3, #4]
	return 0;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <_isatty>:

int _isatty(int file)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
	return 1;
 8001042:	2301      	movs	r3, #1
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
	return 0;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001074:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <_sbrk+0x5c>)
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <_sbrk+0x60>)
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <_sbrk+0x64>)
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <_sbrk+0x68>)
 800108c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <_sbrk+0x64>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	429a      	cmp	r2, r3
 800109a:	d207      	bcs.n	80010ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800109c:	f009 fdfc 	bl	800ac98 <__errno>
 80010a0:	4603      	mov	r3, r0
 80010a2:	220c      	movs	r2, #12
 80010a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
 80010aa:	e009      	b.n	80010c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <_sbrk+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b2:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <_sbrk+0x64>)
 80010bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010be:	68fb      	ldr	r3, [r7, #12]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	24040000 	.word	0x24040000
 80010cc:	00000800 	.word	0x00000800
 80010d0:	24001164 	.word	0x24001164
 80010d4:	24001708 	.word	0x24001708

080010d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001110 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010dc:	f7ff f950 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	; (8001118 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	; (8001124 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001106:	f009 fdcd 	bl	800aca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110a:	f7ff f9f5 	bl	80004f8 <main>
  bx  lr
 800110e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001110:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8001114:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001118:	24001108 	.word	0x24001108
  ldr r2, =_sidata
 800111c:	0800d66c 	.word	0x0800d66c
  ldr r2, =_sbss
 8001120:	24001108 	.word	0x24001108
  ldr r4, =_ebss
 8001124:	24001708 	.word	0x24001708

08001128 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC3_IRQHandler>
	...

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001132:	2003      	movs	r0, #3
 8001134:	f000 f98c 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001138:	f001 fff4 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 800113c:	4602      	mov	r2, r0
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_Init+0x68>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	0a1b      	lsrs	r3, r3, #8
 8001144:	f003 030f 	and.w	r3, r3, #15
 8001148:	4913      	ldr	r1, [pc, #76]	; (8001198 <HAL_Init+0x6c>)
 800114a:	5ccb      	ldrb	r3, [r1, r3]
 800114c:	f003 031f 	and.w	r3, r3, #31
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_Init+0x68>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <HAL_Init+0x6c>)
 8001160:	5cd3      	ldrb	r3, [r2, r3]
 8001162:	f003 031f 	and.w	r3, r3, #31
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	fa22 f303 	lsr.w	r3, r2, r3
 800116c:	4a0b      	ldr	r2, [pc, #44]	; (800119c <HAL_Init+0x70>)
 800116e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001170:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <HAL_Init+0x74>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001176:	2000      	movs	r0, #0
 8001178:	f000 f814 	bl	80011a4 <HAL_InitTick>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e002      	b.n	800118c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001186:	f7ff fd89 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	58024400 	.word	0x58024400
 8001198:	0800d2d8 	.word	0x0800d2d8
 800119c:	24000004 	.word	0x24000004
 80011a0:	24000000 	.word	0x24000000

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_InitTick+0x60>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e021      	b.n	80011fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_InitTick+0x64>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_InitTick+0x60>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f971 	bl	80014b6 <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f000 f93b 	bl	8001466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_InitTick+0x68>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	240010a0 	.word	0x240010a0
 8001208:	24000000 	.word	0x24000000
 800120c:	2400109c 	.word	0x2400109c

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	240010a0 	.word	0x240010a0
 8001234:	2400128c 	.word	0x2400128c

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	2400128c 	.word	0x2400128c

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ffee 	bl	8001238 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_Delay+0x44>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffde 	bl	8001238 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	240010a0 	.word	0x240010a0

08001298 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <HAL_GetREVID+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	0c1b      	lsrs	r3, r3, #16
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	5c001000 	.word	0x5c001000

080012b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <__NVIC_SetPriorityGrouping+0x40>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012cc:	4013      	ands	r3, r2
 80012ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <__NVIC_SetPriorityGrouping+0x40>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00
 80012f4:	05fa0000 	.word	0x05fa0000

080012f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <__NVIC_GetPriorityGrouping+0x18>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	f003 0307 	and.w	r3, r3, #7
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800131e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db0b      	blt.n	800133e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	f003 021f 	and.w	r2, r3, #31
 800132c:	4907      	ldr	r1, [pc, #28]	; (800134c <__NVIC_EnableIRQ+0x38>)
 800132e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2001      	movs	r0, #1
 8001336:	fa00 f202 	lsl.w	r2, r0, r2
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	88fb      	ldrh	r3, [r7, #6]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800141c:	d301      	bcc.n	8001422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141e:	2301      	movs	r3, #1
 8001420:	e00f      	b.n	8001442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <SysTick_Config+0x40>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142a:	210f      	movs	r1, #15
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f7ff ff8e 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <SysTick_Config+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <SysTick_Config+0x40>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff29 	bl	80012b0 <__NVIC_SetPriorityGrouping>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff40 	bl	80012f8 <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff90 	bl	80013a4 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5f 	bl	8001350 <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff33 	bl	8001314 <__NVIC_EnableIRQ>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffa4 	bl	800140c <SysTick_Config>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014de:	4b89      	ldr	r3, [pc, #548]	; (8001704 <HAL_GPIO_Init+0x234>)
 80014e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014e2:	e194      	b.n	800180e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 8186 	beq.w	8001808 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d00b      	beq.n	800151c <HAL_GPIO_Init+0x4c>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d007      	beq.n	800151c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001510:	2b11      	cmp	r3, #17
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b12      	cmp	r3, #18
 800151a:	d130      	bne.n	800157e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	2203      	movs	r2, #3
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001552:	2201      	movs	r2, #1
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	f003 0201 	and.w	r2, r3, #1
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0xee>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b12      	cmp	r3, #18
 80015bc:	d123      	bne.n	8001606 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	08da      	lsrs	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3208      	adds	r2, #8
 80015c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	691a      	ldr	r2, [r3, #16]
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	f003 0307 	and.w	r3, r3, #7
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	08da      	lsrs	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	69b9      	ldr	r1, [r7, #24]
 8001602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	2203      	movs	r2, #3
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0203 	and.w	r2, r3, #3
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 80e0 	beq.w	8001808 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <HAL_GPIO_Init+0x238>)
 800164a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800164e:	4a2e      	ldr	r2, [pc, #184]	; (8001708 <HAL_GPIO_Init+0x238>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <HAL_GPIO_Init+0x238>)
 800165a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001666:	4a29      	ldr	r2, [pc, #164]	; (800170c <HAL_GPIO_Init+0x23c>)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a20      	ldr	r2, [pc, #128]	; (8001710 <HAL_GPIO_Init+0x240>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d052      	beq.n	8001738 <HAL_GPIO_Init+0x268>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a1f      	ldr	r2, [pc, #124]	; (8001714 <HAL_GPIO_Init+0x244>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d031      	beq.n	80016fe <HAL_GPIO_Init+0x22e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a1e      	ldr	r2, [pc, #120]	; (8001718 <HAL_GPIO_Init+0x248>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d02b      	beq.n	80016fa <HAL_GPIO_Init+0x22a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a1d      	ldr	r2, [pc, #116]	; (800171c <HAL_GPIO_Init+0x24c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d025      	beq.n	80016f6 <HAL_GPIO_Init+0x226>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a1c      	ldr	r2, [pc, #112]	; (8001720 <HAL_GPIO_Init+0x250>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d01f      	beq.n	80016f2 <HAL_GPIO_Init+0x222>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a1b      	ldr	r2, [pc, #108]	; (8001724 <HAL_GPIO_Init+0x254>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d019      	beq.n	80016ee <HAL_GPIO_Init+0x21e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a1a      	ldr	r2, [pc, #104]	; (8001728 <HAL_GPIO_Init+0x258>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d013      	beq.n	80016ea <HAL_GPIO_Init+0x21a>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a19      	ldr	r2, [pc, #100]	; (800172c <HAL_GPIO_Init+0x25c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00d      	beq.n	80016e6 <HAL_GPIO_Init+0x216>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a18      	ldr	r2, [pc, #96]	; (8001730 <HAL_GPIO_Init+0x260>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d007      	beq.n	80016e2 <HAL_GPIO_Init+0x212>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a17      	ldr	r2, [pc, #92]	; (8001734 <HAL_GPIO_Init+0x264>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d101      	bne.n	80016de <HAL_GPIO_Init+0x20e>
 80016da:	2309      	movs	r3, #9
 80016dc:	e02d      	b.n	800173a <HAL_GPIO_Init+0x26a>
 80016de:	230a      	movs	r3, #10
 80016e0:	e02b      	b.n	800173a <HAL_GPIO_Init+0x26a>
 80016e2:	2308      	movs	r3, #8
 80016e4:	e029      	b.n	800173a <HAL_GPIO_Init+0x26a>
 80016e6:	2307      	movs	r3, #7
 80016e8:	e027      	b.n	800173a <HAL_GPIO_Init+0x26a>
 80016ea:	2306      	movs	r3, #6
 80016ec:	e025      	b.n	800173a <HAL_GPIO_Init+0x26a>
 80016ee:	2305      	movs	r3, #5
 80016f0:	e023      	b.n	800173a <HAL_GPIO_Init+0x26a>
 80016f2:	2304      	movs	r3, #4
 80016f4:	e021      	b.n	800173a <HAL_GPIO_Init+0x26a>
 80016f6:	2303      	movs	r3, #3
 80016f8:	e01f      	b.n	800173a <HAL_GPIO_Init+0x26a>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e01d      	b.n	800173a <HAL_GPIO_Init+0x26a>
 80016fe:	2301      	movs	r3, #1
 8001700:	e01b      	b.n	800173a <HAL_GPIO_Init+0x26a>
 8001702:	bf00      	nop
 8001704:	58000080 	.word	0x58000080
 8001708:	58024400 	.word	0x58024400
 800170c:	58000400 	.word	0x58000400
 8001710:	58020000 	.word	0x58020000
 8001714:	58020400 	.word	0x58020400
 8001718:	58020800 	.word	0x58020800
 800171c:	58020c00 	.word	0x58020c00
 8001720:	58021000 	.word	0x58021000
 8001724:	58021400 	.word	0x58021400
 8001728:	58021800 	.word	0x58021800
 800172c:	58021c00 	.word	0x58021c00
 8001730:	58022000 	.word	0x58022000
 8001734:	58022400 	.word	0x58022400
 8001738:	2300      	movs	r3, #0
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	f002 0203 	and.w	r2, r2, #3
 8001740:	0092      	lsls	r2, r2, #2
 8001742:	4093      	lsls	r3, r2
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800174a:	4938      	ldr	r1, [pc, #224]	; (800182c <HAL_GPIO_Init+0x35c>)
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	3301      	adds	r3, #1
 800180c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa22 f303 	lsr.w	r3, r2, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	f47f ae63 	bne.w	80014e4 <HAL_GPIO_Init+0x14>
  }
}
 800181e:	bf00      	nop
 8001820:	bf00      	nop
 8001822:	3724      	adds	r7, #36	; 0x24
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	58000400 	.word	0x58000400

08001830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e001      	b.n	8001852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800187c:	e003      	b.n	8001886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	041a      	lsls	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800189c:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <HAL_HSEM_FastTake+0x2c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3320      	adds	r3, #32
 80018a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a6:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_HSEM_FastTake+0x30>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d101      	bne.n	80018b0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e000      	b.n	80018b2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	58026400 	.word	0x58026400
 80018c4:	80000300 	.word	0x80000300

080018c8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80018d2:	4906      	ldr	r1, [pc, #24]	; (80018ec <HAL_HSEM_Release+0x24>)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	58026400 	.word	0x58026400

080018f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e07f      	b.n	8001a02 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d106      	bne.n	800191c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff f9da 	bl	8000cd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2224      	movs	r2, #36	; 0x24
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001940:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001950:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d107      	bne.n	800196a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	e006      	b.n	8001978 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001976:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d104      	bne.n	800198a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001988:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6859      	ldr	r1, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <HAL_I2C_Init+0x11c>)
 8001996:	430b      	orrs	r3, r1
 8001998:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691a      	ldr	r2, [r3, #16]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	ea42 0103 	orr.w	r1, r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	021a      	lsls	r2, r3, #8
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69d9      	ldr	r1, [r3, #28]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1a      	ldr	r2, [r3, #32]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2220      	movs	r2, #32
 80019ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	02008000 	.word	0x02008000

08001a10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af02      	add	r7, sp, #8
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	817b      	strh	r3, [r7, #10]
 8001a20:	4613      	mov	r3, r2
 8001a22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b20      	cmp	r3, #32
 8001a2e:	f040 80da 	bne.w	8001be6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_I2C_Master_Transmit+0x30>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e0d3      	b.n	8001be8 <HAL_I2C_Master_Transmit+0x1d8>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a48:	f7ff fbf6 	bl	8001238 <HAL_GetTick>
 8001a4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2319      	movs	r3, #25
 8001a54:	2201      	movs	r2, #1
 8001a56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 faee 	bl	800203c <I2C_WaitOnFlagUntilTimeout>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e0be      	b.n	8001be8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2221      	movs	r2, #33	; 0x21
 8001a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2210      	movs	r2, #16
 8001a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	893a      	ldrh	r2, [r7, #8]
 8001a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	2bff      	cmp	r3, #255	; 0xff
 8001a9a:	d90e      	bls.n	8001aba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	22ff      	movs	r2, #255	; 0xff
 8001aa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	8979      	ldrh	r1, [r7, #10]
 8001aaa:	4b51      	ldr	r3, [pc, #324]	; (8001bf0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 fc50 	bl	8002358 <I2C_TransferConfig>
 8001ab8:	e06c      	b.n	8001b94 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	8979      	ldrh	r1, [r7, #10]
 8001acc:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <HAL_I2C_Master_Transmit+0x1e0>)
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 fc3f 	bl	8002358 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001ada:	e05b      	b.n	8001b94 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	6a39      	ldr	r1, [r7, #32]
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f000 faeb 	bl	80020bc <I2C_WaitOnTXISFlagUntilTimeout>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e07b      	b.n	8001be8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d034      	beq.n	8001b94 <HAL_I2C_Master_Transmit+0x184>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d130      	bne.n	8001b94 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 fa7d 	bl	800203c <I2C_WaitOnFlagUntilTimeout>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e04d      	b.n	8001be8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	2bff      	cmp	r3, #255	; 0xff
 8001b54:	d90e      	bls.n	8001b74 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	22ff      	movs	r2, #255	; 0xff
 8001b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	8979      	ldrh	r1, [r7, #10]
 8001b64:	2300      	movs	r3, #0
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 fbf3 	bl	8002358 <I2C_TransferConfig>
 8001b72:	e00f      	b.n	8001b94 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	8979      	ldrh	r1, [r7, #10]
 8001b86:	2300      	movs	r3, #0
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 fbe2 	bl	8002358 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d19e      	bne.n	8001adc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	6a39      	ldr	r1, [r7, #32]
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 faca 	bl	800213c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e01a      	b.n	8001be8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_I2C_Master_Transmit+0x1e4>)
 8001bc6:	400b      	ands	r3, r1
 8001bc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001be6:	2302      	movs	r3, #2
  }
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	80002000 	.word	0x80002000
 8001bf4:	fe00e800 	.word	0xfe00e800

08001bf8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af02      	add	r7, sp, #8
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	461a      	mov	r2, r3
 8001c04:	460b      	mov	r3, r1
 8001c06:	817b      	strh	r3, [r7, #10]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b20      	cmp	r3, #32
 8001c16:	f040 80db 	bne.w	8001dd0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_I2C_Master_Receive+0x30>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e0d4      	b.n	8001dd2 <HAL_I2C_Master_Receive+0x1da>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c30:	f7ff fb02 	bl	8001238 <HAL_GetTick>
 8001c34:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2319      	movs	r3, #25
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f9fa 	bl	800203c <I2C_WaitOnFlagUntilTimeout>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0bf      	b.n	8001dd2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2222      	movs	r2, #34	; 0x22
 8001c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	893a      	ldrh	r2, [r7, #8]
 8001c72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	2bff      	cmp	r3, #255	; 0xff
 8001c82:	d90e      	bls.n	8001ca2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	22ff      	movs	r2, #255	; 0xff
 8001c88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	8979      	ldrh	r1, [r7, #10]
 8001c92:	4b52      	ldr	r3, [pc, #328]	; (8001ddc <HAL_I2C_Master_Receive+0x1e4>)
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 fb5c 	bl	8002358 <I2C_TransferConfig>
 8001ca0:	e06d      	b.n	8001d7e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	8979      	ldrh	r1, [r7, #10]
 8001cb4:	4b49      	ldr	r3, [pc, #292]	; (8001ddc <HAL_I2C_Master_Receive+0x1e4>)
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 fb4b 	bl	8002358 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001cc2:	e05c      	b.n	8001d7e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	6a39      	ldr	r1, [r7, #32]
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 fa73 	bl	80021b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e07c      	b.n	8001dd2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d034      	beq.n	8001d7e <HAL_I2C_Master_Receive+0x186>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d130      	bne.n	8001d7e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	2200      	movs	r2, #0
 8001d24:	2180      	movs	r1, #128	; 0x80
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f988 	bl	800203c <I2C_WaitOnFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e04d      	b.n	8001dd2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	2bff      	cmp	r3, #255	; 0xff
 8001d3e:	d90e      	bls.n	8001d5e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	22ff      	movs	r2, #255	; 0xff
 8001d44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	8979      	ldrh	r1, [r7, #10]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 fafe 	bl	8002358 <I2C_TransferConfig>
 8001d5c:	e00f      	b.n	8001d7e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	8979      	ldrh	r1, [r7, #10]
 8001d70:	2300      	movs	r3, #0
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 faed 	bl	8002358 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d19d      	bne.n	8001cc4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	6a39      	ldr	r1, [r7, #32]
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f9d5 	bl	800213c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e01a      	b.n	8001dd2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2220      	movs	r2, #32
 8001da2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6859      	ldr	r1, [r3, #4]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_I2C_Master_Receive+0x1e8>)
 8001db0:	400b      	ands	r3, r1
 8001db2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e000      	b.n	8001dd2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001dd0:	2302      	movs	r3, #2
  }
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	80002400 	.word	0x80002400
 8001de0:	fe00e800 	.word	0xfe00e800

08001de4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	; 0x28
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	460b      	mov	r3, r1
 8001df2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	f040 80ef 	bne.w	8001fe4 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e14:	d101      	bne.n	8001e1a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001e16:	2302      	movs	r3, #2
 8001e18:	e0e5      	b.n	8001fe6 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_I2C_IsDeviceReady+0x44>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e0de      	b.n	8001fe6 <HAL_I2C_IsDeviceReady+0x202>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2224      	movs	r2, #36	; 0x24
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d105      	bne.n	8001e52 <HAL_I2C_IsDeviceReady+0x6e>
 8001e46:	897b      	ldrh	r3, [r7, #10]
 8001e48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e4c:	4b68      	ldr	r3, [pc, #416]	; (8001ff0 <HAL_I2C_IsDeviceReady+0x20c>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	e004      	b.n	8001e5c <HAL_I2C_IsDeviceReady+0x78>
 8001e52:	897b      	ldrh	r3, [r7, #10]
 8001e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e58:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001e62:	f7ff f9e9 	bl	8001238 <HAL_GetTick>
 8001e66:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f003 0320 	and.w	r3, r3, #32
 8001e72:	2b20      	cmp	r3, #32
 8001e74:	bf0c      	ite	eq
 8001e76:	2301      	moveq	r3, #1
 8001e78:	2300      	movne	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b10      	cmp	r3, #16
 8001e8a:	bf0c      	ite	eq
 8001e8c:	2301      	moveq	r3, #1
 8001e8e:	2300      	movne	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001e94:	e034      	b.n	8001f00 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d01a      	beq.n	8001ed4 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e9e:	f7ff f9cb 	bl	8001238 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d302      	bcc.n	8001eb4 <HAL_I2C_IsDeviceReady+0xd0>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10f      	bne.n	8001ed4 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec0:	f043 0220 	orr.w	r2, r3, #32
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e088      	b.n	8001fe6 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 0320 	and.w	r3, r3, #32
 8001ede:	2b20      	cmp	r3, #32
 8001ee0:	bf0c      	ite	eq
 8001ee2:	2301      	moveq	r3, #1
 8001ee4:	2300      	movne	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	2b10      	cmp	r3, #16
 8001ef6:	bf0c      	ite	eq
 8001ef8:	2301      	moveq	r3, #1
 8001efa:	2300      	movne	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001f00:	7ffb      	ldrb	r3, [r7, #31]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d102      	bne.n	8001f0c <HAL_I2C_IsDeviceReady+0x128>
 8001f06:	7fbb      	ldrb	r3, [r7, #30]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0c4      	beq.n	8001e96 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	2b10      	cmp	r3, #16
 8001f18:	d01a      	beq.n	8001f50 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2200      	movs	r2, #0
 8001f22:	2120      	movs	r1, #32
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 f889 	bl	800203c <I2C_WaitOnFlagUntilTimeout>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e058      	b.n	8001fe6 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e04a      	b.n	8001fe6 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2200      	movs	r2, #0
 8001f58:	2120      	movs	r1, #32
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 f86e 	bl	800203c <I2C_WaitOnFlagUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e03d      	b.n	8001fe6 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2210      	movs	r2, #16
 8001f70:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2220      	movs	r2, #32
 8001f78:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d118      	bne.n	8001fb4 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f90:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2120      	movs	r1, #32
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f84d 	bl	800203c <I2C_WaitOnFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e01c      	b.n	8001fe6 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	f63f af3d 	bhi.w	8001e3e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd0:	f043 0220 	orr.w	r2, r3, #32
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8001fe4:	2302      	movs	r3, #2
  }
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3720      	adds	r7, #32
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	02002000 	.word	0x02002000

08001ff4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b02      	cmp	r3, #2
 8002008:	d103      	bne.n	8002012 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2200      	movs	r2, #0
 8002010:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d007      	beq.n	8002030 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699a      	ldr	r2, [r3, #24]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	619a      	str	r2, [r3, #24]
  }
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800204c:	e022      	b.n	8002094 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d01e      	beq.n	8002094 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002056:	f7ff f8ef 	bl	8001238 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d302      	bcc.n	800206c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d113      	bne.n	8002094 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	f043 0220 	orr.w	r2, r3, #32
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e00f      	b.n	80020b4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	4013      	ands	r3, r2
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d0cd      	beq.n	800204e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020c8:	e02c      	b.n	8002124 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f8dc 	bl	800228c <I2C_IsAcknowledgeFailed>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e02a      	b.n	8002134 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e4:	d01e      	beq.n	8002124 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e6:	f7ff f8a7 	bl	8001238 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d302      	bcc.n	80020fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d113      	bne.n	8002124 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	f043 0220 	orr.w	r2, r3, #32
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e007      	b.n	8002134 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b02      	cmp	r3, #2
 8002130:	d1cb      	bne.n	80020ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002148:	e028      	b.n	800219c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f89c 	bl	800228c <I2C_IsAcknowledgeFailed>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e026      	b.n	80021ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800215e:	f7ff f86b 	bl	8001238 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	429a      	cmp	r2, r3
 800216c:	d302      	bcc.n	8002174 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d113      	bne.n	800219c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	f043 0220 	orr.w	r2, r3, #32
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e007      	b.n	80021ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	2b20      	cmp	r3, #32
 80021a8:	d1cf      	bne.n	800214a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021c0:	e055      	b.n	800226e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f860 	bl	800228c <I2C_IsAcknowledgeFailed>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e053      	b.n	800227e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0320 	and.w	r3, r3, #32
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	d129      	bne.n	8002238 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d105      	bne.n	80021fe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e03f      	b.n	800227e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2220      	movs	r2, #32
 8002204:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002212:	400b      	ands	r3, r1
 8002214:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e022      	b.n	800227e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002238:	f7fe fffe 	bl	8001238 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	429a      	cmp	r2, r3
 8002246:	d302      	bcc.n	800224e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10f      	bne.n	800226e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	f043 0220 	orr.w	r2, r3, #32
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2220      	movs	r2, #32
 800225e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e007      	b.n	800227e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b04      	cmp	r3, #4
 800227a:	d1a2      	bne.n	80021c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	fe00e800 	.word	0xfe00e800

0800228c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b10      	cmp	r3, #16
 80022a4:	d151      	bne.n	800234a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022a6:	e022      	b.n	80022ee <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ae:	d01e      	beq.n	80022ee <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b0:	f7fe ffc2 	bl	8001238 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d302      	bcc.n	80022c6 <I2C_IsAcknowledgeFailed+0x3a>
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d113      	bne.n	80022ee <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f043 0220 	orr.w	r2, r3, #32
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e02e      	b.n	800234c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	d1d5      	bne.n	80022a8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2210      	movs	r2, #16
 8002302:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2220      	movs	r2, #32
 800230a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f7ff fe71 	bl	8001ff4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <I2C_IsAcknowledgeFailed+0xc8>)
 800231e:	400b      	ands	r3, r1
 8002320:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f043 0204 	orr.w	r2, r3, #4
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	fe00e800 	.word	0xfe00e800

08002358 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	460b      	mov	r3, r1
 8002364:	817b      	strh	r3, [r7, #10]
 8002366:	4613      	mov	r3, r2
 8002368:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	0d5b      	lsrs	r3, r3, #21
 8002374:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <I2C_TransferConfig+0x58>)
 800237a:	430b      	orrs	r3, r1
 800237c:	43db      	mvns	r3, r3
 800237e:	ea02 0103 	and.w	r1, r2, r3
 8002382:	897b      	ldrh	r3, [r7, #10]
 8002384:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002388:	7a7b      	ldrb	r3, [r7, #9]
 800238a:	041b      	lsls	r3, r3, #16
 800238c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	431a      	orrs	r2, r3
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	431a      	orrs	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	03ff63ff 	.word	0x03ff63ff

080023b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b20      	cmp	r3, #32
 80023c8:	d138      	bne.n	800243c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e032      	b.n	800243e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2224      	movs	r2, #36	; 0x24
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002406:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6819      	ldr	r1, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	e000      	b.n	800243e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800243c:	2302      	movs	r3, #2
  }
}
 800243e:	4618      	mov	r0, r3
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800244a:	b480      	push	{r7}
 800244c:	b085      	sub	sp, #20
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b20      	cmp	r3, #32
 800245e:	d139      	bne.n	80024d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800246a:	2302      	movs	r3, #2
 800246c:	e033      	b.n	80024d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2224      	movs	r2, #36	; 0x24
 800247a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0201 	bic.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800249c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	021b      	lsls	r3, r3, #8
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	e000      	b.n	80024d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024d4:	2302      	movs	r3, #2
  }
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80024ec:	4b29      	ldr	r3, [pc, #164]	; (8002594 <HAL_PWREx_ConfigSupply+0xb0>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	2b06      	cmp	r3, #6
 80024f6:	d00a      	beq.n	800250e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024f8:	4b26      	ldr	r3, [pc, #152]	; (8002594 <HAL_PWREx_ConfigSupply+0xb0>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	429a      	cmp	r2, r3
 8002504:	d001      	beq.n	800250a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e040      	b.n	800258c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	e03e      	b.n	800258c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800250e:	4b21      	ldr	r3, [pc, #132]	; (8002594 <HAL_PWREx_ConfigSupply+0xb0>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002516:	491f      	ldr	r1, [pc, #124]	; (8002594 <HAL_PWREx_ConfigSupply+0xb0>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4313      	orrs	r3, r2
 800251c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800251e:	f7fe fe8b 	bl	8001238 <HAL_GetTick>
 8002522:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002524:	e009      	b.n	800253a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002526:	f7fe fe87 	bl	8001238 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002534:	d901      	bls.n	800253a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e028      	b.n	800258c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800253a:	4b16      	ldr	r3, [pc, #88]	; (8002594 <HAL_PWREx_ConfigSupply+0xb0>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002546:	d1ee      	bne.n	8002526 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b1e      	cmp	r3, #30
 800254c:	d008      	beq.n	8002560 <HAL_PWREx_ConfigSupply+0x7c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b2e      	cmp	r3, #46	; 0x2e
 8002552:	d005      	beq.n	8002560 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b1d      	cmp	r3, #29
 8002558:	d002      	beq.n	8002560 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b2d      	cmp	r3, #45	; 0x2d
 800255e:	d114      	bne.n	800258a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002560:	f7fe fe6a 	bl	8001238 <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002566:	e009      	b.n	800257c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002568:	f7fe fe66 	bl	8001238 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002576:	d901      	bls.n	800257c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e007      	b.n	800258c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_PWREx_ConfigSupply+0xb0>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002588:	d1ee      	bne.n	8002568 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	58024800 	.word	0x58024800

08002598 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08c      	sub	sp, #48	; 0x30
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e3ff      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 8087 	beq.w	80026c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025b8:	4b99      	ldr	r3, [pc, #612]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025c2:	4b97      	ldr	r3, [pc, #604]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d007      	beq.n	80025de <HAL_RCC_OscConfig+0x46>
 80025ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d0:	2b18      	cmp	r3, #24
 80025d2:	d110      	bne.n	80025f6 <HAL_RCC_OscConfig+0x5e>
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d10b      	bne.n	80025f6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025de:	4b90      	ldr	r3, [pc, #576]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d06c      	beq.n	80026c4 <HAL_RCC_OscConfig+0x12c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d168      	bne.n	80026c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e3d9      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fe:	d106      	bne.n	800260e <HAL_RCC_OscConfig+0x76>
 8002600:	4b87      	ldr	r3, [pc, #540]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a86      	ldr	r2, [pc, #536]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 8002606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	e02e      	b.n	800266c <HAL_RCC_OscConfig+0xd4>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10c      	bne.n	8002630 <HAL_RCC_OscConfig+0x98>
 8002616:	4b82      	ldr	r3, [pc, #520]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a81      	ldr	r2, [pc, #516]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 800261c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	4b7f      	ldr	r3, [pc, #508]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a7e      	ldr	r2, [pc, #504]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 8002628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e01d      	b.n	800266c <HAL_RCC_OscConfig+0xd4>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002638:	d10c      	bne.n	8002654 <HAL_RCC_OscConfig+0xbc>
 800263a:	4b79      	ldr	r3, [pc, #484]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a78      	ldr	r2, [pc, #480]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 8002640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	4b76      	ldr	r3, [pc, #472]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a75      	ldr	r2, [pc, #468]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 800264c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	e00b      	b.n	800266c <HAL_RCC_OscConfig+0xd4>
 8002654:	4b72      	ldr	r3, [pc, #456]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a71      	ldr	r2, [pc, #452]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 800265a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	4b6f      	ldr	r3, [pc, #444]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a6e      	ldr	r2, [pc, #440]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 8002666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800266a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d013      	beq.n	800269c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7fe fde0 	bl	8001238 <HAL_GetTick>
 8002678:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800267c:	f7fe fddc 	bl	8001238 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b64      	cmp	r3, #100	; 0x64
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e38d      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800268e:	4b64      	ldr	r3, [pc, #400]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0xe4>
 800269a:	e014      	b.n	80026c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe fdcc 	bl	8001238 <HAL_GetTick>
 80026a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a4:	f7fe fdc8 	bl	8001238 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e379      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026b6:	4b5a      	ldr	r3, [pc, #360]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x10c>
 80026c2:	e000      	b.n	80026c6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 80ae 	beq.w	8002830 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d4:	4b52      	ldr	r3, [pc, #328]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026de:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d007      	beq.n	80026fa <HAL_RCC_OscConfig+0x162>
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	2b18      	cmp	r3, #24
 80026ee:	d13a      	bne.n	8002766 <HAL_RCC_OscConfig+0x1ce>
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d135      	bne.n	8002766 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026fa:	4b49      	ldr	r3, [pc, #292]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_RCC_OscConfig+0x17a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e34b      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002712:	f7fe fdc1 	bl	8001298 <HAL_GetREVID>
 8002716:	4603      	mov	r3, r0
 8002718:	f241 0203 	movw	r2, #4099	; 0x1003
 800271c:	4293      	cmp	r3, r2
 800271e:	d817      	bhi.n	8002750 <HAL_RCC_OscConfig+0x1b8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	2b40      	cmp	r3, #64	; 0x40
 8002726:	d108      	bne.n	800273a <HAL_RCC_OscConfig+0x1a2>
 8002728:	4b3d      	ldr	r3, [pc, #244]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002730:	4a3b      	ldr	r2, [pc, #236]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 8002732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002736:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002738:	e07a      	b.n	8002830 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273a:	4b39      	ldr	r3, [pc, #228]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	031b      	lsls	r3, r3, #12
 8002748:	4935      	ldr	r1, [pc, #212]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800274e:	e06f      	b.n	8002830 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002750:	4b33      	ldr	r3, [pc, #204]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	061b      	lsls	r3, r3, #24
 800275e:	4930      	ldr	r1, [pc, #192]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002764:	e064      	b.n	8002830 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d045      	beq.n	80027fa <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800276e:	4b2c      	ldr	r3, [pc, #176]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 0219 	bic.w	r2, r3, #25
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	4929      	ldr	r1, [pc, #164]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 800277c:	4313      	orrs	r3, r2
 800277e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7fe fd5a 	bl	8001238 <HAL_GetTick>
 8002784:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002788:	f7fe fd56 	bl	8001238 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e307      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800279a:	4b21      	ldr	r3, [pc, #132]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a6:	f7fe fd77 	bl	8001298 <HAL_GetREVID>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d817      	bhi.n	80027e4 <HAL_RCC_OscConfig+0x24c>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b40      	cmp	r3, #64	; 0x40
 80027ba:	d108      	bne.n	80027ce <HAL_RCC_OscConfig+0x236>
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027c4:	4a16      	ldr	r2, [pc, #88]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 80027c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ca:	6053      	str	r3, [r2, #4]
 80027cc:	e030      	b.n	8002830 <HAL_RCC_OscConfig+0x298>
 80027ce:	4b14      	ldr	r3, [pc, #80]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	031b      	lsls	r3, r3, #12
 80027dc:	4910      	ldr	r1, [pc, #64]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
 80027e2:	e025      	b.n	8002830 <HAL_RCC_OscConfig+0x298>
 80027e4:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	061b      	lsls	r3, r3, #24
 80027f2:	490b      	ldr	r1, [pc, #44]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
 80027f8:	e01a      	b.n	8002830 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a08      	ldr	r2, [pc, #32]	; (8002820 <HAL_RCC_OscConfig+0x288>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002806:	f7fe fd17 	bl	8001238 <HAL_GetTick>
 800280a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800280e:	f7fe fd13 	bl	8001238 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d903      	bls.n	8002824 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e2c4      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
 8002820:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002824:	4ba4      	ldr	r3, [pc, #656]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ee      	bne.n	800280e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80a9 	beq.w	8002990 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800283e:	4b9e      	ldr	r3, [pc, #632]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002846:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002848:	4b9b      	ldr	r3, [pc, #620]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	2b08      	cmp	r3, #8
 8002852:	d007      	beq.n	8002864 <HAL_RCC_OscConfig+0x2cc>
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	2b18      	cmp	r3, #24
 8002858:	d13a      	bne.n	80028d0 <HAL_RCC_OscConfig+0x338>
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d135      	bne.n	80028d0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002864:	4b94      	ldr	r3, [pc, #592]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_OscConfig+0x2e4>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	2b80      	cmp	r3, #128	; 0x80
 8002876:	d001      	beq.n	800287c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e296      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800287c:	f7fe fd0c 	bl	8001298 <HAL_GetREVID>
 8002880:	4603      	mov	r3, r0
 8002882:	f241 0203 	movw	r2, #4099	; 0x1003
 8002886:	4293      	cmp	r3, r2
 8002888:	d817      	bhi.n	80028ba <HAL_RCC_OscConfig+0x322>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	2b20      	cmp	r3, #32
 8002890:	d108      	bne.n	80028a4 <HAL_RCC_OscConfig+0x30c>
 8002892:	4b89      	ldr	r3, [pc, #548]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800289a:	4a87      	ldr	r2, [pc, #540]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 800289c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028a0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028a2:	e075      	b.n	8002990 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028a4:	4b84      	ldr	r3, [pc, #528]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	069b      	lsls	r3, r3, #26
 80028b2:	4981      	ldr	r1, [pc, #516]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028b8:	e06a      	b.n	8002990 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ba:	4b7f      	ldr	r3, [pc, #508]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	061b      	lsls	r3, r3, #24
 80028c8:	497b      	ldr	r1, [pc, #492]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028ce:	e05f      	b.n	8002990 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d042      	beq.n	800295e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028d8:	4b77      	ldr	r3, [pc, #476]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a76      	ldr	r2, [pc, #472]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 80028de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fe fca8 	bl	8001238 <HAL_GetTick>
 80028e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028ec:	f7fe fca4 	bl	8001238 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e255      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028fe:	4b6e      	ldr	r3, [pc, #440]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800290a:	f7fe fcc5 	bl	8001298 <HAL_GetREVID>
 800290e:	4603      	mov	r3, r0
 8002910:	f241 0203 	movw	r2, #4099	; 0x1003
 8002914:	4293      	cmp	r3, r2
 8002916:	d817      	bhi.n	8002948 <HAL_RCC_OscConfig+0x3b0>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	2b20      	cmp	r3, #32
 800291e:	d108      	bne.n	8002932 <HAL_RCC_OscConfig+0x39a>
 8002920:	4b65      	ldr	r3, [pc, #404]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002928:	4a63      	ldr	r2, [pc, #396]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 800292a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800292e:	6053      	str	r3, [r2, #4]
 8002930:	e02e      	b.n	8002990 <HAL_RCC_OscConfig+0x3f8>
 8002932:	4b61      	ldr	r3, [pc, #388]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	069b      	lsls	r3, r3, #26
 8002940:	495d      	ldr	r1, [pc, #372]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002942:	4313      	orrs	r3, r2
 8002944:	604b      	str	r3, [r1, #4]
 8002946:	e023      	b.n	8002990 <HAL_RCC_OscConfig+0x3f8>
 8002948:	4b5b      	ldr	r3, [pc, #364]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	061b      	lsls	r3, r3, #24
 8002956:	4958      	ldr	r1, [pc, #352]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002958:	4313      	orrs	r3, r2
 800295a:	60cb      	str	r3, [r1, #12]
 800295c:	e018      	b.n	8002990 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800295e:	4b56      	ldr	r3, [pc, #344]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a55      	ldr	r2, [pc, #340]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296a:	f7fe fc65 	bl	8001238 <HAL_GetTick>
 800296e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002972:	f7fe fc61 	bl	8001238 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e212      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002984:	4b4c      	ldr	r3, [pc, #304]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f0      	bne.n	8002972 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d036      	beq.n	8002a0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d019      	beq.n	80029d8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a4:	4b44      	ldr	r3, [pc, #272]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 80029a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a8:	4a43      	ldr	r2, [pc, #268]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fe fc42 	bl	8001238 <HAL_GetTick>
 80029b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b8:	f7fe fc3e 	bl	8001238 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e1ef      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029ca:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 80029cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x420>
 80029d6:	e018      	b.n	8002a0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d8:	4b37      	ldr	r3, [pc, #220]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 80029da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029dc:	4a36      	ldr	r2, [pc, #216]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7fe fc28 	bl	8001238 <HAL_GetTick>
 80029e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ec:	f7fe fc24 	bl	8001238 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e1d5      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029fe:	4b2e      	ldr	r3, [pc, #184]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0320 	and.w	r3, r3, #32
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d036      	beq.n	8002a84 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d019      	beq.n	8002a52 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a1e:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a25      	ldr	r2, [pc, #148]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002a24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a2a:	f7fe fc05 	bl	8001238 <HAL_GetTick>
 8002a2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a32:	f7fe fc01 	bl	8001238 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e1b2      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a44:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x49a>
 8002a50:	e018      	b.n	8002a84 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a52:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a18      	ldr	r2, [pc, #96]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002a58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a5c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a5e:	f7fe fbeb 	bl	8001238 <HAL_GetTick>
 8002a62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a66:	f7fe fbe7 	bl	8001238 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e198      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a78:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <HAL_RCC_OscConfig+0x520>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f0      	bne.n	8002a66 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 8085 	beq.w	8002b9c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a92:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <HAL_RCC_OscConfig+0x524>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_RCC_OscConfig+0x524>)
 8002a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a9e:	f7fe fbcb 	bl	8001238 <HAL_GetTick>
 8002aa2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aa4:	e00c      	b.n	8002ac0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002aa6:	f7fe fbc7 	bl	8001238 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b64      	cmp	r3, #100	; 0x64
 8002ab2:	d905      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e178      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
 8002ab8:	58024400 	.word	0x58024400
 8002abc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ac0:	4b96      	ldr	r3, [pc, #600]	; (8002d1c <HAL_RCC_OscConfig+0x784>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0ec      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x54a>
 8002ad4:	4b92      	ldr	r3, [pc, #584]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad8:	4a91      	ldr	r2, [pc, #580]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae0:	e02d      	b.n	8002b3e <HAL_RCC_OscConfig+0x5a6>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x56c>
 8002aea:	4b8d      	ldr	r3, [pc, #564]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	4a8c      	ldr	r2, [pc, #560]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002af0:	f023 0301 	bic.w	r3, r3, #1
 8002af4:	6713      	str	r3, [r2, #112]	; 0x70
 8002af6:	4b8a      	ldr	r3, [pc, #552]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	4a89      	ldr	r2, [pc, #548]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002afc:	f023 0304 	bic.w	r3, r3, #4
 8002b00:	6713      	str	r3, [r2, #112]	; 0x70
 8002b02:	e01c      	b.n	8002b3e <HAL_RCC_OscConfig+0x5a6>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b05      	cmp	r3, #5
 8002b0a:	d10c      	bne.n	8002b26 <HAL_RCC_OscConfig+0x58e>
 8002b0c:	4b84      	ldr	r3, [pc, #528]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	4a83      	ldr	r2, [pc, #524]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002b12:	f043 0304 	orr.w	r3, r3, #4
 8002b16:	6713      	str	r3, [r2, #112]	; 0x70
 8002b18:	4b81      	ldr	r3, [pc, #516]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1c:	4a80      	ldr	r2, [pc, #512]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6713      	str	r3, [r2, #112]	; 0x70
 8002b24:	e00b      	b.n	8002b3e <HAL_RCC_OscConfig+0x5a6>
 8002b26:	4b7e      	ldr	r3, [pc, #504]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	4a7d      	ldr	r2, [pc, #500]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002b2c:	f023 0301 	bic.w	r3, r3, #1
 8002b30:	6713      	str	r3, [r2, #112]	; 0x70
 8002b32:	4b7b      	ldr	r3, [pc, #492]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b36:	4a7a      	ldr	r2, [pc, #488]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002b38:	f023 0304 	bic.w	r3, r3, #4
 8002b3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d015      	beq.n	8002b72 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b46:	f7fe fb77 	bl	8001238 <HAL_GetTick>
 8002b4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b4e:	f7fe fb73 	bl	8001238 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e122      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b64:	4b6e      	ldr	r3, [pc, #440]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0ee      	beq.n	8002b4e <HAL_RCC_OscConfig+0x5b6>
 8002b70:	e014      	b.n	8002b9c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b72:	f7fe fb61 	bl	8001238 <HAL_GetTick>
 8002b76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b78:	e00a      	b.n	8002b90 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b7a:	f7fe fb5d 	bl	8001238 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e10c      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b90:	4b63      	ldr	r3, [pc, #396]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1ee      	bne.n	8002b7a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 8101 	beq.w	8002da8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ba6:	4b5e      	ldr	r3, [pc, #376]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bae:	2b18      	cmp	r3, #24
 8002bb0:	f000 80bc 	beq.w	8002d2c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	f040 8095 	bne.w	8002ce8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbe:	4b58      	ldr	r3, [pc, #352]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a57      	ldr	r2, [pc, #348]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002bc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bca:	f7fe fb35 	bl	8001238 <HAL_GetTick>
 8002bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd2:	f7fe fb31 	bl	8001238 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e0e2      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002be4:	4b4e      	ldr	r3, [pc, #312]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f0      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf0:	4b4b      	ldr	r3, [pc, #300]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002bf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bf4:	4b4b      	ldr	r3, [pc, #300]	; (8002d24 <HAL_RCC_OscConfig+0x78c>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c00:	0112      	lsls	r2, r2, #4
 8002c02:	430a      	orrs	r2, r1
 8002c04:	4946      	ldr	r1, [pc, #280]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	628b      	str	r3, [r1, #40]	; 0x28
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	025b      	lsls	r3, r3, #9
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	3b01      	subs	r3, #1
 8002c26:	041b      	lsls	r3, r3, #16
 8002c28:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c32:	3b01      	subs	r3, #1
 8002c34:	061b      	lsls	r3, r3, #24
 8002c36:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c3a:	4939      	ldr	r1, [pc, #228]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c40:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	4a36      	ldr	r2, [pc, #216]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002c46:	f023 0301 	bic.w	r3, r3, #1
 8002c4a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c4c:	4b34      	ldr	r3, [pc, #208]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c50:	4b35      	ldr	r3, [pc, #212]	; (8002d28 <HAL_RCC_OscConfig+0x790>)
 8002c52:	4013      	ands	r3, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c58:	00d2      	lsls	r2, r2, #3
 8002c5a:	4931      	ldr	r1, [pc, #196]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c60:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	f023 020c 	bic.w	r2, r3, #12
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	492c      	ldr	r1, [pc, #176]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c72:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	f023 0202 	bic.w	r2, r3, #2
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	4928      	ldr	r1, [pc, #160]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c84:	4b26      	ldr	r3, [pc, #152]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	4a25      	ldr	r2, [pc, #148]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c90:	4b23      	ldr	r3, [pc, #140]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c9c:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	4a1f      	ldr	r2, [pc, #124]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002ca2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	4a1c      	ldr	r2, [pc, #112]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb4:	4b1a      	ldr	r3, [pc, #104]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a19      	ldr	r2, [pc, #100]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fe faba 	bl	8001238 <HAL_GetTick>
 8002cc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fe fab6 	bl	8001238 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e067      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cda:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x730>
 8002ce6:	e05f      	b.n	8002da8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce8:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf4:	f7fe faa0 	bl	8001238 <HAL_GetTick>
 8002cf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfc:	f7fe fa9c 	bl	8001238 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e04d      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d0e:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <HAL_RCC_OscConfig+0x788>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x764>
 8002d1a:	e045      	b.n	8002da8 <HAL_RCC_OscConfig+0x810>
 8002d1c:	58024800 	.word	0x58024800
 8002d20:	58024400 	.word	0x58024400
 8002d24:	fffffc0c 	.word	0xfffffc0c
 8002d28:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d2c:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <HAL_RCC_OscConfig+0x81c>)
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d32:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <HAL_RCC_OscConfig+0x81c>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d031      	beq.n	8002da4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f003 0203 	and.w	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d12a      	bne.n	8002da4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d122      	bne.n	8002da4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d11a      	bne.n	8002da4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	0a5b      	lsrs	r3, r3, #9
 8002d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d111      	bne.n	8002da4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	0c1b      	lsrs	r3, r3, #16
 8002d84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d108      	bne.n	8002da4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	0e1b      	lsrs	r3, r3, #24
 8002d96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3730      	adds	r7, #48	; 0x30
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	58024400 	.word	0x58024400

08002db8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e19c      	b.n	8003106 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b8a      	ldr	r3, [pc, #552]	; (8002ff8 <HAL_RCC_ClockConfig+0x240>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d910      	bls.n	8002dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b87      	ldr	r3, [pc, #540]	; (8002ff8 <HAL_RCC_ClockConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 020f 	bic.w	r2, r3, #15
 8002de2:	4985      	ldr	r1, [pc, #532]	; (8002ff8 <HAL_RCC_ClockConfig+0x240>)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dea:	4b83      	ldr	r3, [pc, #524]	; (8002ff8 <HAL_RCC_ClockConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d001      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e184      	b.n	8003106 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d010      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	4b7b      	ldr	r3, [pc, #492]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d908      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e18:	4b78      	ldr	r3, [pc, #480]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	4975      	ldr	r1, [pc, #468]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d010      	beq.n	8002e58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	4b70      	ldr	r3, [pc, #448]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d908      	bls.n	8002e58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e46:	4b6d      	ldr	r3, [pc, #436]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	496a      	ldr	r1, [pc, #424]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d010      	beq.n	8002e86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699a      	ldr	r2, [r3, #24]
 8002e68:	4b64      	ldr	r3, [pc, #400]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d908      	bls.n	8002e86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e74:	4b61      	ldr	r3, [pc, #388]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	495e      	ldr	r1, [pc, #376]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d010      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69da      	ldr	r2, [r3, #28]
 8002e96:	4b59      	ldr	r3, [pc, #356]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d908      	bls.n	8002eb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002ea2:	4b56      	ldr	r3, [pc, #344]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	4953      	ldr	r1, [pc, #332]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d010      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	4b4d      	ldr	r3, [pc, #308]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d908      	bls.n	8002ee2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed0:	4b4a      	ldr	r3, [pc, #296]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f023 020f 	bic.w	r2, r3, #15
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4947      	ldr	r1, [pc, #284]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d055      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002eee:	4b43      	ldr	r3, [pc, #268]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	4940      	ldr	r1, [pc, #256]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d107      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f08:	4b3c      	ldr	r3, [pc, #240]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d121      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0f6      	b.n	8003106 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d107      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f20:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d115      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0ea      	b.n	8003106 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d107      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f38:	4b30      	ldr	r3, [pc, #192]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d109      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0de      	b.n	8003106 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f48:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0d6      	b.n	8003106 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f58:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	f023 0207 	bic.w	r2, r3, #7
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4925      	ldr	r1, [pc, #148]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6a:	f7fe f965 	bl	8001238 <HAL_GetTick>
 8002f6e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f72:	f7fe f961 	bl	8001238 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e0be      	b.n	8003106 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f88:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d1eb      	bne.n	8002f72 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d010      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d208      	bcs.n	8002fc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb6:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f023 020f 	bic.w	r2, r3, #15
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	490e      	ldr	r1, [pc, #56]	; (8002ffc <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_RCC_ClockConfig+0x240>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d214      	bcs.n	8003000 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <HAL_RCC_ClockConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 020f 	bic.w	r2, r3, #15
 8002fde:	4906      	ldr	r1, [pc, #24]	; (8002ff8 <HAL_RCC_ClockConfig+0x240>)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <HAL_RCC_ClockConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e086      	b.n	8003106 <HAL_RCC_ClockConfig+0x34e>
 8002ff8:	52002000 	.word	0x52002000
 8002ffc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d010      	beq.n	800302e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	4b3f      	ldr	r3, [pc, #252]	; (8003110 <HAL_RCC_ClockConfig+0x358>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003018:	429a      	cmp	r2, r3
 800301a:	d208      	bcs.n	800302e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800301c:	4b3c      	ldr	r3, [pc, #240]	; (8003110 <HAL_RCC_ClockConfig+0x358>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	4939      	ldr	r1, [pc, #228]	; (8003110 <HAL_RCC_ClockConfig+0x358>)
 800302a:	4313      	orrs	r3, r2
 800302c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d010      	beq.n	800305c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	4b34      	ldr	r3, [pc, #208]	; (8003110 <HAL_RCC_ClockConfig+0x358>)
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003046:	429a      	cmp	r2, r3
 8003048:	d208      	bcs.n	800305c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800304a:	4b31      	ldr	r3, [pc, #196]	; (8003110 <HAL_RCC_ClockConfig+0x358>)
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	492e      	ldr	r1, [pc, #184]	; (8003110 <HAL_RCC_ClockConfig+0x358>)
 8003058:	4313      	orrs	r3, r2
 800305a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b00      	cmp	r3, #0
 8003066:	d010      	beq.n	800308a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699a      	ldr	r2, [r3, #24]
 800306c:	4b28      	ldr	r3, [pc, #160]	; (8003110 <HAL_RCC_ClockConfig+0x358>)
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003074:	429a      	cmp	r2, r3
 8003076:	d208      	bcs.n	800308a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003078:	4b25      	ldr	r3, [pc, #148]	; (8003110 <HAL_RCC_ClockConfig+0x358>)
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	4922      	ldr	r1, [pc, #136]	; (8003110 <HAL_RCC_ClockConfig+0x358>)
 8003086:	4313      	orrs	r3, r2
 8003088:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	d010      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69da      	ldr	r2, [r3, #28]
 800309a:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <HAL_RCC_ClockConfig+0x358>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d208      	bcs.n	80030b8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80030a6:	4b1a      	ldr	r3, [pc, #104]	; (8003110 <HAL_RCC_ClockConfig+0x358>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	4917      	ldr	r1, [pc, #92]	; (8003110 <HAL_RCC_ClockConfig+0x358>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030b8:	f000 f834 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80030bc:	4602      	mov	r2, r0
 80030be:	4b14      	ldr	r3, [pc, #80]	; (8003110 <HAL_RCC_ClockConfig+0x358>)
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	4912      	ldr	r1, [pc, #72]	; (8003114 <HAL_RCC_ClockConfig+0x35c>)
 80030ca:	5ccb      	ldrb	r3, [r1, r3]
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
 80030d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030d6:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <HAL_RCC_ClockConfig+0x358>)
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	4a0d      	ldr	r2, [pc, #52]	; (8003114 <HAL_RCC_ClockConfig+0x35c>)
 80030e0:	5cd3      	ldrb	r3, [r2, r3]
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	fa22 f303 	lsr.w	r3, r2, r3
 80030ec:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <HAL_RCC_ClockConfig+0x360>)
 80030ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030f0:	4a0a      	ldr	r2, [pc, #40]	; (800311c <HAL_RCC_ClockConfig+0x364>)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <HAL_RCC_ClockConfig+0x368>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe f852 	bl	80011a4 <HAL_InitTick>
 8003100:	4603      	mov	r3, r0
 8003102:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003104:	7bfb      	ldrb	r3, [r7, #15]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	58024400 	.word	0x58024400
 8003114:	0800d2d8 	.word	0x0800d2d8
 8003118:	24000004 	.word	0x24000004
 800311c:	24000000 	.word	0x24000000
 8003120:	2400109c 	.word	0x2400109c

08003124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	b089      	sub	sp, #36	; 0x24
 8003128:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800312a:	4bb3      	ldr	r3, [pc, #716]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003132:	2b18      	cmp	r3, #24
 8003134:	f200 8155 	bhi.w	80033e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <HAL_RCC_GetSysClockFreq+0x1c>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	080031a5 	.word	0x080031a5
 8003144:	080033e3 	.word	0x080033e3
 8003148:	080033e3 	.word	0x080033e3
 800314c:	080033e3 	.word	0x080033e3
 8003150:	080033e3 	.word	0x080033e3
 8003154:	080033e3 	.word	0x080033e3
 8003158:	080033e3 	.word	0x080033e3
 800315c:	080033e3 	.word	0x080033e3
 8003160:	080031cb 	.word	0x080031cb
 8003164:	080033e3 	.word	0x080033e3
 8003168:	080033e3 	.word	0x080033e3
 800316c:	080033e3 	.word	0x080033e3
 8003170:	080033e3 	.word	0x080033e3
 8003174:	080033e3 	.word	0x080033e3
 8003178:	080033e3 	.word	0x080033e3
 800317c:	080033e3 	.word	0x080033e3
 8003180:	080031d1 	.word	0x080031d1
 8003184:	080033e3 	.word	0x080033e3
 8003188:	080033e3 	.word	0x080033e3
 800318c:	080033e3 	.word	0x080033e3
 8003190:	080033e3 	.word	0x080033e3
 8003194:	080033e3 	.word	0x080033e3
 8003198:	080033e3 	.word	0x080033e3
 800319c:	080033e3 	.word	0x080033e3
 80031a0:	080031d7 	.word	0x080031d7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031a4:	4b94      	ldr	r3, [pc, #592]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d009      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80031b0:	4b91      	ldr	r3, [pc, #580]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	08db      	lsrs	r3, r3, #3
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	4a90      	ldr	r2, [pc, #576]	; (80033fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
 80031c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80031c2:	e111      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031c4:	4b8d      	ldr	r3, [pc, #564]	; (80033fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031c6:	61bb      	str	r3, [r7, #24]
    break;
 80031c8:	e10e      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80031ca:	4b8d      	ldr	r3, [pc, #564]	; (8003400 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031cc:	61bb      	str	r3, [r7, #24]
    break;
 80031ce:	e10b      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80031d0:	4b8c      	ldr	r3, [pc, #560]	; (8003404 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031d2:	61bb      	str	r3, [r7, #24]
    break;
 80031d4:	e108      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031d6:	4b88      	ldr	r3, [pc, #544]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80031e0:	4b85      	ldr	r3, [pc, #532]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031ec:	4b82      	ldr	r3, [pc, #520]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80031f6:	4b80      	ldr	r3, [pc, #512]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fa:	08db      	lsrs	r3, r3, #3
 80031fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	ee07 3a90 	vmov	s15, r3
 800320a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800320e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80e1 	beq.w	80033dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b02      	cmp	r3, #2
 800321e:	f000 8083 	beq.w	8003328 <HAL_RCC_GetSysClockFreq+0x204>
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b02      	cmp	r3, #2
 8003226:	f200 80a1 	bhi.w	800336c <HAL_RCC_GetSysClockFreq+0x248>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x114>
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d056      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003236:	e099      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003238:	4b6f      	ldr	r3, [pc, #444]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b00      	cmp	r3, #0
 8003242:	d02d      	beq.n	80032a0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003244:	4b6c      	ldr	r3, [pc, #432]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	08db      	lsrs	r3, r3, #3
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	4a6b      	ldr	r2, [pc, #428]	; (80033fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
 8003254:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	ee07 3a90 	vmov	s15, r3
 800325c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	ee07 3a90 	vmov	s15, r3
 8003266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800326e:	4b62      	ldr	r3, [pc, #392]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003282:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003408 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800328a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800328e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800329a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800329e:	e087      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800340c <HAL_RCC_GetSysClockFreq+0x2e8>
 80032ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032b2:	4b51      	ldr	r3, [pc, #324]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003408 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032e2:	e065      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	ee07 3a90 	vmov	s15, r3
 80032ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003410 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032f6:	4b40      	ldr	r3, [pc, #256]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003306:	ed97 6a02 	vldr	s12, [r7, #8]
 800330a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003408 <HAL_RCC_GetSysClockFreq+0x2e4>
 800330e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800331a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800331e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003326:	e043      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	ee07 3a90 	vmov	s15, r3
 800332e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003332:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003414 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800333a:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334a:	ed97 6a02 	vldr	s12, [r7, #8]
 800334e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003408 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800335a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800335e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800336a:	e021      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	ee07 3a90 	vmov	s15, r3
 8003372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003376:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003410 <HAL_RCC_GetSysClockFreq+0x2ec>
 800337a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800337e:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800338e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003392:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003408 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800339a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800339e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033ae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80033b0:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	0a5b      	lsrs	r3, r3, #9
 80033b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ba:	3301      	adds	r3, #1
 80033bc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	ee07 3a90 	vmov	s15, r3
 80033c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80033cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033d4:	ee17 3a90 	vmov	r3, s15
 80033d8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80033da:	e005      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]
    break;
 80033e0:	e002      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80033e2:	4b07      	ldr	r3, [pc, #28]	; (8003400 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033e4:	61bb      	str	r3, [r7, #24]
    break;
 80033e6:	bf00      	nop
  }

  return sysclockfreq;
 80033e8:	69bb      	ldr	r3, [r7, #24]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3724      	adds	r7, #36	; 0x24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	58024400 	.word	0x58024400
 80033fc:	03d09000 	.word	0x03d09000
 8003400:	003d0900 	.word	0x003d0900
 8003404:	017d7840 	.word	0x017d7840
 8003408:	46000000 	.word	0x46000000
 800340c:	4c742400 	.word	0x4c742400
 8003410:	4a742400 	.word	0x4a742400
 8003414:	4bbebc20 	.word	0x4bbebc20

08003418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800341e:	f7ff fe81 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8003422:	4602      	mov	r2, r0
 8003424:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_RCC_GetHCLKFreq+0x50>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	0a1b      	lsrs	r3, r3, #8
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	490f      	ldr	r1, [pc, #60]	; (800346c <HAL_RCC_GetHCLKFreq+0x54>)
 8003430:	5ccb      	ldrb	r3, [r1, r3]
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	fa22 f303 	lsr.w	r3, r2, r3
 800343a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <HAL_RCC_GetHCLKFreq+0x50>)
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	4a09      	ldr	r2, [pc, #36]	; (800346c <HAL_RCC_GetHCLKFreq+0x54>)
 8003446:	5cd3      	ldrb	r3, [r2, r3]
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	fa22 f303 	lsr.w	r3, r2, r3
 8003452:	4a07      	ldr	r2, [pc, #28]	; (8003470 <HAL_RCC_GetHCLKFreq+0x58>)
 8003454:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003456:	4a07      	ldr	r2, [pc, #28]	; (8003474 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <HAL_RCC_GetHCLKFreq+0x58>)
 800345e:	681b      	ldr	r3, [r3, #0]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	58024400 	.word	0x58024400
 800346c:	0800d2d8 	.word	0x0800d2d8
 8003470:	24000004 	.word	0x24000004
 8003474:	24000000 	.word	0x24000000

08003478 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003480:	2300      	movs	r3, #0
 8003482:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003484:	2300      	movs	r3, #0
 8003486:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d03f      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003498:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800349c:	d02a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800349e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034a2:	d824      	bhi.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034a8:	d018      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ae:	d81e      	bhi.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034b8:	d007      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034ba:	e018      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034bc:	4bab      	ldr	r3, [pc, #684]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	4aaa      	ldr	r2, [pc, #680]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034c8:	e015      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3304      	adds	r3, #4
 80034ce:	2102      	movs	r1, #2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f002 f823 	bl	800551c <RCCEx_PLL2_Config>
 80034d6:	4603      	mov	r3, r0
 80034d8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034da:	e00c      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3324      	adds	r3, #36	; 0x24
 80034e0:	2102      	movs	r1, #2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f002 f8cc 	bl	8005680 <RCCEx_PLL3_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034ec:	e003      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75fb      	strb	r3, [r7, #23]
      break;
 80034f2:	e000      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034fc:	4b9b      	ldr	r3, [pc, #620]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003500:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003508:	4998      	ldr	r1, [pc, #608]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800350a:	4313      	orrs	r3, r2
 800350c:	650b      	str	r3, [r1, #80]	; 0x50
 800350e:	e001      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003510:	7dfb      	ldrb	r3, [r7, #23]
 8003512:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d03d      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	2b04      	cmp	r3, #4
 8003526:	d826      	bhi.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003528:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003545 	.word	0x08003545
 8003534:	08003553 	.word	0x08003553
 8003538:	08003565 	.word	0x08003565
 800353c:	0800357d 	.word	0x0800357d
 8003540:	0800357d 	.word	0x0800357d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003544:	4b89      	ldr	r3, [pc, #548]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	4a88      	ldr	r2, [pc, #544]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800354a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800354e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003550:	e015      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3304      	adds	r3, #4
 8003556:	2100      	movs	r1, #0
 8003558:	4618      	mov	r0, r3
 800355a:	f001 ffdf 	bl	800551c <RCCEx_PLL2_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003562:	e00c      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3324      	adds	r3, #36	; 0x24
 8003568:	2100      	movs	r1, #0
 800356a:	4618      	mov	r0, r3
 800356c:	f002 f888 	bl	8005680 <RCCEx_PLL3_Config>
 8003570:	4603      	mov	r3, r0
 8003572:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003574:	e003      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	75fb      	strb	r3, [r7, #23]
      break;
 800357a:	e000      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800357c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800357e:	7dfb      	ldrb	r3, [r7, #23]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d109      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003584:	4b79      	ldr	r3, [pc, #484]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003588:	f023 0207 	bic.w	r2, r3, #7
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	4976      	ldr	r1, [pc, #472]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003592:	4313      	orrs	r3, r2
 8003594:	650b      	str	r3, [r1, #80]	; 0x50
 8003596:	e001      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d042      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b0:	d02b      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80035b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b6:	d825      	bhi.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035b8:	2bc0      	cmp	r3, #192	; 0xc0
 80035ba:	d028      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80035bc:	2bc0      	cmp	r3, #192	; 0xc0
 80035be:	d821      	bhi.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035c0:	2b80      	cmp	r3, #128	; 0x80
 80035c2:	d016      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80035c4:	2b80      	cmp	r3, #128	; 0x80
 80035c6:	d81d      	bhi.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d007      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80035d0:	e018      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d2:	4b66      	ldr	r3, [pc, #408]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	4a65      	ldr	r2, [pc, #404]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035de:	e017      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3304      	adds	r3, #4
 80035e4:	2100      	movs	r1, #0
 80035e6:	4618      	mov	r0, r3
 80035e8:	f001 ff98 	bl	800551c <RCCEx_PLL2_Config>
 80035ec:	4603      	mov	r3, r0
 80035ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035f0:	e00e      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3324      	adds	r3, #36	; 0x24
 80035f6:	2100      	movs	r1, #0
 80035f8:	4618      	mov	r0, r3
 80035fa:	f002 f841 	bl	8005680 <RCCEx_PLL3_Config>
 80035fe:	4603      	mov	r3, r0
 8003600:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003602:	e005      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	75fb      	strb	r3, [r7, #23]
      break;
 8003608:	e002      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800360a:	bf00      	nop
 800360c:	e000      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800360e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003610:	7dfb      	ldrb	r3, [r7, #23]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003616:	4b55      	ldr	r3, [pc, #340]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003622:	4952      	ldr	r1, [pc, #328]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003624:	4313      	orrs	r3, r2
 8003626:	650b      	str	r3, [r1, #80]	; 0x50
 8003628:	e001      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362a:	7dfb      	ldrb	r3, [r7, #23]
 800362c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003636:	2b00      	cmp	r3, #0
 8003638:	d049      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003640:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003644:	d030      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003646:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800364a:	d82a      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800364c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003650:	d02c      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003652:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003656:	d824      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800365c:	d018      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800365e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003662:	d81e      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003668:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800366c:	d007      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800366e:	e018      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003670:	4b3e      	ldr	r3, [pc, #248]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	4a3d      	ldr	r2, [pc, #244]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800367a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800367c:	e017      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3304      	adds	r3, #4
 8003682:	2100      	movs	r1, #0
 8003684:	4618      	mov	r0, r3
 8003686:	f001 ff49 	bl	800551c <RCCEx_PLL2_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800368e:	e00e      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3324      	adds	r3, #36	; 0x24
 8003694:	2100      	movs	r1, #0
 8003696:	4618      	mov	r0, r3
 8003698:	f001 fff2 	bl	8005680 <RCCEx_PLL3_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036a0:	e005      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	75fb      	strb	r3, [r7, #23]
      break;
 80036a6:	e002      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80036a8:	bf00      	nop
 80036aa:	e000      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80036ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ae:	7dfb      	ldrb	r3, [r7, #23]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80036b4:	4b2d      	ldr	r3, [pc, #180]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036c2:	492a      	ldr	r1, [pc, #168]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	658b      	str	r3, [r1, #88]	; 0x58
 80036c8:	e001      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ca:	7dfb      	ldrb	r3, [r7, #23]
 80036cc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d04c      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036e4:	d030      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80036e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ea:	d82a      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036f0:	d02c      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80036f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036f6:	d824      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036fc:	d018      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80036fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003702:	d81e      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800370c:	d007      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800370e:	e018      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003710:	4b16      	ldr	r3, [pc, #88]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	4a15      	ldr	r2, [pc, #84]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800371c:	e017      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3304      	adds	r3, #4
 8003722:	2100      	movs	r1, #0
 8003724:	4618      	mov	r0, r3
 8003726:	f001 fef9 	bl	800551c <RCCEx_PLL2_Config>
 800372a:	4603      	mov	r3, r0
 800372c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800372e:	e00e      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3324      	adds	r3, #36	; 0x24
 8003734:	2100      	movs	r1, #0
 8003736:	4618      	mov	r0, r3
 8003738:	f001 ffa2 	bl	8005680 <RCCEx_PLL3_Config>
 800373c:	4603      	mov	r3, r0
 800373e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003740:	e005      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	75fb      	strb	r3, [r7, #23]
      break;
 8003746:	e002      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003748:	bf00      	nop
 800374a:	e000      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800374c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10d      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003762:	4902      	ldr	r1, [pc, #8]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003764:	4313      	orrs	r3, r2
 8003766:	658b      	str	r3, [r1, #88]	; 0x58
 8003768:	e004      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800376a:	bf00      	nop
 800376c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d032      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003784:	2b30      	cmp	r3, #48	; 0x30
 8003786:	d01c      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003788:	2b30      	cmp	r3, #48	; 0x30
 800378a:	d817      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x344>
 800378c:	2b20      	cmp	r3, #32
 800378e:	d00c      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003790:	2b20      	cmp	r3, #32
 8003792:	d813      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003794:	2b00      	cmp	r3, #0
 8003796:	d016      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003798:	2b10      	cmp	r3, #16
 800379a:	d10f      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800379c:	4bb1      	ldr	r3, [pc, #708]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a0:	4ab0      	ldr	r2, [pc, #704]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80037a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80037a8:	e00e      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3304      	adds	r3, #4
 80037ae:	2102      	movs	r1, #2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f001 feb3 	bl	800551c <RCCEx_PLL2_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80037ba:	e005      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	75fb      	strb	r3, [r7, #23]
      break;
 80037c0:	e002      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80037c2:	bf00      	nop
 80037c4:	e000      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80037c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037ce:	4ba5      	ldr	r3, [pc, #660]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037da:	49a2      	ldr	r1, [pc, #648]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80037e0:	e001      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e2:	7dfb      	ldrb	r3, [r7, #23]
 80037e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d047      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037fa:	d030      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80037fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003800:	d82a      	bhi.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003802:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003806:	d02c      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003808:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800380c:	d824      	bhi.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800380e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003812:	d018      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003818:	d81e      	bhi.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800381e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003822:	d007      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003824:	e018      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003826:	4b8f      	ldr	r3, [pc, #572]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	4a8e      	ldr	r2, [pc, #568]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800382c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003830:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003832:	e017      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3304      	adds	r3, #4
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f001 fe6e 	bl	800551c <RCCEx_PLL2_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003844:	e00e      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3324      	adds	r3, #36	; 0x24
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f001 ff17 	bl	8005680 <RCCEx_PLL3_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003856:	e005      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	75fb      	strb	r3, [r7, #23]
      break;
 800385c:	e002      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800385e:	bf00      	nop
 8003860:	e000      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003864:	7dfb      	ldrb	r3, [r7, #23]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d109      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800386a:	4b7e      	ldr	r3, [pc, #504]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800386c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800386e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003876:	497b      	ldr	r1, [pc, #492]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003878:	4313      	orrs	r3, r2
 800387a:	650b      	str	r3, [r1, #80]	; 0x50
 800387c:	e001      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387e:	7dfb      	ldrb	r3, [r7, #23]
 8003880:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d049      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003892:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003896:	d02e      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800389c:	d828      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800389e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038a2:	d02a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x482>
 80038a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038a8:	d822      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80038aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038ae:	d026      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x486>
 80038b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038b4:	d81c      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80038b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ba:	d010      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x466>
 80038bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038c0:	d816      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d01d      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80038c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ca:	d111      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3304      	adds	r3, #4
 80038d0:	2101      	movs	r1, #1
 80038d2:	4618      	mov	r0, r3
 80038d4:	f001 fe22 	bl	800551c <RCCEx_PLL2_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80038dc:	e012      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3324      	adds	r3, #36	; 0x24
 80038e2:	2101      	movs	r1, #1
 80038e4:	4618      	mov	r0, r3
 80038e6:	f001 fecb 	bl	8005680 <RCCEx_PLL3_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80038ee:	e009      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	75fb      	strb	r3, [r7, #23]
      break;
 80038f4:	e006      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80038f6:	bf00      	nop
 80038f8:	e004      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80038fa:	bf00      	nop
 80038fc:	e002      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80038fe:	bf00      	nop
 8003900:	e000      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003902:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800390a:	4b56      	ldr	r3, [pc, #344]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800390c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003916:	4953      	ldr	r1, [pc, #332]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003918:	4313      	orrs	r3, r2
 800391a:	650b      	str	r3, [r1, #80]	; 0x50
 800391c:	e001      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391e:	7dfb      	ldrb	r3, [r7, #23]
 8003920:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d04b      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003938:	d02e      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800393a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800393e:	d828      	bhi.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003944:	d02a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394a:	d822      	bhi.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800394c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003950:	d026      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003952:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003956:	d81c      	bhi.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800395c:	d010      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800395e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003962:	d816      	bhi.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01d      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003968:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800396c:	d111      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3304      	adds	r3, #4
 8003972:	2101      	movs	r1, #1
 8003974:	4618      	mov	r0, r3
 8003976:	f001 fdd1 	bl	800551c <RCCEx_PLL2_Config>
 800397a:	4603      	mov	r3, r0
 800397c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800397e:	e012      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3324      	adds	r3, #36	; 0x24
 8003984:	2101      	movs	r1, #1
 8003986:	4618      	mov	r0, r3
 8003988:	f001 fe7a 	bl	8005680 <RCCEx_PLL3_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003990:	e009      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	75fb      	strb	r3, [r7, #23]
      break;
 8003996:	e006      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003998:	bf00      	nop
 800399a:	e004      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800399c:	bf00      	nop
 800399e:	e002      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80039a0:	bf00      	nop
 80039a2:	e000      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80039a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039ac:	4b2d      	ldr	r3, [pc, #180]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80039ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039ba:	492a      	ldr	r1, [pc, #168]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	658b      	str	r3, [r1, #88]	; 0x58
 80039c0:	e001      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
 80039c4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d022      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00e      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x580>
 80039da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039de:	d108      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3304      	adds	r3, #4
 80039e4:	2101      	movs	r1, #1
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 fd98 	bl	800551c <RCCEx_PLL2_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 80039f0:	e003      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	75fb      	strb	r3, [r7, #23]
      break;
 80039f6:	e000      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 80039f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d109      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003a00:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0c:	4915      	ldr	r1, [pc, #84]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a12:	e001      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
 8003a16:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d031      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a2c:	d00e      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a32:	d814      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d017      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8003a38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a3c:	d10f      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a3e:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	4a08      	ldr	r2, [pc, #32]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a4a:	e00e      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	2101      	movs	r1, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	f001 fd62 	bl	800551c <RCCEx_PLL2_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a5c:	e005      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	75fb      	strb	r3, [r7, #23]
      break;
 8003a62:	e002      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8003a64:	58024400 	.word	0x58024400
      break;
 8003a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a6a:	7dfb      	ldrb	r3, [r7, #23]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d109      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a70:	4bbc      	ldr	r3, [pc, #752]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	49b9      	ldr	r1, [pc, #740]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	650b      	str	r3, [r1, #80]	; 0x50
 8003a82:	e001      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
 8003a86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d032      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d81b      	bhi.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8003a9c:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003adb 	.word	0x08003adb
 8003aa8:	08003ab5 	.word	0x08003ab5
 8003aac:	08003ac3 	.word	0x08003ac3
 8003ab0:	08003adb 	.word	0x08003adb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab4:	4bab      	ldr	r3, [pc, #684]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	4aaa      	ldr	r2, [pc, #680]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003aba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003abe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ac0:	e00c      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	2102      	movs	r1, #2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 fd27 	bl	800551c <RCCEx_PLL2_Config>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ad2:	e003      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad8:	e000      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8003ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ae2:	4ba0      	ldr	r3, [pc, #640]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae6:	f023 0203 	bic.w	r2, r3, #3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aee:	499d      	ldr	r1, [pc, #628]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003af4:	e001      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af6:	7dfb      	ldrb	r3, [r7, #23]
 8003af8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 8086 	beq.w	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b08:	4b97      	ldr	r3, [pc, #604]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a96      	ldr	r2, [pc, #600]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b14:	f7fd fb90 	bl	8001238 <HAL_GetTick>
 8003b18:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b1a:	e009      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1c:	f7fd fb8c 	bl	8001238 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b64      	cmp	r3, #100	; 0x64
 8003b28:	d902      	bls.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	75fb      	strb	r3, [r7, #23]
        break;
 8003b2e:	e005      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b30:	4b8d      	ldr	r3, [pc, #564]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ef      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d166      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b42:	4b88      	ldr	r3, [pc, #544]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003b44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b4c:	4053      	eors	r3, r2
 8003b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d013      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b56:	4b83      	ldr	r3, [pc, #524]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b5e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b60:	4b80      	ldr	r3, [pc, #512]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	4a7f      	ldr	r2, [pc, #508]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b6c:	4b7d      	ldr	r3, [pc, #500]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b70:	4a7c      	ldr	r2, [pc, #496]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003b72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b76:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b78:	4a7a      	ldr	r2, [pc, #488]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b88:	d115      	bne.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8a:	f7fd fb55 	bl	8001238 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b90:	e00b      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b92:	f7fd fb51 	bl	8001238 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d902      	bls.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	75fb      	strb	r3, [r7, #23]
            break;
 8003ba8:	e005      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003baa:	4b6e      	ldr	r3, [pc, #440]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0ed      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8003bb6:	7dfb      	ldrb	r3, [r7, #23]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d126      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bca:	d10d      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8003bcc:	4b65      	ldr	r3, [pc, #404]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bda:	0919      	lsrs	r1, r3, #4
 8003bdc:	4b63      	ldr	r3, [pc, #396]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8003bde:	400b      	ands	r3, r1
 8003be0:	4960      	ldr	r1, [pc, #384]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	610b      	str	r3, [r1, #16]
 8003be6:	e005      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8003be8:	4b5e      	ldr	r3, [pc, #376]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	4a5d      	ldr	r2, [pc, #372]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003bee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bf2:	6113      	str	r3, [r2, #16]
 8003bf4:	4b5b      	ldr	r3, [pc, #364]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003bf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c02:	4958      	ldr	r1, [pc, #352]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	670b      	str	r3, [r1, #112]	; 0x70
 8003c08:	e004      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	75bb      	strb	r3, [r7, #22]
 8003c0e:	e001      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d07e      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c24:	2b28      	cmp	r3, #40	; 0x28
 8003c26:	d867      	bhi.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8003c28:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8003c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2e:	bf00      	nop
 8003c30:	08003cff 	.word	0x08003cff
 8003c34:	08003cf9 	.word	0x08003cf9
 8003c38:	08003cf9 	.word	0x08003cf9
 8003c3c:	08003cf9 	.word	0x08003cf9
 8003c40:	08003cf9 	.word	0x08003cf9
 8003c44:	08003cf9 	.word	0x08003cf9
 8003c48:	08003cf9 	.word	0x08003cf9
 8003c4c:	08003cf9 	.word	0x08003cf9
 8003c50:	08003cd5 	.word	0x08003cd5
 8003c54:	08003cf9 	.word	0x08003cf9
 8003c58:	08003cf9 	.word	0x08003cf9
 8003c5c:	08003cf9 	.word	0x08003cf9
 8003c60:	08003cf9 	.word	0x08003cf9
 8003c64:	08003cf9 	.word	0x08003cf9
 8003c68:	08003cf9 	.word	0x08003cf9
 8003c6c:	08003cf9 	.word	0x08003cf9
 8003c70:	08003ce7 	.word	0x08003ce7
 8003c74:	08003cf9 	.word	0x08003cf9
 8003c78:	08003cf9 	.word	0x08003cf9
 8003c7c:	08003cf9 	.word	0x08003cf9
 8003c80:	08003cf9 	.word	0x08003cf9
 8003c84:	08003cf9 	.word	0x08003cf9
 8003c88:	08003cf9 	.word	0x08003cf9
 8003c8c:	08003cf9 	.word	0x08003cf9
 8003c90:	08003cff 	.word	0x08003cff
 8003c94:	08003cf9 	.word	0x08003cf9
 8003c98:	08003cf9 	.word	0x08003cf9
 8003c9c:	08003cf9 	.word	0x08003cf9
 8003ca0:	08003cf9 	.word	0x08003cf9
 8003ca4:	08003cf9 	.word	0x08003cf9
 8003ca8:	08003cf9 	.word	0x08003cf9
 8003cac:	08003cf9 	.word	0x08003cf9
 8003cb0:	08003cff 	.word	0x08003cff
 8003cb4:	08003cf9 	.word	0x08003cf9
 8003cb8:	08003cf9 	.word	0x08003cf9
 8003cbc:	08003cf9 	.word	0x08003cf9
 8003cc0:	08003cf9 	.word	0x08003cf9
 8003cc4:	08003cf9 	.word	0x08003cf9
 8003cc8:	08003cf9 	.word	0x08003cf9
 8003ccc:	08003cf9 	.word	0x08003cf9
 8003cd0:	08003cff 	.word	0x08003cff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	2101      	movs	r1, #1
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 fc1e 	bl	800551c <RCCEx_PLL2_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ce4:	e00c      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3324      	adds	r3, #36	; 0x24
 8003cea:	2101      	movs	r1, #1
 8003cec:	4618      	mov	r0, r3
 8003cee:	f001 fcc7 	bl	8005680 <RCCEx_PLL3_Config>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003cf6:	e003      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003cfc:	e000      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8003cfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d00:	7dfb      	ldrb	r3, [r7, #23]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d06:	4b17      	ldr	r3, [pc, #92]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d12:	4914      	ldr	r1, [pc, #80]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	654b      	str	r3, [r1, #84]	; 0x54
 8003d18:	e001      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1a:	7dfb      	ldrb	r3, [r7, #23]
 8003d1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d03e      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d2e:	2b05      	cmp	r3, #5
 8003d30:	d827      	bhi.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8003d32:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d38:	08003d89 	.word	0x08003d89
 8003d3c:	08003d51 	.word	0x08003d51
 8003d40:	08003d71 	.word	0x08003d71
 8003d44:	08003d89 	.word	0x08003d89
 8003d48:	08003d89 	.word	0x08003d89
 8003d4c:	08003d89 	.word	0x08003d89
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3304      	adds	r3, #4
 8003d54:	2101      	movs	r1, #1
 8003d56:	4618      	mov	r0, r3
 8003d58:	f001 fbe0 	bl	800551c <RCCEx_PLL2_Config>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d60:	e013      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003d62:	bf00      	nop
 8003d64:	58024400 	.word	0x58024400
 8003d68:	58024800 	.word	0x58024800
 8003d6c:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3324      	adds	r3, #36	; 0x24
 8003d74:	2101      	movs	r1, #1
 8003d76:	4618      	mov	r0, r3
 8003d78:	f001 fc82 	bl	8005680 <RCCEx_PLL3_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d80:	e003      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	75fb      	strb	r3, [r7, #23]
      break;
 8003d86:	e000      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8003d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d109      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d90:	4b9f      	ldr	r3, [pc, #636]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d94:	f023 0207 	bic.w	r2, r3, #7
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d9c:	499c      	ldr	r1, [pc, #624]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	654b      	str	r3, [r1, #84]	; 0x54
 8003da2:	e001      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d039      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dba:	2b05      	cmp	r3, #5
 8003dbc:	d820      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003dbe:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8003dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc4:	08003e07 	.word	0x08003e07
 8003dc8:	08003ddd 	.word	0x08003ddd
 8003dcc:	08003def 	.word	0x08003def
 8003dd0:	08003e07 	.word	0x08003e07
 8003dd4:	08003e07 	.word	0x08003e07
 8003dd8:	08003e07 	.word	0x08003e07
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	2101      	movs	r1, #1
 8003de2:	4618      	mov	r0, r3
 8003de4:	f001 fb9a 	bl	800551c <RCCEx_PLL2_Config>
 8003de8:	4603      	mov	r3, r0
 8003dea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003dec:	e00c      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3324      	adds	r3, #36	; 0x24
 8003df2:	2101      	movs	r1, #1
 8003df4:	4618      	mov	r0, r3
 8003df6:	f001 fc43 	bl	8005680 <RCCEx_PLL3_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003dfe:	e003      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	75fb      	strb	r3, [r7, #23]
      break;
 8003e04:	e000      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8003e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e0e:	4b80      	ldr	r3, [pc, #512]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e12:	f023 0207 	bic.w	r2, r3, #7
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1c:	497c      	ldr	r1, [pc, #496]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	658b      	str	r3, [r1, #88]	; 0x58
 8003e22:	e001      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
 8003e26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d04b      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e3e:	d02e      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8003e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e44:	d828      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4a:	d02a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8003e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e50:	d822      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003e52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e56:	d026      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8003e58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e5c:	d81c      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e62:	d010      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003e64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e68:	d816      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01d      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8003e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e72:	d111      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3304      	adds	r3, #4
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f001 fb4e 	bl	800551c <RCCEx_PLL2_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e84:	e012      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3324      	adds	r3, #36	; 0x24
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 fbf7 	bl	8005680 <RCCEx_PLL3_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e96:	e009      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e9c:	e006      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003e9e:	bf00      	nop
 8003ea0:	e004      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e002      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003eaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eac:	7dfb      	ldrb	r3, [r7, #23]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eb2:	4b57      	ldr	r3, [pc, #348]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec0:	4953      	ldr	r1, [pc, #332]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	654b      	str	r3, [r1, #84]	; 0x54
 8003ec6:	e001      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
 8003eca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d04b      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ede:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ee2:	d02e      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003ee4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ee8:	d828      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eee:	d02a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8003ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef4:	d822      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003ef6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003efa:	d026      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8003efc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f00:	d81c      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f06:	d010      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f0c:	d816      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01d      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8003f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f16:	d111      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f001 fafc 	bl	800551c <RCCEx_PLL2_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f28:	e012      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3324      	adds	r3, #36	; 0x24
 8003f2e:	2102      	movs	r1, #2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 fba5 	bl	8005680 <RCCEx_PLL3_Config>
 8003f36:	4603      	mov	r3, r0
 8003f38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f3a:	e009      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f40:	e006      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003f42:	bf00      	nop
 8003f44:	e004      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003f46:	bf00      	nop
 8003f48:	e002      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e000      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f50:	7dfb      	ldrb	r3, [r7, #23]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f56:	4b2e      	ldr	r3, [pc, #184]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f64:	492a      	ldr	r1, [pc, #168]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	658b      	str	r3, [r1, #88]	; 0x58
 8003f6a:	e001      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d04d      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f82:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f86:	d02e      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8003f88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f8c:	d828      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f92:	d02a      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8003f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f98:	d822      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003f9a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f9e:	d026      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8003fa0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fa4:	d81c      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003faa:	d010      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8003fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fb0:	d816      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d01d      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8003fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fba:	d111      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f001 faaa 	bl	800551c <RCCEx_PLL2_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003fcc:	e012      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3324      	adds	r3, #36	; 0x24
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f001 fb53 	bl	8005680 <RCCEx_PLL3_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003fde:	e009      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe4:	e006      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e004      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003fea:	bf00      	nop
 8003fec:	e002      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003fee:	bf00      	nop
 8003ff0:	e000      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10c      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004008:	4901      	ldr	r1, [pc, #4]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800400a:	4313      	orrs	r3, r2
 800400c:	658b      	str	r3, [r1, #88]	; 0x58
 800400e:	e003      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004010:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004014:	7dfb      	ldrb	r3, [r7, #23]
 8004016:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800402a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800402e:	d10a      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3324      	adds	r3, #36	; 0x24
 8004034:	2102      	movs	r1, #2
 8004036:	4618      	mov	r0, r3
 8004038:	f001 fb22 	bl	8005680 <RCCEx_PLL3_Config>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004046:	4b8c      	ldr	r3, [pc, #560]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004054:	4988      	ldr	r1, [pc, #544]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004056:	4313      	orrs	r3, r2
 8004058:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800406c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004070:	d10a      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3324      	adds	r3, #36	; 0x24
 8004076:	2102      	movs	r1, #2
 8004078:	4618      	mov	r0, r3
 800407a:	f001 fb01 	bl	8005680 <RCCEx_PLL3_Config>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004088:	4b7b      	ldr	r3, [pc, #492]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800408a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004096:	4978      	ldr	r1, [pc, #480]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004098:	4313      	orrs	r3, r2
 800409a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d034      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040b2:	d01d      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80040b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040b8:	d817      	bhi.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80040be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c2:	d009      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 80040c4:	e011      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3304      	adds	r3, #4
 80040ca:	2100      	movs	r1, #0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f001 fa25 	bl	800551c <RCCEx_PLL2_Config>
 80040d2:	4603      	mov	r3, r0
 80040d4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040d6:	e00c      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3324      	adds	r3, #36	; 0x24
 80040dc:	2102      	movs	r1, #2
 80040de:	4618      	mov	r0, r3
 80040e0:	f001 face 	bl	8005680 <RCCEx_PLL3_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040e8:	e003      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75fb      	strb	r3, [r7, #23]
      break;
 80040ee:	e000      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 80040f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f2:	7dfb      	ldrb	r3, [r7, #23]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10a      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040f8:	4b5f      	ldr	r3, [pc, #380]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80040fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004106:	495c      	ldr	r1, [pc, #368]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004108:	4313      	orrs	r3, r2
 800410a:	658b      	str	r3, [r1, #88]	; 0x58
 800410c:	e001      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410e:	7dfb      	ldrb	r3, [r7, #23]
 8004110:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d033      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004124:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004128:	d01c      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 800412a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800412e:	d816      	bhi.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8004130:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004134:	d003      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8004136:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800413a:	d007      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 800413c:	e00f      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800413e:	4b4e      	ldr	r3, [pc, #312]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004142:	4a4d      	ldr	r2, [pc, #308]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004148:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800414a:	e00c      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3324      	adds	r3, #36	; 0x24
 8004150:	2101      	movs	r1, #1
 8004152:	4618      	mov	r0, r3
 8004154:	f001 fa94 	bl	8005680 <RCCEx_PLL3_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800415c:	e003      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	75fb      	strb	r3, [r7, #23]
      break;
 8004162:	e000      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 8004164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004166:	7dfb      	ldrb	r3, [r7, #23]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800416c:	4b42      	ldr	r3, [pc, #264]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800416e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004170:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	493f      	ldr	r1, [pc, #252]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800417c:	4313      	orrs	r3, r2
 800417e:	654b      	str	r3, [r1, #84]	; 0x54
 8004180:	e001      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004182:	7dfb      	ldrb	r3, [r7, #23]
 8004184:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d029      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 800419a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419e:	d007      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 80041a0:	e00f      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041a2:	4b35      	ldr	r3, [pc, #212]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	4a34      	ldr	r2, [pc, #208]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80041a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041ae:	e00b      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3304      	adds	r3, #4
 80041b4:	2102      	movs	r1, #2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f001 f9b0 	bl	800551c <RCCEx_PLL2_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041c0:	e002      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	75fb      	strb	r3, [r7, #23]
      break;
 80041c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c8:	7dfb      	ldrb	r3, [r7, #23]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d109      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041ce:	4b2a      	ldr	r3, [pc, #168]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80041d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041da:	4927      	ldr	r1, [pc, #156]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80041e0:	e001      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e2:	7dfb      	ldrb	r3, [r7, #23]
 80041e4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3324      	adds	r3, #36	; 0x24
 80041f6:	2102      	movs	r1, #2
 80041f8:	4618      	mov	r0, r3
 80041fa:	f001 fa41 	bl	8005680 <RCCEx_PLL3_Config>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d035      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800421a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800421e:	d017      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8004220:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004224:	d811      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800422a:	d013      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 800422c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004230:	d80b      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d010      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 8004236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800423a:	d106      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800423c:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	4a0d      	ldr	r2, [pc, #52]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004246:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004248:	e007      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
      break;
 800424e:	e004      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004250:	bf00      	nop
 8004252:	e002      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004254:	bf00      	nop
 8004256:	e000      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8004258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800425a:	7dfb      	ldrb	r3, [r7, #23]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10d      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800426e:	4902      	ldr	r1, [pc, #8]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8004270:	4313      	orrs	r3, r2
 8004272:	654b      	str	r3, [r1, #84]	; 0x54
 8004274:	e004      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8004276:	bf00      	nop
 8004278:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427c:	7dfb      	ldrb	r3, [r7, #23]
 800427e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800428c:	4b31      	ldr	r3, [pc, #196]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800428e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004290:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004298:	492e      	ldr	r1, [pc, #184]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800429a:	4313      	orrs	r3, r2
 800429c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80042aa:	4b2a      	ldr	r3, [pc, #168]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80042b8:	4926      	ldr	r1, [pc, #152]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042ca:	4b22      	ldr	r3, [pc, #136]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80042cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d6:	491f      	ldr	r1, [pc, #124]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00d      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042e8:	4b1a      	ldr	r3, [pc, #104]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	4a19      	ldr	r2, [pc, #100]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80042ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042f2:	6113      	str	r3, [r2, #16]
 80042f4:	4b17      	ldr	r3, [pc, #92]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80042fe:	4915      	ldr	r1, [pc, #84]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8004300:	4313      	orrs	r3, r2
 8004302:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	da08      	bge.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800430c:	4b11      	ldr	r3, [pc, #68]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800430e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004310:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004318:	490e      	ldr	r1, [pc, #56]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800431a:	4313      	orrs	r3, r2
 800431c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800432a:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004338:	4906      	ldr	r1, [pc, #24]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800433a:	4313      	orrs	r3, r2
 800433c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800433e:	7dbb      	ldrb	r3, [r7, #22]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	e000      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	58024400 	.word	0x58024400

08004358 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b090      	sub	sp, #64	; 0x40
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004366:	f040 8095 	bne.w	8004494 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800436a:	4bae      	ldr	r3, [pc, #696]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800436c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	633b      	str	r3, [r7, #48]	; 0x30
 8004374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004376:	2b04      	cmp	r3, #4
 8004378:	f200 8088 	bhi.w	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800437c:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800437e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004382:	bf00      	nop
 8004384:	08004399 	.word	0x08004399
 8004388:	080043c1 	.word	0x080043c1
 800438c:	080043e9 	.word	0x080043e9
 8004390:	08004485 	.word	0x08004485
 8004394:	08004411 	.word	0x08004411

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004398:	4ba2      	ldr	r3, [pc, #648]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043a4:	d108      	bne.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80043a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 ff64 	bl	8005278 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80043b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80043b4:	f000 bc95 	b.w	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80043bc:	f000 bc91 	b.w	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80043c0:	4b98      	ldr	r3, [pc, #608]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043cc:	d108      	bne.n	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043ce:	f107 0318 	add.w	r3, r7, #24
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fca8 	bl	8004d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80043dc:	f000 bc81 	b.w	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80043e4:	f000 bc7d 	b.w	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80043e8:	4b8e      	ldr	r3, [pc, #568]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f4:	d108      	bne.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80043f6:	f107 030c 	add.w	r3, r7, #12
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fde8 	bl	8004fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004404:	f000 bc6d 	b.w	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004408:	2300      	movs	r3, #0
 800440a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800440c:	f000 bc69 	b.w	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004410:	4b84      	ldr	r3, [pc, #528]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004414:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004418:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800441a:	4b82      	ldr	r3, [pc, #520]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b04      	cmp	r3, #4
 8004424:	d10c      	bne.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8004426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004428:	2b00      	cmp	r3, #0
 800442a:	d109      	bne.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800442c:	4b7d      	ldr	r3, [pc, #500]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	08db      	lsrs	r3, r3, #3
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	4a7c      	ldr	r2, [pc, #496]	; (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
 800443c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800443e:	e01f      	b.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004440:	4b78      	ldr	r3, [pc, #480]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444c:	d106      	bne.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800444e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004454:	d102      	bne.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004456:	4b75      	ldr	r3, [pc, #468]	; (800462c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800445a:	e011      	b.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800445c:	4b71      	ldr	r3, [pc, #452]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004468:	d106      	bne.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800446a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004470:	d102      	bne.n	8004478 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004472:	4b6f      	ldr	r3, [pc, #444]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004476:	e003      	b.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004478:	2300      	movs	r3, #0
 800447a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800447c:	f000 bc31 	b.w	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004480:	f000 bc2f 	b.w	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004484:	4b6b      	ldr	r3, [pc, #428]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004486:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004488:	f000 bc2b 	b.w	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004490:	f000 bc27 	b.w	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800449a:	f040 8095 	bne.w	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800449e:	4b61      	ldr	r3, [pc, #388]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80044a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80044a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ae:	d04d      	beq.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b6:	f200 8084 	bhi.w	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	2bc0      	cmp	r3, #192	; 0xc0
 80044be:	d07d      	beq.n	80045bc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	2bc0      	cmp	r3, #192	; 0xc0
 80044c4:	d87d      	bhi.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	2b80      	cmp	r3, #128	; 0x80
 80044ca:	d02d      	beq.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80044cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ce:	2b80      	cmp	r3, #128	; 0x80
 80044d0:	d877      	bhi.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	2b40      	cmp	r3, #64	; 0x40
 80044dc:	d012      	beq.n	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80044de:	e070      	b.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80044e0:	4b50      	ldr	r3, [pc, #320]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044ec:	d107      	bne.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80044ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fec0 	bl	8005278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80044fc:	e3f1      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80044fe:	2300      	movs	r3, #0
 8004500:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004502:	e3ee      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004504:	4b47      	ldr	r3, [pc, #284]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800450c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004510:	d107      	bne.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004512:	f107 0318 	add.w	r3, r7, #24
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fc06 	bl	8004d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004520:	e3df      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004526:	e3dc      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004528:	4b3e      	ldr	r3, [pc, #248]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004534:	d107      	bne.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004536:	f107 030c 	add.w	r3, r7, #12
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fd48 	bl	8004fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004544:	e3cd      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800454a:	e3ca      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800454c:	4b35      	ldr	r3, [pc, #212]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800454e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004550:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004554:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004556:	4b33      	ldr	r3, [pc, #204]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b04      	cmp	r3, #4
 8004560:	d10c      	bne.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8004562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004564:	2b00      	cmp	r3, #0
 8004566:	d109      	bne.n	800457c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004568:	4b2e      	ldr	r3, [pc, #184]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	08db      	lsrs	r3, r3, #3
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	4a2d      	ldr	r2, [pc, #180]	; (8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
 8004578:	63fb      	str	r3, [r7, #60]	; 0x3c
 800457a:	e01e      	b.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800457c:	4b29      	ldr	r3, [pc, #164]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004588:	d106      	bne.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800458a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800458c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004590:	d102      	bne.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004592:	4b26      	ldr	r3, [pc, #152]	; (800462c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004594:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004596:	e010      	b.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004598:	4b22      	ldr	r3, [pc, #136]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045a4:	d106      	bne.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80045a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045ac:	d102      	bne.n	80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80045ae:	4b20      	ldr	r3, [pc, #128]	; (8004630 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80045b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045b2:	e002      	b.n	80045ba <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80045b8:	e393      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80045ba:	e392      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80045bc:	4b1d      	ldr	r3, [pc, #116]	; (8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80045be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045c0:	e38f      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045c6:	e38c      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ce:	f040 80a7 	bne.w	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80045d2:	4b14      	ldr	r3, [pc, #80]	; (8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80045da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80045dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045e2:	d05f      	beq.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045ea:	f200 8096 	bhi.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045f4:	f000 808e 	beq.w	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045fe:	f200 808c 	bhi.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004608:	d03a      	beq.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004610:	f200 8083 	bhi.w	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00e      	beq.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004620:	d01c      	beq.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8004622:	e07a      	b.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004624:	58024400 	.word	0x58024400
 8004628:	03d09000 	.word	0x03d09000
 800462c:	003d0900 	.word	0x003d0900
 8004630:	017d7840 	.word	0x017d7840
 8004634:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004638:	4baa      	ldr	r3, [pc, #680]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004640:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004644:	d107      	bne.n	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fe14 	bl	8005278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004654:	e345      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004656:	2300      	movs	r3, #0
 8004658:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800465a:	e342      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800465c:	4ba1      	ldr	r3, [pc, #644]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004668:	d107      	bne.n	800467a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800466a:	f107 0318 	add.w	r3, r7, #24
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fb5a 	bl	8004d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004678:	e333      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800467e:	e330      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004680:	4b98      	ldr	r3, [pc, #608]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800468c:	d107      	bne.n	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800468e:	f107 030c 	add.w	r3, r7, #12
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fc9c 	bl	8004fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800469c:	e321      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046a2:	e31e      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80046a4:	4b8f      	ldr	r3, [pc, #572]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046ac:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80046ae:	4b8d      	ldr	r3, [pc, #564]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d10c      	bne.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80046ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d109      	bne.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046c0:	4b88      	ldr	r3, [pc, #544]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	08db      	lsrs	r3, r3, #3
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	4a87      	ldr	r2, [pc, #540]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80046cc:	fa22 f303 	lsr.w	r3, r2, r3
 80046d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046d2:	e01e      	b.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80046d4:	4b83      	ldr	r3, [pc, #524]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e0:	d106      	bne.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80046e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046e8:	d102      	bne.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80046ea:	4b80      	ldr	r3, [pc, #512]	; (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80046ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ee:	e010      	b.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80046f0:	4b7c      	ldr	r3, [pc, #496]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046fc:	d106      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80046fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004704:	d102      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004706:	4b7a      	ldr	r3, [pc, #488]	; (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800470a:	e002      	b.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004710:	e2e7      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004712:	e2e6      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004714:	4b77      	ldr	r3, [pc, #476]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004716:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004718:	e2e3      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800471a:	2300      	movs	r3, #0
 800471c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800471e:	e2e0      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004726:	f040 809c 	bne.w	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800472a:	4b6e      	ldr	r3, [pc, #440]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800472c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004732:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800473a:	d054      	beq.n	80047e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004742:	f200 808b 	bhi.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800474c:	f000 8083 	beq.w	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004756:	f200 8081 	bhi.w	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004760:	d02f      	beq.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004768:	d878      	bhi.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	2b00      	cmp	r3, #0
 800476e:	d004      	beq.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004772:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004776:	d012      	beq.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8004778:	e070      	b.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800477a:	4b5a      	ldr	r3, [pc, #360]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004786:	d107      	bne.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fd73 	bl	8005278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004796:	e2a4      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800479c:	e2a1      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800479e:	4b51      	ldr	r3, [pc, #324]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047aa:	d107      	bne.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047ac:	f107 0318 	add.w	r3, r7, #24
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fab9 	bl	8004d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80047ba:	e292      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047c0:	e28f      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80047c2:	4b48      	ldr	r3, [pc, #288]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ce:	d107      	bne.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047d0:	f107 030c 	add.w	r3, r7, #12
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fbfb 	bl	8004fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047de:	e280      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047e4:	e27d      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80047e6:	4b3f      	ldr	r3, [pc, #252]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80047e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047ee:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80047f0:	4b3c      	ldr	r3, [pc, #240]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d10c      	bne.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80047fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004802:	4b38      	ldr	r3, [pc, #224]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	08db      	lsrs	r3, r3, #3
 8004808:	f003 0303 	and.w	r3, r3, #3
 800480c:	4a36      	ldr	r2, [pc, #216]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800480e:	fa22 f303 	lsr.w	r3, r2, r3
 8004812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004814:	e01e      	b.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004816:	4b33      	ldr	r3, [pc, #204]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004822:	d106      	bne.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8004824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004826:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800482a:	d102      	bne.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800482c:	4b2f      	ldr	r3, [pc, #188]	; (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800482e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004830:	e010      	b.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004832:	4b2c      	ldr	r3, [pc, #176]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800483e:	d106      	bne.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004846:	d102      	bne.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004848:	4b29      	ldr	r3, [pc, #164]	; (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800484a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800484c:	e002      	b.n	8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800484e:	2300      	movs	r3, #0
 8004850:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004852:	e246      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004854:	e245      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004856:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004858:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800485a:	e242      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004860:	e23f      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004868:	f040 80a8 	bne.w	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800486c:	4b1d      	ldr	r3, [pc, #116]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800486e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004870:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004874:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800487c:	d060      	beq.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800487e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004884:	f200 8097 	bhi.w	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800488e:	f000 808f 	beq.w	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004898:	f200 808d 	bhi.w	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048a2:	d03b      	beq.n	800491c <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 80048a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048aa:	f200 8084 	bhi.w	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d004      	beq.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80048b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ba:	d01d      	beq.n	80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80048bc:	e07b      	b.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80048be:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048ca:	d107      	bne.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fcd1 	bl	8005278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048da:	e202      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048e0:	e1ff      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80048e2:	bf00      	nop
 80048e4:	58024400 	.word	0x58024400
 80048e8:	03d09000 	.word	0x03d09000
 80048ec:	003d0900 	.word	0x003d0900
 80048f0:	017d7840 	.word	0x017d7840
 80048f4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048f8:	4ba3      	ldr	r3, [pc, #652]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004904:	d107      	bne.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004906:	f107 0318 	add.w	r3, r7, #24
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fa0c 	bl	8004d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004914:	e1e5      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800491a:	e1e2      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800491c:	4b9a      	ldr	r3, [pc, #616]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004928:	d107      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800492a:	f107 030c 	add.w	r3, r7, #12
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fb4e 	bl	8004fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004938:	e1d3      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800493e:	e1d0      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004940:	4b91      	ldr	r3, [pc, #580]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004944:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004948:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800494a:	4b8f      	ldr	r3, [pc, #572]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b04      	cmp	r3, #4
 8004954:	d10c      	bne.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8004956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004958:	2b00      	cmp	r3, #0
 800495a:	d109      	bne.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800495c:	4b8a      	ldr	r3, [pc, #552]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	08db      	lsrs	r3, r3, #3
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	4a89      	ldr	r2, [pc, #548]	; (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
 800496c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800496e:	e01e      	b.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004970:	4b85      	ldr	r3, [pc, #532]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800497c:	d106      	bne.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800497e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004980:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004984:	d102      	bne.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004986:	4b82      	ldr	r3, [pc, #520]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004988:	63fb      	str	r3, [r7, #60]	; 0x3c
 800498a:	e010      	b.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800498c:	4b7e      	ldr	r3, [pc, #504]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004994:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004998:	d106      	bne.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800499a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049a0:	d102      	bne.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80049a2:	4b7c      	ldr	r3, [pc, #496]	; (8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80049a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a6:	e002      	b.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80049ac:	e199      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80049ae:	e198      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80049b0:	4b79      	ldr	r3, [pc, #484]	; (8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80049b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049b4:	e195      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80049b6:	2300      	movs	r3, #0
 80049b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049ba:	e192      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049c2:	d173      	bne.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80049c4:	4b70      	ldr	r3, [pc, #448]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80049c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049cc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049d4:	d02f      	beq.n	8004a36 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80049d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049dc:	d863      	bhi.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80049de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80049e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ea:	d012      	beq.n	8004a12 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80049ec:	e05b      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80049ee:	4b66      	ldr	r3, [pc, #408]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049fa:	d107      	bne.n	8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049fc:	f107 0318 	add.w	r3, r7, #24
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 f991 	bl	8004d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a0a:	e16a      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a10:	e167      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a12:	4b5d      	ldr	r3, [pc, #372]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a1e:	d107      	bne.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a20:	f107 030c 	add.w	r3, r7, #12
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 fad3 	bl	8004fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a2e:	e158      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a34:	e155      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004a36:	4b54      	ldr	r3, [pc, #336]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a3e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a40:	4b51      	ldr	r3, [pc, #324]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d10c      	bne.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8004a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d109      	bne.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a52:	4b4d      	ldr	r3, [pc, #308]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	08db      	lsrs	r3, r3, #3
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	4a4b      	ldr	r2, [pc, #300]	; (8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a64:	e01e      	b.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a66:	4b48      	ldr	r3, [pc, #288]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a72:	d106      	bne.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8004a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a7a:	d102      	bne.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004a7c:	4b44      	ldr	r3, [pc, #272]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a80:	e010      	b.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a82:	4b41      	ldr	r3, [pc, #260]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a8e:	d106      	bne.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8004a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a96:	d102      	bne.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004a98:	4b3e      	ldr	r3, [pc, #248]	; (8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a9c:	e002      	b.n	8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004aa2:	e11e      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004aa4:	e11d      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004aaa:	e11a      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab2:	d133      	bne.n	8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004ab4:	4b34      	ldr	r3, [pc, #208]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004abc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d004      	beq.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8004ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aca:	d012      	beq.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8004acc:	e023      	b.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004ace:	4b2e      	ldr	r3, [pc, #184]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ada:	d107      	bne.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fbc9 	bl	8005278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004aea:	e0fa      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004af0:	e0f7      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004af2:	4b25      	ldr	r3, [pc, #148]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004afa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004afe:	d107      	bne.n	8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b00:	f107 0318 	add.w	r3, r7, #24
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 f90f 	bl	8004d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004b0e:	e0e8      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b14:	e0e5      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004b16:	2300      	movs	r3, #0
 8004b18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b1a:	e0e2      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b22:	f040 808f 	bne.w	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004b26:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004b2e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b36:	d075      	beq.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8004b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b3e:	d87e      	bhi.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b46:	d060      	beq.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4e:	d876      	bhi.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b56:	d045      	beq.n	8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8004b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b5e:	d86e      	bhi.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b66:	d02b      	beq.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8004b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b6e:	d866      	bhi.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d004      	beq.n	8004b80 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8004b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b7c:	d00e      	beq.n	8004b9c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004b7e:	e05e      	b.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004b80:	f000 f8bc 	bl	8004cfc <HAL_RCCEx_GetD3PCLK1Freq>
 8004b84:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004b86:	e0ac      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004b88:	58024400 	.word	0x58024400
 8004b8c:	03d09000 	.word	0x03d09000
 8004b90:	003d0900 	.word	0x003d0900
 8004b94:	017d7840 	.word	0x017d7840
 8004b98:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b9c:	4b53      	ldr	r3, [pc, #332]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba8:	d107      	bne.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004baa:	f107 0318 	add.w	r3, r7, #24
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 f8ba 	bl	8004d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004bb8:	e093      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bbe:	e090      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004bc0:	4b4a      	ldr	r3, [pc, #296]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bcc:	d107      	bne.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bce:	f107 030c 	add.w	r3, r7, #12
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 f9fc 	bl	8004fd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004bdc:	e081      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004bde:	2300      	movs	r3, #0
 8004be0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004be2:	e07e      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004be4:	4b41      	ldr	r3, [pc, #260]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d109      	bne.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bf0:	4b3e      	ldr	r3, [pc, #248]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	08db      	lsrs	r3, r3, #3
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	4a3d      	ldr	r2, [pc, #244]	; (8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8004bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004c00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004c02:	e06e      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004c04:	2300      	movs	r3, #0
 8004c06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c08:	e06b      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004c0a:	4b38      	ldr	r3, [pc, #224]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c16:	d102      	bne.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8004c18:	4b36      	ldr	r3, [pc, #216]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c1c:	e061      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c22:	e05e      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c24:	4b31      	ldr	r3, [pc, #196]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c30:	d102      	bne.n	8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8004c32:	4b31      	ldr	r3, [pc, #196]	; (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004c34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004c36:	e054      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c3c:	e051      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c42:	e04e      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4a:	d148      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004c4c:	4b27      	ldr	r3, [pc, #156]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c54:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c5c:	d02a      	beq.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c64:	d838      	bhi.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8004c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d004      	beq.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c72:	d00d      	beq.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8004c74:	e030      	b.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c76:	4b1d      	ldr	r3, [pc, #116]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c82:	d102      	bne.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8004c84:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004c88:	e02b      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c8e:	e028      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c90:	4b16      	ldr	r3, [pc, #88]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c9c:	d107      	bne.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fae8 	bl	8005278 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004caa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004cac:	e019      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cb2:	e016      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cb4:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cc0:	d107      	bne.n	8004cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cc2:	f107 0318 	add.w	r3, r7, #24
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 f82e 	bl	8004d28 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004cd0:	e007      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cd6:	e004      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cdc:	e001      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3740      	adds	r7, #64	; 0x40
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	58024400 	.word	0x58024400
 8004cf0:	03d09000 	.word	0x03d09000
 8004cf4:	003d0900 	.word	0x003d0900
 8004cf8:	017d7840 	.word	0x017d7840

08004cfc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d00:	f7fe fb8a 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 8004d04:	4602      	mov	r2, r0
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	091b      	lsrs	r3, r3, #4
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	4904      	ldr	r1, [pc, #16]	; (8004d24 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d12:	5ccb      	ldrb	r3, [r1, r3]
 8004d14:	f003 031f 	and.w	r3, r3, #31
 8004d18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	58024400 	.word	0x58024400
 8004d24:	0800d2d8 	.word	0x0800d2d8

08004d28 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b089      	sub	sp, #36	; 0x24
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d30:	4ba1      	ldr	r3, [pc, #644]	; (8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004d3a:	4b9f      	ldr	r3, [pc, #636]	; (8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3e:	0b1b      	lsrs	r3, r3, #12
 8004d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d44:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d46:	4b9c      	ldr	r3, [pc, #624]	; (8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	091b      	lsrs	r3, r3, #4
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004d52:	4b99      	ldr	r3, [pc, #612]	; (8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d56:	08db      	lsrs	r3, r3, #3
 8004d58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	fb02 f303 	mul.w	r3, r2, r3
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 8111 	beq.w	8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	f000 8083 	beq.w	8004e84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	f200 80a1 	bhi.w	8004ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d056      	beq.n	8004e40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004d92:	e099      	b.n	8004ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d94:	4b88      	ldr	r3, [pc, #544]	; (8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d02d      	beq.n	8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004da0:	4b85      	ldr	r3, [pc, #532]	; (8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	08db      	lsrs	r3, r3, #3
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	4a84      	ldr	r2, [pc, #528]	; (8004fbc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004dac:	fa22 f303 	lsr.w	r3, r2, r3
 8004db0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	ee07 3a90 	vmov	s15, r3
 8004db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dca:	4b7b      	ldr	r3, [pc, #492]	; (8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dde:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004dfa:	e087      	b.n	8004f0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0e:	4b6a      	ldr	r3, [pc, #424]	; (8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e22:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e3e:	e065      	b.n	8004f0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	ee07 3a90 	vmov	s15, r3
 8004e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e52:	4b59      	ldr	r3, [pc, #356]	; (8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e66:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e82:	e043      	b.n	8004f0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e96:	4b48      	ldr	r3, [pc, #288]	; (8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eaa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ec6:	e021      	b.n	8004f0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	ee07 3a90 	vmov	s15, r3
 8004ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eda:	4b37      	ldr	r3, [pc, #220]	; (8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eee:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004f0c:	4b2a      	ldr	r3, [pc, #168]	; (8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	0a5b      	lsrs	r3, r3, #9
 8004f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f26:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f32:	ee17 2a90 	vmov	r2, s15
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004f3a:	4b1f      	ldr	r3, [pc, #124]	; (8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	0c1b      	lsrs	r3, r3, #16
 8004f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f44:	ee07 3a90 	vmov	s15, r3
 8004f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f54:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f60:	ee17 2a90 	vmov	r2, s15
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004f68:	4b13      	ldr	r3, [pc, #76]	; (8004fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	0e1b      	lsrs	r3, r3, #24
 8004f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f82:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f8e:	ee17 2a90 	vmov	r2, s15
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004f96:	e008      	b.n	8004faa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	609a      	str	r2, [r3, #8]
}
 8004faa:	bf00      	nop
 8004fac:	3724      	adds	r7, #36	; 0x24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	58024400 	.word	0x58024400
 8004fbc:	03d09000 	.word	0x03d09000
 8004fc0:	46000000 	.word	0x46000000
 8004fc4:	4c742400 	.word	0x4c742400
 8004fc8:	4a742400 	.word	0x4a742400
 8004fcc:	4bbebc20 	.word	0x4bbebc20

08004fd0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b089      	sub	sp, #36	; 0x24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fd8:	4ba1      	ldr	r3, [pc, #644]	; (8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fdc:	f003 0303 	and.w	r3, r3, #3
 8004fe0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004fe2:	4b9f      	ldr	r3, [pc, #636]	; (8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe6:	0d1b      	lsrs	r3, r3, #20
 8004fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004fee:	4b9c      	ldr	r3, [pc, #624]	; (8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	0a1b      	lsrs	r3, r3, #8
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004ffa:	4b99      	ldr	r3, [pc, #612]	; (8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffe:	08db      	lsrs	r3, r3, #3
 8005000:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	fb02 f303 	mul.w	r3, r2, r3
 800500a:	ee07 3a90 	vmov	s15, r3
 800500e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005012:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 8111 	beq.w	8005240 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	2b02      	cmp	r3, #2
 8005022:	f000 8083 	beq.w	800512c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2b02      	cmp	r3, #2
 800502a:	f200 80a1 	bhi.w	8005170 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d056      	beq.n	80050e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800503a:	e099      	b.n	8005170 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800503c:	4b88      	ldr	r3, [pc, #544]	; (8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b00      	cmp	r3, #0
 8005046:	d02d      	beq.n	80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005048:	4b85      	ldr	r3, [pc, #532]	; (8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	08db      	lsrs	r3, r3, #3
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	4a84      	ldr	r2, [pc, #528]	; (8005264 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005054:	fa22 f303 	lsr.w	r3, r2, r3
 8005058:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	ee07 3a90 	vmov	s15, r3
 8005060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005072:	4b7b      	ldr	r3, [pc, #492]	; (8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800507a:	ee07 3a90 	vmov	s15, r3
 800507e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005082:	ed97 6a03 	vldr	s12, [r7, #12]
 8005086:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005268 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800508a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800508e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800509a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800509e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80050a2:	e087      	b.n	80051b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800526c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80050b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050b6:	4b6a      	ldr	r3, [pc, #424]	; (8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005268 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050e6:	e065      	b.n	80051b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80050f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050fa:	4b59      	ldr	r3, [pc, #356]	; (8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800510a:	ed97 6a03 	vldr	s12, [r7, #12]
 800510e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005268 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800511a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800511e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005126:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800512a:	e043      	b.n	80051b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005136:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005274 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800513a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800513e:	4b48      	ldr	r3, [pc, #288]	; (8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800514e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005152:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005268 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800515a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800515e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800516a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800516e:	e021      	b.n	80051b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	ee07 3a90 	vmov	s15, r3
 8005176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005270 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800517e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005182:	4b37      	ldr	r3, [pc, #220]	; (8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005192:	ed97 6a03 	vldr	s12, [r7, #12]
 8005196:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005268 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800519a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800519e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80051b4:	4b2a      	ldr	r3, [pc, #168]	; (8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	0a5b      	lsrs	r3, r3, #9
 80051ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80051d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051da:	ee17 2a90 	vmov	r2, s15
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80051e2:	4b1f      	ldr	r3, [pc, #124]	; (8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	0c1b      	lsrs	r3, r3, #16
 80051e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ec:	ee07 3a90 	vmov	s15, r3
 80051f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005208:	ee17 2a90 	vmov	r2, s15
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005210:	4b13      	ldr	r3, [pc, #76]	; (8005260 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	0e1b      	lsrs	r3, r3, #24
 8005216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005222:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005226:	ee37 7a87 	vadd.f32	s14, s15, s14
 800522a:	edd7 6a07 	vldr	s13, [r7, #28]
 800522e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005236:	ee17 2a90 	vmov	r2, s15
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800523e:	e008      	b.n	8005252 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	609a      	str	r2, [r3, #8]
}
 8005252:	bf00      	nop
 8005254:	3724      	adds	r7, #36	; 0x24
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	58024400 	.word	0x58024400
 8005264:	03d09000 	.word	0x03d09000
 8005268:	46000000 	.word	0x46000000
 800526c:	4c742400 	.word	0x4c742400
 8005270:	4a742400 	.word	0x4a742400
 8005274:	4bbebc20 	.word	0x4bbebc20

08005278 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005278:	b480      	push	{r7}
 800527a:	b089      	sub	sp, #36	; 0x24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005280:	4ba0      	ldr	r3, [pc, #640]	; (8005504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800528a:	4b9e      	ldr	r3, [pc, #632]	; (8005504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	091b      	lsrs	r3, r3, #4
 8005290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005294:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005296:	4b9b      	ldr	r3, [pc, #620]	; (8005504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80052a0:	4b98      	ldr	r3, [pc, #608]	; (8005504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a4:	08db      	lsrs	r3, r3, #3
 80052a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	fb02 f303 	mul.w	r3, r2, r3
 80052b0:	ee07 3a90 	vmov	s15, r3
 80052b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 8111 	beq.w	80054e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	f000 8083 	beq.w	80053d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	f200 80a1 	bhi.w	8005416 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d056      	beq.n	800538e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80052e0:	e099      	b.n	8005416 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052e2:	4b88      	ldr	r3, [pc, #544]	; (8005504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d02d      	beq.n	800534a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052ee:	4b85      	ldr	r3, [pc, #532]	; (8005504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	08db      	lsrs	r3, r3, #3
 80052f4:	f003 0303 	and.w	r3, r3, #3
 80052f8:	4a83      	ldr	r2, [pc, #524]	; (8005508 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80052fa:	fa22 f303 	lsr.w	r3, r2, r3
 80052fe:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	ee07 3a90 	vmov	s15, r3
 8005310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005314:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005318:	4b7a      	ldr	r3, [pc, #488]	; (8005504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005320:	ee07 3a90 	vmov	s15, r3
 8005324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005328:	ed97 6a03 	vldr	s12, [r7, #12]
 800532c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800550c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005330:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005334:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005338:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800533c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005344:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005348:	e087      	b.n	800545a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	ee07 3a90 	vmov	s15, r3
 8005350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005354:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005510 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005358:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800535c:	4b69      	ldr	r3, [pc, #420]	; (8005504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005364:	ee07 3a90 	vmov	s15, r3
 8005368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800536c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005370:	eddf 5a66 	vldr	s11, [pc, #408]	; 800550c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005374:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005378:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800537c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005380:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005388:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800538c:	e065      	b.n	800545a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	ee07 3a90 	vmov	s15, r3
 8005394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005398:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005514 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800539c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053a0:	4b58      	ldr	r3, [pc, #352]	; (8005504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a8:	ee07 3a90 	vmov	s15, r3
 80053ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80053b4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800550c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80053b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053d0:	e043      	b.n	800545a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	ee07 3a90 	vmov	s15, r3
 80053d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053dc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005518 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80053e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053e4:	4b47      	ldr	r3, [pc, #284]	; (8005504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ec:	ee07 3a90 	vmov	s15, r3
 80053f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80053f8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800550c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80053fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005400:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005408:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800540c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005410:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005414:	e021      	b.n	800545a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	ee07 3a90 	vmov	s15, r3
 800541c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005420:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005510 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005424:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005428:	4b36      	ldr	r3, [pc, #216]	; (8005504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005430:	ee07 3a90 	vmov	s15, r3
 8005434:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005438:	ed97 6a03 	vldr	s12, [r7, #12]
 800543c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800550c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005440:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005444:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005448:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800544c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005454:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005458:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800545a:	4b2a      	ldr	r3, [pc, #168]	; (8005504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	0a5b      	lsrs	r3, r3, #9
 8005460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005464:	ee07 3a90 	vmov	s15, r3
 8005468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005470:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005474:	edd7 6a07 	vldr	s13, [r7, #28]
 8005478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800547c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005480:	ee17 2a90 	vmov	r2, s15
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005488:	4b1e      	ldr	r3, [pc, #120]	; (8005504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548c:	0c1b      	lsrs	r3, r3, #16
 800548e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005492:	ee07 3a90 	vmov	s15, r3
 8005496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800549e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80054a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ae:	ee17 2a90 	vmov	r2, s15
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80054b6:	4b13      	ldr	r3, [pc, #76]	; (8005504 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ba:	0e1b      	lsrs	r3, r3, #24
 80054bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054c0:	ee07 3a90 	vmov	s15, r3
 80054c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80054d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054dc:	ee17 2a90 	vmov	r2, s15
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80054e4:	e008      	b.n	80054f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	609a      	str	r2, [r3, #8]
}
 80054f8:	bf00      	nop
 80054fa:	3724      	adds	r7, #36	; 0x24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	58024400 	.word	0x58024400
 8005508:	03d09000 	.word	0x03d09000
 800550c:	46000000 	.word	0x46000000
 8005510:	4c742400 	.word	0x4c742400
 8005514:	4a742400 	.word	0x4a742400
 8005518:	4bbebc20 	.word	0x4bbebc20

0800551c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800552a:	4b53      	ldr	r3, [pc, #332]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	2b03      	cmp	r3, #3
 8005534:	d101      	bne.n	800553a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e099      	b.n	800566e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800553a:	4b4f      	ldr	r3, [pc, #316]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a4e      	ldr	r2, [pc, #312]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005540:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005546:	f7fb fe77 	bl	8001238 <HAL_GetTick>
 800554a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800554c:	e008      	b.n	8005560 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800554e:	f7fb fe73 	bl	8001238 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e086      	b.n	800566e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005560:	4b45      	ldr	r3, [pc, #276]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1f0      	bne.n	800554e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800556c:	4b42      	ldr	r3, [pc, #264]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	031b      	lsls	r3, r3, #12
 800557a:	493f      	ldr	r1, [pc, #252]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 800557c:	4313      	orrs	r3, r2
 800557e:	628b      	str	r3, [r1, #40]	; 0x28
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	3b01      	subs	r3, #1
 8005586:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	3b01      	subs	r3, #1
 8005590:	025b      	lsls	r3, r3, #9
 8005592:	b29b      	uxth	r3, r3
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	3b01      	subs	r3, #1
 800559c:	041b      	lsls	r3, r3, #16
 800559e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	061b      	lsls	r3, r3, #24
 80055ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055b0:	4931      	ldr	r1, [pc, #196]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80055b6:	4b30      	ldr	r3, [pc, #192]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	492d      	ldr	r1, [pc, #180]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80055c8:	4b2b      	ldr	r3, [pc, #172]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	f023 0220 	bic.w	r2, r3, #32
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	4928      	ldr	r1, [pc, #160]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80055da:	4b27      	ldr	r3, [pc, #156]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	4a26      	ldr	r2, [pc, #152]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055e0:	f023 0310 	bic.w	r3, r3, #16
 80055e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80055e6:	4b24      	ldr	r3, [pc, #144]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055ea:	4b24      	ldr	r3, [pc, #144]	; (800567c <RCCEx_PLL2_Config+0x160>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	69d2      	ldr	r2, [r2, #28]
 80055f2:	00d2      	lsls	r2, r2, #3
 80055f4:	4920      	ldr	r1, [pc, #128]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80055fa:	4b1f      	ldr	r3, [pc, #124]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 80055fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fe:	4a1e      	ldr	r2, [pc, #120]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005600:	f043 0310 	orr.w	r3, r3, #16
 8005604:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d106      	bne.n	800561a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800560c:	4b1a      	ldr	r3, [pc, #104]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	4a19      	ldr	r2, [pc, #100]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005612:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005616:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005618:	e00f      	b.n	800563a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d106      	bne.n	800562e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005620:	4b15      	ldr	r3, [pc, #84]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	4a14      	ldr	r2, [pc, #80]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800562a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800562c:	e005      	b.n	800563a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800562e:	4b12      	ldr	r3, [pc, #72]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	4a11      	ldr	r2, [pc, #68]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005634:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005638:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800563a:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a0e      	ldr	r2, [pc, #56]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005640:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005646:	f7fb fdf7 	bl	8001238 <HAL_GetTick>
 800564a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800564c:	e008      	b.n	8005660 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800564e:	f7fb fdf3 	bl	8001238 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e006      	b.n	800566e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005660:	4b05      	ldr	r3, [pc, #20]	; (8005678 <RCCEx_PLL2_Config+0x15c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800566c:	7bfb      	ldrb	r3, [r7, #15]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	58024400 	.word	0x58024400
 800567c:	ffff0007 	.word	0xffff0007

08005680 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800568e:	4b53      	ldr	r3, [pc, #332]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	2b03      	cmp	r3, #3
 8005698:	d101      	bne.n	800569e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e099      	b.n	80057d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800569e:	4b4f      	ldr	r3, [pc, #316]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a4e      	ldr	r2, [pc, #312]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 80056a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056aa:	f7fb fdc5 	bl	8001238 <HAL_GetTick>
 80056ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056b0:	e008      	b.n	80056c4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80056b2:	f7fb fdc1 	bl	8001238 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e086      	b.n	80057d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056c4:	4b45      	ldr	r3, [pc, #276]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1f0      	bne.n	80056b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80056d0:	4b42      	ldr	r3, [pc, #264]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 80056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	051b      	lsls	r3, r3, #20
 80056de:	493f      	ldr	r1, [pc, #252]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	628b      	str	r3, [r1, #40]	; 0x28
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	025b      	lsls	r3, r3, #9
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	431a      	orrs	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	3b01      	subs	r3, #1
 8005700:	041b      	lsls	r3, r3, #16
 8005702:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	3b01      	subs	r3, #1
 800570e:	061b      	lsls	r3, r3, #24
 8005710:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005714:	4931      	ldr	r1, [pc, #196]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005716:	4313      	orrs	r3, r2
 8005718:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800571a:	4b30      	ldr	r3, [pc, #192]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	492d      	ldr	r1, [pc, #180]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005728:	4313      	orrs	r3, r2
 800572a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800572c:	4b2b      	ldr	r3, [pc, #172]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 800572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005730:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	4928      	ldr	r1, [pc, #160]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 800573a:	4313      	orrs	r3, r2
 800573c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800573e:	4b27      	ldr	r3, [pc, #156]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	4a26      	ldr	r2, [pc, #152]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005748:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800574a:	4b24      	ldr	r3, [pc, #144]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 800574c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800574e:	4b24      	ldr	r3, [pc, #144]	; (80057e0 <RCCEx_PLL3_Config+0x160>)
 8005750:	4013      	ands	r3, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	69d2      	ldr	r2, [r2, #28]
 8005756:	00d2      	lsls	r2, r2, #3
 8005758:	4920      	ldr	r1, [pc, #128]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 800575a:	4313      	orrs	r3, r2
 800575c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800575e:	4b1f      	ldr	r3, [pc, #124]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	4a1e      	ldr	r2, [pc, #120]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005768:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d106      	bne.n	800577e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005770:	4b1a      	ldr	r3, [pc, #104]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	4a19      	ldr	r2, [pc, #100]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005776:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800577a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800577c:	e00f      	b.n	800579e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d106      	bne.n	8005792 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005784:	4b15      	ldr	r3, [pc, #84]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	4a14      	ldr	r2, [pc, #80]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 800578a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800578e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005790:	e005      	b.n	800579e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005792:	4b12      	ldr	r3, [pc, #72]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	4a11      	ldr	r2, [pc, #68]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 8005798:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800579c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800579e:	4b0f      	ldr	r3, [pc, #60]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a0e      	ldr	r2, [pc, #56]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 80057a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057aa:	f7fb fd45 	bl	8001238 <HAL_GetTick>
 80057ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057b0:	e008      	b.n	80057c4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80057b2:	f7fb fd41 	bl	8001238 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e006      	b.n	80057d2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057c4:	4b05      	ldr	r3, [pc, #20]	; (80057dc <RCCEx_PLL3_Config+0x15c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0f0      	beq.n	80057b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	58024400 	.word	0x58024400
 80057e0:	ffff0007 	.word	0xffff0007

080057e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08a      	sub	sp, #40	; 0x28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e075      	b.n	80058e2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d105      	bne.n	800580e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7fb fac7 	bl	8000d9c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2203      	movs	r2, #3
 8005812:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f868 	bl	80058ec <HAL_SD_InitCard>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e05d      	b.n	80058e2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005826:	f107 0308 	add.w	r3, r7, #8
 800582a:	4619      	mov	r1, r3
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fda5 	bl	800637c <HAL_SD_GetCardStatus>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e052      	b.n	80058e2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800583c:	7e3b      	ldrb	r3, [r7, #24]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005842:	7e7b      	ldrb	r3, [r7, #25]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	2b01      	cmp	r3, #1
 800584e:	d10a      	bne.n	8005866 <HAL_SD_Init+0x82>
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	2b00      	cmp	r3, #0
 8005854:	d102      	bne.n	800585c <HAL_SD_Init+0x78>
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d004      	beq.n	8005866 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005862:	659a      	str	r2, [r3, #88]	; 0x58
 8005864:	e00b      	b.n	800587e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586a:	2b01      	cmp	r3, #1
 800586c:	d104      	bne.n	8005878 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005874:	659a      	str	r2, [r3, #88]	; 0x58
 8005876:	e002      	b.n	800587e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 fe5b 	bl	8006540 <HAL_SD_ConfigWideBusOperation>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e026      	b.n	80058e2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005894:	f7fb fcd0 	bl	8001238 <HAL_GetTick>
 8005898:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800589a:	e011      	b.n	80058c0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800589c:	f7fb fccc 	bl	8001238 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058aa:	d109      	bne.n	80058c0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80058b2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e010      	b.n	80058e2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 ff4d 	bl	8006760 <HAL_SD_GetCardState>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d1e7      	bne.n	800589c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3728      	adds	r7, #40	; 0x28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80058ec:	b590      	push	{r4, r7, lr}
 80058ee:	b08d      	sub	sp, #52	; 0x34
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80058f8:	2300      	movs	r3, #0
 80058fa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80058fc:	2300      	movs	r3, #0
 80058fe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005900:	2300      	movs	r3, #0
 8005902:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005904:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005908:	f7fe fd26 	bl	8004358 <HAL_RCCEx_GetPeriphCLKFreq>
 800590c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	2b00      	cmp	r3, #0
 8005912:	d109      	bne.n	8005928 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005922:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e06a      	b.n	80059fe <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	0a1b      	lsrs	r3, r3, #8
 800592c:	4a36      	ldr	r2, [pc, #216]	; (8005a08 <HAL_SD_InitCard+0x11c>)
 800592e:	fba2 2303 	umull	r2, r3, r2, r3
 8005932:	091b      	lsrs	r3, r3, #4
 8005934:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681c      	ldr	r4, [r3, #0]
 800593a:	466a      	mov	r2, sp
 800593c:	f107 0318 	add.w	r3, r7, #24
 8005940:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005944:	e882 0003 	stmia.w	r2, {r0, r1}
 8005948:	f107 030c 	add.w	r3, r7, #12
 800594c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800594e:	4620      	mov	r0, r4
 8005950:	f001 fb82 	bl	8007058 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f001 fbc5 	bl	80070e8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005964:	fbb2 f3f3 	udiv	r3, r2, r3
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800596a:	4a28      	ldr	r2, [pc, #160]	; (8005a0c <HAL_SD_InitCard+0x120>)
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005972:	3301      	adds	r3, #1
 8005974:	4618      	mov	r0, r3
 8005976:	f7fb fc6b 	bl	8001250 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 ffcc 	bl	8006918 <SD_PowerON>
 8005980:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00b      	beq.n	80059a0 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e02e      	b.n	80059fe <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fefd 	bl	80067a0 <SD_InitCard>
 80059a6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00b      	beq.n	80059c6 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e01b      	b.n	80059fe <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059ce:	4618      	mov	r0, r3
 80059d0:	f001 fc20 	bl	8007214 <SDMMC_CmdBlockLength>
 80059d4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00f      	beq.n	80059fc <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a0b      	ldr	r2, [pc, #44]	; (8005a10 <HAL_SD_InitCard+0x124>)
 80059e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e000      	b.n	80059fe <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	372c      	adds	r7, #44	; 0x2c
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd90      	pop	{r4, r7, pc}
 8005a06:	bf00      	nop
 8005a08:	014f8b59 	.word	0x014f8b59
 8005a0c:	00012110 	.word	0x00012110
 8005a10:	1fe00fff 	.word	0x1fe00fff

08005a14 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b08c      	sub	sp, #48	; 0x30
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d107      	bne.n	8005a3c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e08d      	b.n	8005b58 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	f040 8086 	bne.w	8005b56 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	441a      	add	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d907      	bls.n	8005a6e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e074      	b.n	8005b58 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2203      	movs	r2, #3
 8005a72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	025a      	lsls	r2, r3, #9
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d002      	beq.n	8005a9a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8005a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a96:	025b      	lsls	r3, r3, #9
 8005a98:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a9e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	025b      	lsls	r3, r3, #9
 8005aa4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005aa6:	2390      	movs	r3, #144	; 0x90
 8005aa8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005aaa:	2302      	movs	r3, #2
 8005aac:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f107 0210 	add.w	r2, r7, #16
 8005abe:	4611      	mov	r1, r2
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f001 fb7b 	bl	80071bc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ad4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d90a      	bls.n	8005b02 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2282      	movs	r2, #130	; 0x82
 8005af0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005af8:	4618      	mov	r0, r3
 8005afa:	f001 fbd1 	bl	80072a0 <SDMMC_CmdReadMultiBlock>
 8005afe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005b00:	e009      	b.n	8005b16 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2281      	movs	r2, #129	; 0x81
 8005b06:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f001 fba3 	bl	800725a <SDMMC_CmdReadSingleBlock>
 8005b14:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d012      	beq.n	8005b42 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a0f      	ldr	r2, [pc, #60]	; (8005b60 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e00a      	b.n	8005b58 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005b50:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e000      	b.n	8005b58 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005b56:	2302      	movs	r3, #2
  }
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3730      	adds	r7, #48	; 0x30
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	1fe00fff 	.word	0x1fe00fff

08005b64 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08c      	sub	sp, #48	; 0x30
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d107      	bne.n	8005b8c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b80:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e08d      	b.n	8005ca8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	f040 8086 	bne.w	8005ca6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	441a      	add	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d907      	bls.n	8005bbe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e074      	b.n	8005ca8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	025a      	lsls	r2, r3, #9
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d002      	beq.n	8005bea <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	025b      	lsls	r3, r3, #9
 8005be8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005bea:	f04f 33ff 	mov.w	r3, #4294967295
 8005bee:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	025b      	lsls	r3, r3, #9
 8005bf4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005bf6:	2390      	movs	r3, #144	; 0x90
 8005bf8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005c02:	2300      	movs	r3, #0
 8005c04:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f107 0210 	add.w	r2, r7, #16
 8005c0e:	4611      	mov	r1, r2
 8005c10:	4618      	mov	r0, r3
 8005c12:	f001 fad3 	bl	80071bc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c24:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2201      	movs	r2, #1
 8005c34:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d90a      	bls.n	8005c52 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	22a0      	movs	r2, #160	; 0xa0
 8005c40:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f001 fb6f 	bl	800732c <SDMMC_CmdWriteMultiBlock>
 8005c4e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005c50:	e009      	b.n	8005c66 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2290      	movs	r2, #144	; 0x90
 8005c56:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f001 fb41 	bl	80072e6 <SDMMC_CmdWriteSingleBlock>
 8005c64:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d012      	beq.n	8005c92 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a0f      	ldr	r2, [pc, #60]	; (8005cb0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8005c72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e00a      	b.n	8005ca8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8005ca0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e000      	b.n	8005ca8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005ca6:	2302      	movs	r3, #2
  }
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3730      	adds	r7, #48	; 0x30
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	1fe00fff 	.word	0x1fe00fff

08005cb4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d008      	beq.n	8005ce2 <HAL_SD_IRQHandler+0x2e>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f003 0308 	and.w	r3, r3, #8
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 f904 	bl	8006ee8 <SD_Read_IT>
 8005ce0:	e19a      	b.n	8006018 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 80ac 	beq.w	8005e4a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cfa:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	4b9d      	ldr	r3, [pc, #628]	; (8005f7c <HAL_SD_IRQHandler+0x2c8>)
 8005d08:	400b      	ands	r3, r1
 8005d0a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005d1a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d2a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d038      	beq.n	8005da8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d104      	bne.n	8005d4a <HAL_SD_IRQHandler+0x96>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f003 0320 	and.w	r3, r3, #32
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d011      	beq.n	8005d6e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f001 fb10 	bl	8007374 <SDMMC_CmdStopTransfer>
 8005d54:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f959 	bl	8006020 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a83      	ldr	r2, [pc, #524]	; (8005f80 <HAL_SD_IRQHandler+0x2cc>)
 8005d74:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d104      	bne.n	8005d98 <HAL_SD_IRQHandler+0xe4>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f001 ffc3 	bl	8007d24 <HAL_SD_RxCpltCallback>
 8005d9e:	e13b      	b.n	8006018 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f001 ffb5 	bl	8007d10 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005da6:	e137      	b.n	8006018 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 8132 	beq.w	8006018 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2200      	movs	r2, #0
 8005dba:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d104      	bne.n	8005de0 <HAL_SD_IRQHandler+0x12c>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f003 0320 	and.w	r3, r3, #32
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d011      	beq.n	8005e04 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f001 fac5 	bl	8007374 <SDMMC_CmdStopTransfer>
 8005dea:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d008      	beq.n	8005e04 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f90e 	bl	8006020 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f003 0310 	and.w	r3, r3, #16
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d104      	bne.n	8005e26 <HAL_SD_IRQHandler+0x172>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f001 ff72 	bl	8007d10 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d105      	bne.n	8005e42 <HAL_SD_IRQHandler+0x18e>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 80eb 	beq.w	8006018 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f001 ff6e 	bl	8007d24 <HAL_SD_RxCpltCallback>
}
 8005e48:	e0e6      	b.n	8006018 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d008      	beq.n	8005e6a <HAL_SD_IRQHandler+0x1b6>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f001 f886 	bl	8006f74 <SD_Write_IT>
 8005e68:	e0d6      	b.n	8006018 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e70:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 80a2 	beq.w	8005fbe <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d005      	beq.n	8005e94 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8c:	f043 0202 	orr.w	r2, r3, #2
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9a:	f003 0308 	and.w	r3, r3, #8
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d005      	beq.n	8005eae <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea6:	f043 0208 	orr.w	r2, r3, #8
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec0:	f043 0220 	orr.w	r2, r3, #32
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ece:	f003 0310 	and.w	r3, r3, #16
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eda:	f043 0210 	orr.w	r2, r3, #16
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a26      	ldr	r2, [pc, #152]	; (8005f80 <HAL_SD_IRQHandler+0x2cc>)
 8005ee8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005ef8:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f08:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f18:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f28:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f001 fa20 	bl	8007374 <SDMMC_CmdStopTransfer>
 8005f34:	4602      	mov	r2, r0
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f4e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f58:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00f      	beq.n	8005f84 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f854 	bl	8006020 <HAL_SD_ErrorCallback>
}
 8005f78:	e04e      	b.n	8006018 <HAL_SD_IRQHandler+0x364>
 8005f7a:	bf00      	nop
 8005f7c:	ffff3ec5 	.word	0xffff3ec5
 8005f80:	18000f3a 	.word	0x18000f3a
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d044      	beq.n	8006018 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d040      	beq.n	8006018 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005fa4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2200      	movs	r2, #0
 8005fac:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f832 	bl	8006020 <HAL_SD_ErrorCallback>
}
 8005fbc:	e02c      	b.n	8006018 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d025      	beq.n	8006018 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10c      	bne.n	8005ffe <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f001 f828 	bl	8007044 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8005ff4:	e010      	b.n	8006018 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f001 f810 	bl	800701c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8005ffc:	e00c      	b.n	8006018 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f001 f811 	bl	8007030 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800600e:	e003      	b.n	8006018 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fff9 	bl	8007008 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8006016:	e7ff      	b.n	8006018 <HAL_SD_IRQHandler+0x364>
 8006018:	bf00      	nop
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006042:	0f9b      	lsrs	r3, r3, #30
 8006044:	b2da      	uxtb	r2, r3
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604e:	0e9b      	lsrs	r3, r3, #26
 8006050:	b2db      	uxtb	r3, r3
 8006052:	f003 030f 	and.w	r3, r3, #15
 8006056:	b2da      	uxtb	r2, r3
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006060:	0e1b      	lsrs	r3, r3, #24
 8006062:	b2db      	uxtb	r3, r3
 8006064:	f003 0303 	and.w	r3, r3, #3
 8006068:	b2da      	uxtb	r2, r3
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006072:	0c1b      	lsrs	r3, r3, #16
 8006074:	b2da      	uxtb	r2, r3
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607e:	0a1b      	lsrs	r3, r3, #8
 8006080:	b2da      	uxtb	r2, r3
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608a:	b2da      	uxtb	r2, r3
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006094:	0d1b      	lsrs	r3, r3, #20
 8006096:	b29a      	uxth	r2, r3
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a0:	0c1b      	lsrs	r3, r3, #16
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f003 030f 	and.w	r3, r3, #15
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b2:	0bdb      	lsrs	r3, r3, #15
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c4:	0b9b      	lsrs	r3, r3, #14
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d6:	0b5b      	lsrs	r3, r3, #13
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e8:	0b1b      	lsrs	r3, r3, #12
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2200      	movs	r2, #0
 80060fa:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	2b00      	cmp	r3, #0
 8006102:	d163      	bne.n	80061cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006108:	009a      	lsls	r2, r3, #2
 800610a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800610e:	4013      	ands	r3, r2
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006114:	0f92      	lsrs	r2, r2, #30
 8006116:	431a      	orrs	r2, r3
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006120:	0edb      	lsrs	r3, r3, #27
 8006122:	b2db      	uxtb	r3, r3
 8006124:	f003 0307 	and.w	r3, r3, #7
 8006128:	b2da      	uxtb	r2, r3
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006132:	0e1b      	lsrs	r3, r3, #24
 8006134:	b2db      	uxtb	r3, r3
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	b2da      	uxtb	r2, r3
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006144:	0d5b      	lsrs	r3, r3, #21
 8006146:	b2db      	uxtb	r3, r3
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	b2da      	uxtb	r2, r3
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006156:	0c9b      	lsrs	r3, r3, #18
 8006158:	b2db      	uxtb	r3, r3
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	b2da      	uxtb	r2, r3
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006168:	0bdb      	lsrs	r3, r3, #15
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	b2da      	uxtb	r2, r3
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	7e1b      	ldrb	r3, [r3, #24]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	3302      	adds	r3, #2
 800618c:	2201      	movs	r2, #1
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006196:	fb02 f203 	mul.w	r2, r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	7a1b      	ldrb	r3, [r3, #8]
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	f003 030f 	and.w	r3, r3, #15
 80061a8:	2201      	movs	r2, #1
 80061aa:	409a      	lsls	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80061b8:	0a52      	lsrs	r2, r2, #9
 80061ba:	fb02 f203 	mul.w	r2, r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061c8:	655a      	str	r2, [r3, #84]	; 0x54
 80061ca:	e031      	b.n	8006230 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d11d      	bne.n	8006210 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d8:	041b      	lsls	r3, r3, #16
 80061da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061e2:	0c1b      	lsrs	r3, r3, #16
 80061e4:	431a      	orrs	r2, r3
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	3301      	adds	r3, #1
 80061f0:	029a      	lsls	r2, r3, #10
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006204:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	655a      	str	r2, [r3, #84]	; 0x54
 800620e:	e00f      	b.n	8006230 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a58      	ldr	r2, [pc, #352]	; (8006378 <HAL_SD_GetCardCSD+0x344>)
 8006216:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e09d      	b.n	800636c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006234:	0b9b      	lsrs	r3, r3, #14
 8006236:	b2db      	uxtb	r3, r3
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	b2da      	uxtb	r2, r3
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006246:	09db      	lsrs	r3, r3, #7
 8006248:	b2db      	uxtb	r3, r3
 800624a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800624e:	b2da      	uxtb	r2, r3
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006258:	b2db      	uxtb	r3, r3
 800625a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800625e:	b2da      	uxtb	r2, r3
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006268:	0fdb      	lsrs	r3, r3, #31
 800626a:	b2da      	uxtb	r2, r3
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006274:	0f5b      	lsrs	r3, r3, #29
 8006276:	b2db      	uxtb	r3, r3
 8006278:	f003 0303 	and.w	r3, r3, #3
 800627c:	b2da      	uxtb	r2, r3
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006286:	0e9b      	lsrs	r3, r3, #26
 8006288:	b2db      	uxtb	r3, r3
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	b2da      	uxtb	r2, r3
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006298:	0d9b      	lsrs	r3, r3, #22
 800629a:	b2db      	uxtb	r3, r3
 800629c:	f003 030f 	and.w	r3, r3, #15
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062aa:	0d5b      	lsrs	r3, r3, #21
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062c6:	0c1b      	lsrs	r3, r3, #16
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062da:	0bdb      	lsrs	r3, r3, #15
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ee:	0b9b      	lsrs	r3, r3, #14
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006302:	0b5b      	lsrs	r3, r3, #13
 8006304:	b2db      	uxtb	r3, r3
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	b2da      	uxtb	r2, r3
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006316:	0b1b      	lsrs	r3, r3, #12
 8006318:	b2db      	uxtb	r3, r3
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	b2da      	uxtb	r2, r3
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800632a:	0a9b      	lsrs	r3, r3, #10
 800632c:	b2db      	uxtb	r3, r3
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	b2da      	uxtb	r2, r3
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800633e:	0a1b      	lsrs	r3, r3, #8
 8006340:	b2db      	uxtb	r3, r3
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	b2da      	uxtb	r2, r3
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006352:	085b      	lsrs	r3, r3, #1
 8006354:	b2db      	uxtb	r3, r3
 8006356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800635a:	b2da      	uxtb	r2, r3
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	1fe00fff 	.word	0x1fe00fff

0800637c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b094      	sub	sp, #80	; 0x50
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800638c:	f107 0308 	add.w	r3, r7, #8
 8006390:	4619      	mov	r1, r3
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fb4a 	bl	8006a2c <SD_SendSDStatus>
 8006398:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800639a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800639c:	2b00      	cmp	r3, #0
 800639e:	d011      	beq.n	80063c4 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a4f      	ldr	r2, [pc, #316]	; (80064e4 <HAL_SD_GetCardStatus+0x168>)
 80063a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80063c2:	e070      	b.n	80064a6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	099b      	lsrs	r3, r3, #6
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	0a1b      	lsrs	r3, r3, #8
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	0e1b      	lsrs	r3, r3, #24
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	4313      	orrs	r3, r2
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	061a      	lsls	r2, r3, #24
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	021b      	lsls	r3, r3, #8
 8006406:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800640a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	0a1b      	lsrs	r3, r3, #8
 8006410:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006414:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	0e1b      	lsrs	r3, r3, #24
 800641a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	b2da      	uxtb	r2, r3
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	0a1b      	lsrs	r3, r3, #8
 800642c:	b2da      	uxtb	r2, r3
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	0d1b      	lsrs	r3, r3, #20
 8006436:	b2db      	uxtb	r3, r3
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	b2da      	uxtb	r2, r3
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	0c1b      	lsrs	r3, r3, #16
 8006446:	b29b      	uxth	r3, r3
 8006448:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800644c:	b29a      	uxth	r2, r3
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	b29b      	uxth	r3, r3
 8006452:	b2db      	uxtb	r3, r3
 8006454:	b29b      	uxth	r3, r3
 8006456:	4313      	orrs	r3, r2
 8006458:	b29a      	uxth	r2, r3
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	0a9b      	lsrs	r3, r3, #10
 8006462:	b2db      	uxtb	r3, r3
 8006464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006468:	b2da      	uxtb	r2, r3
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	0a1b      	lsrs	r3, r3, #8
 8006472:	b2db      	uxtb	r3, r3
 8006474:	f003 0303 	and.w	r3, r3, #3
 8006478:	b2da      	uxtb	r2, r3
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	091b      	lsrs	r3, r3, #4
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	b2da      	uxtb	r2, r3
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	b2db      	uxtb	r3, r3
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	b2da      	uxtb	r2, r3
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	0e1b      	lsrs	r3, r3, #24
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 feb0 	bl	8007214 <SDMMC_CmdBlockLength>
 80064b4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80064b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00d      	beq.n	80064d8 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a08      	ldr	r2, [pc, #32]	; (80064e4 <HAL_SD_GetCardStatus+0x168>)
 80064c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064c8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80064d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3750      	adds	r7, #80	; 0x50
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	1fe00fff 	.word	0x1fe00fff

080064e8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006540:	b590      	push	{r4, r7, lr}
 8006542:	b08d      	sub	sp, #52	; 0x34
 8006544:	af02      	add	r7, sp, #8
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2203      	movs	r2, #3
 8006554:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655c:	2b03      	cmp	r3, #3
 800655e:	d02e      	beq.n	80065be <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006566:	d106      	bne.n	8006576 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	635a      	str	r2, [r3, #52]	; 0x34
 8006574:	e029      	b.n	80065ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800657c:	d10a      	bne.n	8006594 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fb4c 	bl	8006c1c <SD_WideBus_Enable>
 8006584:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	635a      	str	r2, [r3, #52]	; 0x34
 8006592:	e01a      	b.n	80065ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fb89 	bl	8006cb2 <SD_WideBus_Disable>
 80065a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	635a      	str	r2, [r3, #52]	; 0x34
 80065ae:	e00c      	b.n	80065ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	635a      	str	r2, [r3, #52]	; 0x34
 80065bc:	e005      	b.n	80065ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a5e      	ldr	r2, [pc, #376]	; (8006750 <HAL_SD_ConfigWideBusOperation+0x210>)
 80065d8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80065e0:	e094      	b.n	800670c <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80065e2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80065e6:	f7fd feb7 	bl	8004358 <HAL_RCCEx_GetPeriphCLKFreq>
 80065ea:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 8083 	beq.w	80066fa <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	695a      	ldr	r2, [r3, #20]
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	4950      	ldr	r1, [pc, #320]	; (8006754 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006612:	fba1 1303 	umull	r1, r3, r1, r3
 8006616:	0e1b      	lsrs	r3, r3, #24
 8006618:	429a      	cmp	r2, r3
 800661a:	d303      	bcc.n	8006624 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	61bb      	str	r3, [r7, #24]
 8006622:	e05a      	b.n	80066da <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800662c:	d103      	bne.n	8006636 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	61bb      	str	r3, [r7, #24]
 8006634:	e051      	b.n	80066da <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800663e:	d126      	bne.n	800668e <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10e      	bne.n	8006666 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	4a43      	ldr	r2, [pc, #268]	; (8006758 <HAL_SD_ConfigWideBusOperation+0x218>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d906      	bls.n	800665e <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	4a40      	ldr	r2, [pc, #256]	; (8006754 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006654:	fba2 2303 	umull	r2, r3, r2, r3
 8006658:	0e5b      	lsrs	r3, r3, #25
 800665a:	61bb      	str	r3, [r7, #24]
 800665c:	e03d      	b.n	80066da <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	61bb      	str	r3, [r7, #24]
 8006664:	e039      	b.n	80066da <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	69fa      	ldr	r2, [r7, #28]
 800666e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006672:	4a39      	ldr	r2, [pc, #228]	; (8006758 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d906      	bls.n	8006686 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	4a36      	ldr	r2, [pc, #216]	; (8006754 <HAL_SD_ConfigWideBusOperation+0x214>)
 800667c:	fba2 2303 	umull	r2, r3, r2, r3
 8006680:	0e5b      	lsrs	r3, r3, #25
 8006682:	61bb      	str	r3, [r7, #24]
 8006684:	e029      	b.n	80066da <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	61bb      	str	r3, [r7, #24]
 800668c:	e025      	b.n	80066da <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10e      	bne.n	80066b4 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	4a30      	ldr	r2, [pc, #192]	; (800675c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d906      	bls.n	80066ac <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	4a2c      	ldr	r2, [pc, #176]	; (8006754 <HAL_SD_ConfigWideBusOperation+0x214>)
 80066a2:	fba2 2303 	umull	r2, r3, r2, r3
 80066a6:	0e1b      	lsrs	r3, r3, #24
 80066a8:	61bb      	str	r3, [r7, #24]
 80066aa:	e016      	b.n	80066da <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	61bb      	str	r3, [r7, #24]
 80066b2:	e012      	b.n	80066da <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	69fa      	ldr	r2, [r7, #28]
 80066bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c0:	4a26      	ldr	r2, [pc, #152]	; (800675c <HAL_SD_ConfigWideBusOperation+0x21c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d906      	bls.n	80066d4 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	4a22      	ldr	r2, [pc, #136]	; (8006754 <HAL_SD_ConfigWideBusOperation+0x214>)
 80066ca:	fba2 2303 	umull	r2, r3, r2, r3
 80066ce:	0e1b      	lsrs	r3, r3, #24
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	e002      	b.n	80066da <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681c      	ldr	r4, [r3, #0]
 80066de:	466a      	mov	r2, sp
 80066e0:	f107 0314 	add.w	r3, r7, #20
 80066e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80066e8:	e882 0003 	stmia.w	r2, {r0, r1}
 80066ec:	f107 0308 	add.w	r3, r7, #8
 80066f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066f2:	4620      	mov	r0, r4
 80066f4:	f000 fcb0 	bl	8007058 <SDMMC_Init>
 80066f8:	e008      	b.n	800670c <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fd7d 	bl	8007214 <SDMMC_CmdBlockLength>
 800671a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00c      	beq.n	800673c <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a0a      	ldr	r2, [pc, #40]	; (8006750 <HAL_SD_ConfigWideBusOperation+0x210>)
 8006728:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	431a      	orrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006748:	4618      	mov	r0, r3
 800674a:	372c      	adds	r7, #44	; 0x2c
 800674c:	46bd      	mov	sp, r7
 800674e:	bd90      	pop	{r4, r7, pc}
 8006750:	1fe00fff 	.word	0x1fe00fff
 8006754:	55e63b89 	.word	0x55e63b89
 8006758:	02faf080 	.word	0x02faf080
 800675c:	017d7840 	.word	0x017d7840

08006760 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800676c:	f107 030c 	add.w	r3, r7, #12
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fa2a 	bl	8006bcc <SD_SendStatus>
 8006778:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	0a5b      	lsrs	r3, r3, #9
 8006790:	f003 030f 	and.w	r3, r3, #15
 8006794:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006796:	693b      	ldr	r3, [r7, #16]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3718      	adds	r7, #24
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b090      	sub	sp, #64	; 0x40
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80067a8:	2301      	movs	r3, #1
 80067aa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 fcaa 	bl	800710a <SDMMC_GetPowerState>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d102      	bne.n	80067c2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80067bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80067c0:	e0a5      	b.n	800690e <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d02e      	beq.n	8006828 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fef5 	bl	80075be <SDMMC_CmdSendCID>
 80067d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 80067d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <SD_InitCard+0x40>
    {
      return errorstate;
 80067dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067de:	e096      	b.n	800690e <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2100      	movs	r1, #0
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fcd5 	bl	8007196 <SDMMC_GetResponse>
 80067ec:	4602      	mov	r2, r0
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2104      	movs	r1, #4
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 fccc 	bl	8007196 <SDMMC_GetResponse>
 80067fe:	4602      	mov	r2, r0
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2108      	movs	r1, #8
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fcc3 	bl	8007196 <SDMMC_GetResponse>
 8006810:	4602      	mov	r2, r0
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	210c      	movs	r1, #12
 800681c:	4618      	mov	r0, r3
 800681e:	f000 fcba 	bl	8007196 <SDMMC_GetResponse>
 8006822:	4602      	mov	r2, r0
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682c:	2b03      	cmp	r3, #3
 800682e:	d00d      	beq.n	800684c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f107 020e 	add.w	r2, r7, #14
 8006838:	4611      	mov	r1, r2
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fefe 	bl	800763c <SDMMC_CmdSetRelAdd>
 8006840:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <SD_InitCard+0xac>
    {
      return errorstate;
 8006848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800684a:	e060      	b.n	800690e <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	2b03      	cmp	r3, #3
 8006852:	d036      	beq.n	80068c2 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006854:	89fb      	ldrh	r3, [r7, #14]
 8006856:	461a      	mov	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006864:	041b      	lsls	r3, r3, #16
 8006866:	4619      	mov	r1, r3
 8006868:	4610      	mov	r0, r2
 800686a:	f000 fec7 	bl	80075fc <SDMMC_CmdSendCSD>
 800686e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8006870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <SD_InitCard+0xda>
    {
      return errorstate;
 8006876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006878:	e049      	b.n	800690e <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2100      	movs	r1, #0
 8006880:	4618      	mov	r0, r3
 8006882:	f000 fc88 	bl	8007196 <SDMMC_GetResponse>
 8006886:	4602      	mov	r2, r0
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2104      	movs	r1, #4
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fc7f 	bl	8007196 <SDMMC_GetResponse>
 8006898:	4602      	mov	r2, r0
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2108      	movs	r1, #8
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 fc76 	bl	8007196 <SDMMC_GetResponse>
 80068aa:	4602      	mov	r2, r0
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	210c      	movs	r1, #12
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fc6d 	bl	8007196 <SDMMC_GetResponse>
 80068bc:	4602      	mov	r2, r0
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2104      	movs	r1, #4
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 fc64 	bl	8007196 <SDMMC_GetResponse>
 80068ce:	4603      	mov	r3, r0
 80068d0:	0d1a      	lsrs	r2, r3, #20
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80068d6:	f107 0310 	add.w	r3, r7, #16
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7ff fba9 	bl	8006034 <HAL_SD_GetCardCSD>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80068ec:	e00f      	b.n	800690e <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f6:	041b      	lsls	r3, r3, #16
 80068f8:	4619      	mov	r1, r3
 80068fa:	4610      	mov	r0, r2
 80068fc:	f000 fd76 	bl	80073ec <SDMMC_CmdSelDesel>
 8006900:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 8006902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <SD_InitCard+0x16c>
  {
    return errorstate;
 8006908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800690a:	e000      	b.n	800690e <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3740      	adds	r7, #64	; 0x40
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4618      	mov	r0, r3
 8006932:	f000 fd7e 	bl	8007432 <SDMMC_CmdGoIdleState>
 8006936:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <SD_PowerON+0x2a>
  {
    return errorstate;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	e06e      	b.n	8006a20 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fd91 	bl	800746e <SDMMC_CmdOperCond>
 800694c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00d      	beq.n	8006970 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f000 fd67 	bl	8007432 <SDMMC_CmdGoIdleState>
 8006964:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d004      	beq.n	8006976 <SD_PowerON+0x5e>
    {
      return errorstate;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	e057      	b.n	8006a20 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800697a:	2b01      	cmp	r3, #1
 800697c:	d137      	bne.n	80069ee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2100      	movs	r1, #0
 8006984:	4618      	mov	r0, r3
 8006986:	f000 fd92 	bl	80074ae <SDMMC_CmdAppCommand>
 800698a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d02d      	beq.n	80069ee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006992:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006996:	e043      	b.n	8006a20 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2100      	movs	r1, #0
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fd85 	bl	80074ae <SDMMC_CmdAppCommand>
 80069a4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <SD_PowerON+0x98>
    {
      return errorstate;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	e037      	b.n	8006a20 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	491c      	ldr	r1, [pc, #112]	; (8006a28 <SD_PowerON+0x110>)
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fd9c 	bl	80074f4 <SDMMC_CmdAppOperCommand>
 80069bc:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80069c8:	e02a      	b.n	8006a20 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2100      	movs	r1, #0
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 fbe0 	bl	8007196 <SDMMC_GetResponse>
 80069d6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	0fdb      	lsrs	r3, r3, #31
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d101      	bne.n	80069e4 <SD_PowerON+0xcc>
 80069e0:	2301      	movs	r3, #1
 80069e2:	e000      	b.n	80069e6 <SD_PowerON+0xce>
 80069e4:	2300      	movs	r3, #0
 80069e6:	613b      	str	r3, [r7, #16]

    count++;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	3301      	adds	r3, #1
 80069ec:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d802      	bhi.n	80069fe <SD_PowerON+0xe6>
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0cc      	beq.n	8006998 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d902      	bls.n	8006a0e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006a08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a0c:	e008      	b.n	8006a20 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3718      	adds	r7, #24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	c1100000 	.word	0xc1100000

08006a2c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b08c      	sub	sp, #48	; 0x30
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006a36:	f7fa fbff 	bl	8001238 <HAL_GetTick>
 8006a3a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2100      	movs	r1, #0
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fba5 	bl	8007196 <SDMMC_GetResponse>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a56:	d102      	bne.n	8006a5e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006a58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a5c:	e0b0      	b.n	8006bc0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2140      	movs	r1, #64	; 0x40
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fbd5 	bl	8007214 <SDMMC_CmdBlockLength>
 8006a6a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d005      	beq.n	8006a7e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	e0a0      	b.n	8006bc0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a86:	041b      	lsls	r3, r3, #16
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	f000 fd0f 	bl	80074ae <SDMMC_CmdAppCommand>
 8006a90:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d005      	beq.n	8006aa4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	e08d      	b.n	8006bc0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006aaa:	2340      	movs	r3, #64	; 0x40
 8006aac:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006aae:	2360      	movs	r3, #96	; 0x60
 8006ab0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006aba:	2301      	movs	r3, #1
 8006abc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f107 0208 	add.w	r2, r7, #8
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 fb77 	bl	80071bc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 fdf7 	bl	80076c6 <SDMMC_CmdStatusRegister>
 8006ad8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d02b      	beq.n	8006b38 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	e069      	b.n	8006bc0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d013      	beq.n	8006b22 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8006afa:	2300      	movs	r3, #0
 8006afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006afe:	e00d      	b.n	8006b1c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 fad1 	bl	80070ac <SDMMC_ReadFIFO>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	601a      	str	r2, [r3, #0]
        pData++;
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	3304      	adds	r3, #4
 8006b14:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8006b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b18:	3301      	adds	r3, #1
 8006b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1e:	2b07      	cmp	r3, #7
 8006b20:	d9ee      	bls.n	8006b00 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006b22:	f7fa fb89 	bl	8001238 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b30:	d102      	bne.n	8006b38 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006b32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b36:	e043      	b.n	8006bc0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b3e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d0d2      	beq.n	8006aec <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4c:	f003 0308 	and.w	r3, r3, #8
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d001      	beq.n	8006b58 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006b54:	2308      	movs	r3, #8
 8006b56:	e033      	b.n	8006bc0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b66:	2302      	movs	r3, #2
 8006b68:	e02a      	b.n	8006bc0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b70:	f003 0320 	and.w	r3, r3, #32
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d017      	beq.n	8006ba8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006b78:	2320      	movs	r3, #32
 8006b7a:	e021      	b.n	8006bc0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 fa93 	bl	80070ac <SDMMC_ReadFIFO>
 8006b86:	4602      	mov	r2, r0
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	601a      	str	r2, [r3, #0]
    pData++;
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	3304      	adds	r3, #4
 8006b90:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006b92:	f7fa fb51 	bl	8001238 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba0:	d102      	bne.n	8006ba8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006ba2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ba6:	e00b      	b.n	8006bc0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e2      	bne.n	8006b7c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a03      	ldr	r2, [pc, #12]	; (8006bc8 <SD_SendSDStatus+0x19c>)
 8006bbc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3730      	adds	r7, #48	; 0x30
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	18000f3a 	.word	0x18000f3a

08006bcc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d102      	bne.n	8006be2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006bdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006be0:	e018      	b.n	8006c14 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bea:	041b      	lsls	r3, r3, #16
 8006bec:	4619      	mov	r1, r3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	f000 fd46 	bl	8007680 <SDMMC_CmdSendStatus>
 8006bf4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	e009      	b.n	8006c14 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2100      	movs	r1, #0
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 fac5 	bl	8007196 <SDMMC_GetResponse>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]
 8006c28:	2300      	movs	r3, #0
 8006c2a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2100      	movs	r1, #0
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 faaf 	bl	8007196 <SDMMC_GetResponse>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c42:	d102      	bne.n	8006c4a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c48:	e02f      	b.n	8006caa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006c4a:	f107 030c 	add.w	r3, r7, #12
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 f879 	bl	8006d48 <SD_FindSCR>
 8006c56:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	e023      	b.n	8006caa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01c      	beq.n	8006ca6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c74:	041b      	lsls	r3, r3, #16
 8006c76:	4619      	mov	r1, r3
 8006c78:	4610      	mov	r0, r2
 8006c7a:	f000 fc18 	bl	80074ae <SDMMC_CmdAppCommand>
 8006c7e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	e00f      	b.n	8006caa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2102      	movs	r1, #2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 fc4f 	bl	8007534 <SDMMC_CmdBusWidth>
 8006c96:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	e003      	b.n	8006caa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	e001      	b.n	8006caa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006ca6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b086      	sub	sp, #24
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 fa64 	bl	8007196 <SDMMC_GetResponse>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cd8:	d102      	bne.n	8006ce0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006cda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006cde:	e02f      	b.n	8006d40 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006ce0:	f107 030c 	add.w	r3, r7, #12
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f82e 	bl	8006d48 <SD_FindSCR>
 8006cec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	e023      	b.n	8006d40 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d01c      	beq.n	8006d3c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0a:	041b      	lsls	r3, r3, #16
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	4610      	mov	r0, r2
 8006d10:	f000 fbcd 	bl	80074ae <SDMMC_CmdAppCommand>
 8006d14:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	e00f      	b.n	8006d40 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2100      	movs	r1, #0
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 fc04 	bl	8007534 <SDMMC_CmdBusWidth>
 8006d2c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	e003      	b.n	8006d40 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	e001      	b.n	8006d40 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d3c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3718      	adds	r7, #24
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08e      	sub	sp, #56	; 0x38
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006d52:	f7fa fa71 	bl	8001238 <HAL_GetTick>
 8006d56:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60bb      	str	r3, [r7, #8]
 8006d60:	2300      	movs	r3, #0
 8006d62:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2108      	movs	r1, #8
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 fa50 	bl	8007214 <SDMMC_CmdBlockLength>
 8006d74:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	e0ad      	b.n	8006edc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d88:	041b      	lsls	r3, r3, #16
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	f000 fb8e 	bl	80074ae <SDMMC_CmdAppCommand>
 8006d92:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <SD_FindSCR+0x56>
  {
    return errorstate;
 8006d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9c:	e09e      	b.n	8006edc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006da2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006da4:	2308      	movs	r3, #8
 8006da6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006da8:	2330      	movs	r3, #48	; 0x30
 8006daa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006dac:	2302      	movs	r3, #2
 8006dae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006db4:	2301      	movs	r3, #1
 8006db6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f107 0210 	add.w	r2, r7, #16
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 f9fa 	bl	80071bc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fbd4 	bl	800757a <SDMMC_CmdSendSCR>
 8006dd2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d027      	beq.n	8006e2a <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ddc:	e07e      	b.n	8006edc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d113      	bne.n	8006e14 <SD_FindSCR+0xcc>
 8006dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d110      	bne.n	8006e14 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 f958 	bl	80070ac <SDMMC_ReadFIFO>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 f951 	bl	80070ac <SDMMC_ReadFIFO>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	60fb      	str	r3, [r7, #12]
      index++;
 8006e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e10:	3301      	adds	r3, #1
 8006e12:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006e14:	f7fa fa10 	bl	8001238 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e22:	d102      	bne.n	8006e2a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006e24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e28:	e058      	b.n	8006edc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e30:	f240 532a 	movw	r3, #1322	; 0x52a
 8006e34:	4013      	ands	r3, r2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0d1      	beq.n	8006dde <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e40:	f003 0308 	and.w	r3, r3, #8
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d005      	beq.n	8006e54 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2208      	movs	r2, #8
 8006e4e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006e50:	2308      	movs	r3, #8
 8006e52:	e043      	b.n	8006edc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d005      	beq.n	8006e6e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2202      	movs	r2, #2
 8006e68:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e036      	b.n	8006edc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e74:	f003 0320 	and.w	r3, r3, #32
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d005      	beq.n	8006e88 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2220      	movs	r2, #32
 8006e82:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006e84:	2320      	movs	r3, #32
 8006e86:	e029      	b.n	8006edc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a15      	ldr	r2, [pc, #84]	; (8006ee4 <SD_FindSCR+0x19c>)
 8006e8e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	061a      	lsls	r2, r3, #24
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	021b      	lsls	r3, r3, #8
 8006e98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e9c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	0a1b      	lsrs	r3, r3, #8
 8006ea2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006ea6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	0e1b      	lsrs	r3, r3, #24
 8006eac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb0:	601a      	str	r2, [r3, #0]
    scr++;
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	061a      	lsls	r2, r3, #24
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ec4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	0a1b      	lsrs	r3, r3, #8
 8006eca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006ece:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	0e1b      	lsrs	r3, r3, #24
 8006ed4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3738      	adds	r7, #56	; 0x38
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	18000f3a 	.word	0x18000f3a

08006ee8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efa:	2b1f      	cmp	r3, #31
 8006efc:	d936      	bls.n	8006f6c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8006efe:	2300      	movs	r3, #0
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	e027      	b.n	8006f54 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 f8cf 	bl	80070ac <SDMMC_ReadFIFO>
 8006f0e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	0a1b      	lsrs	r3, r3, #8
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	0c1b      	lsrs	r3, r3, #16
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	0e1b      	lsrs	r3, r3, #24
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	3301      	adds	r3, #1
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2b07      	cmp	r3, #7
 8006f58:	d9d4      	bls.n	8006f04 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f64:	f1a3 0220 	sub.w	r2, r3, #32
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8006f6c:	bf00      	nop
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	2b1f      	cmp	r3, #31
 8006f88:	d93a      	bls.n	8007000 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	617b      	str	r3, [r7, #20]
 8006f8e:	e02b      	b.n	8006fe8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	021a      	lsls	r2, r3, #8
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	3301      	adds	r3, #1
 8006fac:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	041a      	lsls	r2, r3, #16
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	061a      	lsls	r2, r3, #24
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]
      tmp++;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f107 020c 	add.w	r2, r7, #12
 8006fda:	4611      	mov	r1, r2
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f000 f872 	bl	80070c6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	617b      	str	r3, [r7, #20]
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2b07      	cmp	r3, #7
 8006fec:	d9d0      	bls.n	8006f90 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	f1a3 0220 	sub.w	r2, r3, #32
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	621a      	str	r2, [r3, #32]
  }
}
 8007000:	bf00      	nop
 8007002:	3718      	adds	r7, #24
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007058:	b084      	sub	sp, #16
 800705a:	b480      	push	{r7}
 800705c:	b085      	sub	sp, #20
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	f107 001c 	add.w	r0, r7, #28
 8007066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800706a:	2300      	movs	r3, #0
 800706c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800706e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8007070:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8007072:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8007076:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8007078:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800707a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800707e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	4b07      	ldr	r3, [pc, #28]	; (80070a8 <SDMMC_Init+0x50>)
 800708c:	4013      	ands	r3, r2
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	431a      	orrs	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	b004      	add	sp, #16
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	ffc02c00 	.word	0xffc02c00

080070ac <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f043 0203 	orr.w	r2, r3, #3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800710a:	b480      	push	{r7}
 800710c:	b083      	sub	sp, #12
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0303 	and.w	r3, r3, #3
}
 800711a:	4618      	mov	r0, r3
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
	...

08007128 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007132:	2300      	movs	r3, #0
 8007134:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007146:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800714c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8007152:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	4b06      	ldr	r3, [pc, #24]	; (8007178 <SDMMC_SendCommand+0x50>)
 8007160:	4013      	ands	r3, r2
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	431a      	orrs	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	fffee0c0 	.word	0xfffee0c0

0800717c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	b2db      	uxtb	r3, r3
}
 800718a:	4618      	mov	r0, r3
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007196:	b480      	push	{r7}
 8007198:	b085      	sub	sp, #20
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	3314      	adds	r3, #20
 80071a4:	461a      	mov	r2, r3
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	4413      	add	r3, r2
 80071aa:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80071e2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80071e8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80071ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	431a      	orrs	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007206:	2300      	movs	r3, #0

}
 8007208:	4618      	mov	r0, r3
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007222:	2310      	movs	r3, #16
 8007224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007226:	f44f 7380 	mov.w	r3, #256	; 0x100
 800722a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800722c:	2300      	movs	r3, #0
 800722e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007234:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007236:	f107 0308 	add.w	r3, r7, #8
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff ff73 	bl	8007128 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007242:	f241 3288 	movw	r2, #5000	; 0x1388
 8007246:	2110      	movs	r1, #16
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fa5f 	bl	800770c <SDMMC_GetCmdResp1>
 800724e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007250:	69fb      	ldr	r3, [r7, #28]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3720      	adds	r7, #32
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b088      	sub	sp, #32
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007268:	2311      	movs	r3, #17
 800726a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800726c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007270:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007272:	2300      	movs	r3, #0
 8007274:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800727a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800727c:	f107 0308 	add.w	r3, r7, #8
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7ff ff50 	bl	8007128 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007288:	f241 3288 	movw	r2, #5000	; 0x1388
 800728c:	2111      	movs	r1, #17
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa3c 	bl	800770c <SDMMC_GetCmdResp1>
 8007294:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007296:	69fb      	ldr	r3, [r7, #28]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3720      	adds	r7, #32
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80072ae:	2312      	movs	r3, #18
 80072b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072b8:	2300      	movs	r3, #0
 80072ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072c2:	f107 0308 	add.w	r3, r7, #8
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7ff ff2d 	bl	8007128 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80072ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d2:	2112      	movs	r1, #18
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fa19 	bl	800770c <SDMMC_GetCmdResp1>
 80072da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072dc:	69fb      	ldr	r3, [r7, #28]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3720      	adds	r7, #32
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b088      	sub	sp, #32
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80072f4:	2318      	movs	r3, #24
 80072f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072fe:	2300      	movs	r3, #0
 8007300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007306:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007308:	f107 0308 	add.w	r3, r7, #8
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff ff0a 	bl	8007128 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007314:	f241 3288 	movw	r2, #5000	; 0x1388
 8007318:	2118      	movs	r1, #24
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f9f6 	bl	800770c <SDMMC_GetCmdResp1>
 8007320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007322:	69fb      	ldr	r3, [r7, #28]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3720      	adds	r7, #32
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b088      	sub	sp, #32
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800733a:	2319      	movs	r3, #25
 800733c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800733e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007342:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007344:	2300      	movs	r3, #0
 8007346:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800734c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800734e:	f107 0308 	add.w	r3, r7, #8
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7ff fee7 	bl	8007128 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800735a:	f241 3288 	movw	r2, #5000	; 0x1388
 800735e:	2119      	movs	r1, #25
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f9d3 	bl	800770c <SDMMC_GetCmdResp1>
 8007366:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007368:	69fb      	ldr	r3, [r7, #28]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3720      	adds	r7, #32
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
	...

08007374 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b088      	sub	sp, #32
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800737c:	2300      	movs	r3, #0
 800737e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007380:	230c      	movs	r3, #12
 8007382:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800738a:	2300      	movs	r3, #0
 800738c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800738e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007392:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073ac:	f107 0308 	add.w	r3, r7, #8
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7ff feb8 	bl	8007128 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80073b8:	4a0b      	ldr	r2, [pc, #44]	; (80073e8 <SDMMC_CmdStopTransfer+0x74>)
 80073ba:	210c      	movs	r1, #12
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f9a5 	bl	800770c <SDMMC_GetCmdResp1>
 80073c2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073d6:	d101      	bne.n	80073dc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80073d8:	2300      	movs	r3, #0
 80073da:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80073dc:	69fb      	ldr	r3, [r7, #28]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3720      	adds	r7, #32
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	05f5e100 	.word	0x05f5e100

080073ec <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b088      	sub	sp, #32
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80073fa:	2307      	movs	r3, #7
 80073fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007402:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007404:	2300      	movs	r3, #0
 8007406:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800740c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800740e:	f107 0308 	add.w	r3, r7, #8
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f7ff fe87 	bl	8007128 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800741a:	f241 3288 	movw	r2, #5000	; 0x1388
 800741e:	2107      	movs	r1, #7
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f973 	bl	800770c <SDMMC_GetCmdResp1>
 8007426:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007428:	69fb      	ldr	r3, [r7, #28]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3720      	adds	r7, #32
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b088      	sub	sp, #32
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007442:	2300      	movs	r3, #0
 8007444:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007446:	2300      	movs	r3, #0
 8007448:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800744a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800744e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007450:	f107 0308 	add.w	r3, r7, #8
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff fe66 	bl	8007128 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fb97 	bl	8007b90 <SDMMC_GetCmdError>
 8007462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007464:	69fb      	ldr	r3, [r7, #28]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3720      	adds	r7, #32
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b088      	sub	sp, #32
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007476:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800747a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800747c:	2308      	movs	r3, #8
 800747e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007486:	2300      	movs	r3, #0
 8007488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800748a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800748e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007490:	f107 0308 	add.w	r3, r7, #8
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7ff fe46 	bl	8007128 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fb29 	bl	8007af4 <SDMMC_GetCmdResp7>
 80074a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074a4:	69fb      	ldr	r3, [r7, #28]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3720      	adds	r7, #32
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b088      	sub	sp, #32
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80074bc:	2337      	movs	r3, #55	; 0x37
 80074be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074c6:	2300      	movs	r3, #0
 80074c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074d0:	f107 0308 	add.w	r3, r7, #8
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7ff fe26 	bl	8007128 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80074dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80074e0:	2137      	movs	r1, #55	; 0x37
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f912 	bl	800770c <SDMMC_GetCmdResp1>
 80074e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074ea:	69fb      	ldr	r3, [r7, #28]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3720      	adds	r7, #32
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b088      	sub	sp, #32
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007502:	2329      	movs	r3, #41	; 0x29
 8007504:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800750a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800750c:	2300      	movs	r3, #0
 800750e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007514:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007516:	f107 0308 	add.w	r3, r7, #8
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7ff fe03 	bl	8007128 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fa2e 	bl	8007984 <SDMMC_GetCmdResp3>
 8007528:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800752a:	69fb      	ldr	r3, [r7, #28]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3720      	adds	r7, #32
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b088      	sub	sp, #32
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007542:	2306      	movs	r3, #6
 8007544:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800754a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800754c:	2300      	movs	r3, #0
 800754e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007554:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007556:	f107 0308 	add.w	r3, r7, #8
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7ff fde3 	bl	8007128 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007562:	f241 3288 	movw	r2, #5000	; 0x1388
 8007566:	2106      	movs	r1, #6
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f8cf 	bl	800770c <SDMMC_GetCmdResp1>
 800756e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007570:	69fb      	ldr	r3, [r7, #28]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3720      	adds	r7, #32
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b088      	sub	sp, #32
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007586:	2333      	movs	r3, #51	; 0x33
 8007588:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800758a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800758e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007590:	2300      	movs	r3, #0
 8007592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007598:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800759a:	f107 0308 	add.w	r3, r7, #8
 800759e:	4619      	mov	r1, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7ff fdc1 	bl	8007128 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80075a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075aa:	2133      	movs	r1, #51	; 0x33
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f8ad 	bl	800770c <SDMMC_GetCmdResp1>
 80075b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075b4:	69fb      	ldr	r3, [r7, #28]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3720      	adds	r7, #32
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b088      	sub	sp, #32
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80075ca:	2302      	movs	r3, #2
 80075cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80075ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80075d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075d4:	2300      	movs	r3, #0
 80075d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075de:	f107 0308 	add.w	r3, r7, #8
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7ff fd9f 	bl	8007128 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f980 	bl	80078f0 <SDMMC_GetCmdResp2>
 80075f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075f2:	69fb      	ldr	r3, [r7, #28]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3720      	adds	r7, #32
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800760a:	2309      	movs	r3, #9
 800760c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800760e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007612:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007614:	2300      	movs	r3, #0
 8007616:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800761c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800761e:	f107 0308 	add.w	r3, r7, #8
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7ff fd7f 	bl	8007128 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f960 	bl	80078f0 <SDMMC_GetCmdResp2>
 8007630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007632:	69fb      	ldr	r3, [r7, #28]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3720      	adds	r7, #32
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b088      	sub	sp, #32
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800764a:	2303      	movs	r3, #3
 800764c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800764e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007652:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007654:	2300      	movs	r3, #0
 8007656:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800765c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800765e:	f107 0308 	add.w	r3, r7, #8
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7ff fd5f 	bl	8007128 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	2103      	movs	r1, #3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f9c8 	bl	8007a04 <SDMMC_GetCmdResp6>
 8007674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007676:	69fb      	ldr	r3, [r7, #28]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3720      	adds	r7, #32
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800768e:	230d      	movs	r3, #13
 8007690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007696:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007698:	2300      	movs	r3, #0
 800769a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800769c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076a2:	f107 0308 	add.w	r3, r7, #8
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff fd3d 	bl	8007128 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80076ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80076b2:	210d      	movs	r1, #13
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f829 	bl	800770c <SDMMC_GetCmdResp1>
 80076ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076bc:	69fb      	ldr	r3, [r7, #28]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3720      	adds	r7, #32
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b088      	sub	sp, #32
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80076d2:	230d      	movs	r3, #13
 80076d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076dc:	2300      	movs	r3, #0
 80076de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076e6:	f107 0308 	add.w	r3, r7, #8
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7ff fd1b 	bl	8007128 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80076f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076f6:	210d      	movs	r1, #13
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f807 	bl	800770c <SDMMC_GetCmdResp1>
 80076fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007700:	69fb      	ldr	r3, [r7, #28]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3720      	adds	r7, #32
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	460b      	mov	r3, r1
 8007716:	607a      	str	r2, [r7, #4]
 8007718:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800771a:	4b70      	ldr	r3, [pc, #448]	; (80078dc <SDMMC_GetCmdResp1+0x1d0>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a70      	ldr	r2, [pc, #448]	; (80078e0 <SDMMC_GetCmdResp1+0x1d4>)
 8007720:	fba2 2303 	umull	r2, r3, r2, r3
 8007724:	0a5a      	lsrs	r2, r3, #9
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	fb02 f303 	mul.w	r3, r2, r3
 800772c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	1e5a      	subs	r2, r3, #1
 8007732:	61fa      	str	r2, [r7, #28]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d102      	bne.n	800773e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007738:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800773c:	e0c9      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007742:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	4b67      	ldr	r3, [pc, #412]	; (80078e4 <SDMMC_GetCmdResp1+0x1d8>)
 8007748:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0ef      	beq.n	800772e <SDMMC_GetCmdResp1+0x22>
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1ea      	bne.n	800772e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775c:	f003 0304 	and.w	r3, r3, #4
 8007760:	2b00      	cmp	r3, #0
 8007762:	d004      	beq.n	800776e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2204      	movs	r2, #4
 8007768:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800776a:	2304      	movs	r3, #4
 800776c:	e0b1      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d004      	beq.n	8007784 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2201      	movs	r2, #1
 800777e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007780:	2301      	movs	r3, #1
 8007782:	e0a6      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4a58      	ldr	r2, [pc, #352]	; (80078e8 <SDMMC_GetCmdResp1+0x1dc>)
 8007788:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f7ff fcf6 	bl	800717c <SDMMC_GetCommandResponse>
 8007790:	4603      	mov	r3, r0
 8007792:	461a      	mov	r2, r3
 8007794:	7afb      	ldrb	r3, [r7, #11]
 8007796:	4293      	cmp	r3, r2
 8007798:	d001      	beq.n	800779e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800779a:	2301      	movs	r3, #1
 800779c:	e099      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800779e:	2100      	movs	r1, #0
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f7ff fcf8 	bl	8007196 <SDMMC_GetResponse>
 80077a6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	4b50      	ldr	r3, [pc, #320]	; (80078ec <SDMMC_GetCmdResp1+0x1e0>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80077b2:	2300      	movs	r3, #0
 80077b4:	e08d      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	da02      	bge.n	80077c2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80077bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077c0:	e087      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80077cc:	2340      	movs	r3, #64	; 0x40
 80077ce:	e080      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80077da:	2380      	movs	r3, #128	; 0x80
 80077dc:	e079      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80077e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077ec:	e071      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80077f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077fc:	e069      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800780c:	e061      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007818:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800781c:	e059      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d002      	beq.n	800782e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800782c:	e051      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800783c:	e049      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007848:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800784c:	e041      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800785c:	e039      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007868:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800786c:	e031      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007878:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800787c:	e029      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007888:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800788c:	e021      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d002      	beq.n	800789e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007898:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800789c:	e019      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80078a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80078ac:	e011      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80078b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80078bc:	e009      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f003 0308 	and.w	r3, r3, #8
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80078c8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80078cc:	e001      	b.n	80078d2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80078ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3720      	adds	r7, #32
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	24000000 	.word	0x24000000
 80078e0:	10624dd3 	.word	0x10624dd3
 80078e4:	00200045 	.word	0x00200045
 80078e8:	002000c5 	.word	0x002000c5
 80078ec:	fdffe008 	.word	0xfdffe008

080078f0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80078f8:	4b1f      	ldr	r3, [pc, #124]	; (8007978 <SDMMC_GetCmdResp2+0x88>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a1f      	ldr	r2, [pc, #124]	; (800797c <SDMMC_GetCmdResp2+0x8c>)
 80078fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007902:	0a5b      	lsrs	r3, r3, #9
 8007904:	f241 3288 	movw	r2, #5000	; 0x1388
 8007908:	fb02 f303 	mul.w	r3, r2, r3
 800790c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	1e5a      	subs	r2, r3, #1
 8007912:	60fa      	str	r2, [r7, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d102      	bne.n	800791e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007918:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800791c:	e026      	b.n	800796c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007922:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0ef      	beq.n	800790e <SDMMC_GetCmdResp2+0x1e>
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1ea      	bne.n	800790e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800793c:	f003 0304 	and.w	r3, r3, #4
 8007940:	2b00      	cmp	r3, #0
 8007942:	d004      	beq.n	800794e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2204      	movs	r2, #4
 8007948:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800794a:	2304      	movs	r3, #4
 800794c:	e00e      	b.n	800796c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d004      	beq.n	8007964 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007960:	2301      	movs	r3, #1
 8007962:	e003      	b.n	800796c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a06      	ldr	r2, [pc, #24]	; (8007980 <SDMMC_GetCmdResp2+0x90>)
 8007968:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3714      	adds	r7, #20
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr
 8007978:	24000000 	.word	0x24000000
 800797c:	10624dd3 	.word	0x10624dd3
 8007980:	002000c5 	.word	0x002000c5

08007984 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800798c:	4b1a      	ldr	r3, [pc, #104]	; (80079f8 <SDMMC_GetCmdResp3+0x74>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a1a      	ldr	r2, [pc, #104]	; (80079fc <SDMMC_GetCmdResp3+0x78>)
 8007992:	fba2 2303 	umull	r2, r3, r2, r3
 8007996:	0a5b      	lsrs	r3, r3, #9
 8007998:	f241 3288 	movw	r2, #5000	; 0x1388
 800799c:	fb02 f303 	mul.w	r3, r2, r3
 80079a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	1e5a      	subs	r2, r3, #1
 80079a6:	60fa      	str	r2, [r7, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d102      	bne.n	80079b2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079b0:	e01b      	b.n	80079ea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d0ef      	beq.n	80079a2 <SDMMC_GetCmdResp3+0x1e>
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1ea      	bne.n	80079a2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d0:	f003 0304 	and.w	r3, r3, #4
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d004      	beq.n	80079e2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2204      	movs	r2, #4
 80079dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079de:	2304      	movs	r3, #4
 80079e0:	e003      	b.n	80079ea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a06      	ldr	r2, [pc, #24]	; (8007a00 <SDMMC_GetCmdResp3+0x7c>)
 80079e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3714      	adds	r7, #20
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	24000000 	.word	0x24000000
 80079fc:	10624dd3 	.word	0x10624dd3
 8007a00:	002000c5 	.word	0x002000c5

08007a04 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	607a      	str	r2, [r7, #4]
 8007a10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007a12:	4b35      	ldr	r3, [pc, #212]	; (8007ae8 <SDMMC_GetCmdResp6+0xe4>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a35      	ldr	r2, [pc, #212]	; (8007aec <SDMMC_GetCmdResp6+0xe8>)
 8007a18:	fba2 2303 	umull	r2, r3, r2, r3
 8007a1c:	0a5b      	lsrs	r3, r3, #9
 8007a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a22:	fb02 f303 	mul.w	r3, r2, r3
 8007a26:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	1e5a      	subs	r2, r3, #1
 8007a2c:	61fa      	str	r2, [r7, #28]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d102      	bne.n	8007a38 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a36:	e052      	b.n	8007ade <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d0ef      	beq.n	8007a28 <SDMMC_GetCmdResp6+0x24>
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1ea      	bne.n	8007a28 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a56:	f003 0304 	and.w	r3, r3, #4
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d004      	beq.n	8007a68 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2204      	movs	r2, #4
 8007a62:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a64:	2304      	movs	r3, #4
 8007a66:	e03a      	b.n	8007ade <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d004      	beq.n	8007a7e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2201      	movs	r2, #1
 8007a78:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e02f      	b.n	8007ade <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f7ff fb7c 	bl	800717c <SDMMC_GetCommandResponse>
 8007a84:	4603      	mov	r3, r0
 8007a86:	461a      	mov	r2, r3
 8007a88:	7afb      	ldrb	r3, [r7, #11]
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d001      	beq.n	8007a92 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e025      	b.n	8007ade <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4a16      	ldr	r2, [pc, #88]	; (8007af0 <SDMMC_GetCmdResp6+0xec>)
 8007a96:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007a98:	2100      	movs	r1, #0
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f7ff fb7b 	bl	8007196 <SDMMC_GetResponse>
 8007aa0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d106      	bne.n	8007aba <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	0c1b      	lsrs	r3, r3, #16
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	e011      	b.n	8007ade <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d002      	beq.n	8007aca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ac8:	e009      	b.n	8007ade <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ad8:	e001      	b.n	8007ade <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007ada:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3720      	adds	r7, #32
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	24000000 	.word	0x24000000
 8007aec:	10624dd3 	.word	0x10624dd3
 8007af0:	002000c5 	.word	0x002000c5

08007af4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007afc:	4b22      	ldr	r3, [pc, #136]	; (8007b88 <SDMMC_GetCmdResp7+0x94>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a22      	ldr	r2, [pc, #136]	; (8007b8c <SDMMC_GetCmdResp7+0x98>)
 8007b02:	fba2 2303 	umull	r2, r3, r2, r3
 8007b06:	0a5b      	lsrs	r3, r3, #9
 8007b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b0c:	fb02 f303 	mul.w	r3, r2, r3
 8007b10:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	1e5a      	subs	r2, r3, #1
 8007b16:	60fa      	str	r2, [r7, #12]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d102      	bne.n	8007b22 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b20:	e02c      	b.n	8007b7c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b26:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d0ef      	beq.n	8007b12 <SDMMC_GetCmdResp7+0x1e>
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1ea      	bne.n	8007b12 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b40:	f003 0304 	and.w	r3, r3, #4
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d004      	beq.n	8007b52 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2204      	movs	r2, #4
 8007b4c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b4e:	2304      	movs	r3, #4
 8007b50:	e014      	b.n	8007b7c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d004      	beq.n	8007b68 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e009      	b.n	8007b7c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d002      	beq.n	8007b7a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2240      	movs	r2, #64	; 0x40
 8007b78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007b7a:	2300      	movs	r3, #0

}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	24000000 	.word	0x24000000
 8007b8c:	10624dd3 	.word	0x10624dd3

08007b90 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007b98:	4b11      	ldr	r3, [pc, #68]	; (8007be0 <SDMMC_GetCmdError+0x50>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a11      	ldr	r2, [pc, #68]	; (8007be4 <SDMMC_GetCmdError+0x54>)
 8007b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba2:	0a5b      	lsrs	r3, r3, #9
 8007ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ba8:	fb02 f303 	mul.w	r3, r2, r3
 8007bac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	1e5a      	subs	r2, r3, #1
 8007bb2:	60fa      	str	r2, [r7, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d102      	bne.n	8007bbe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007bb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bbc:	e009      	b.n	8007bd2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0f1      	beq.n	8007bae <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a06      	ldr	r2, [pc, #24]	; (8007be8 <SDMMC_GetCmdError+0x58>)
 8007bce:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	24000000 	.word	0x24000000
 8007be4:	10624dd3 	.word	0x10624dd3
 8007be8:	002000c5 	.word	0x002000c5

08007bec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007bf0:	4904      	ldr	r1, [pc, #16]	; (8007c04 <MX_FATFS_Init+0x18>)
 8007bf2:	4805      	ldr	r0, [pc, #20]	; (8007c08 <MX_FATFS_Init+0x1c>)
 8007bf4:	f003 f822 	bl	800ac3c <FATFS_LinkDriver>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4b03      	ldr	r3, [pc, #12]	; (8007c0c <MX_FATFS_Init+0x20>)
 8007bfe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007c00:	bf00      	nop
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	24001294 	.word	0x24001294
 8007c08:	0800d2e8 	.word	0x0800d2e8
 8007c0c:	24001290 	.word	0x24001290

08007c10 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007c10:	b480      	push	{r7}
 8007c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007c14:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007c2a:	f000 f885 	bl	8007d38 <BSP_SD_IsDetected>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d001      	beq.n	8007c38 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007c34:	2302      	movs	r3, #2
 8007c36:	e012      	b.n	8007c5e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007c38:	480b      	ldr	r0, [pc, #44]	; (8007c68 <BSP_SD_Init+0x48>)
 8007c3a:	f7fd fdd3 	bl	80057e4 <HAL_SD_Init>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007c42:	79fb      	ldrb	r3, [r7, #7]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d109      	bne.n	8007c5c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007c48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007c4c:	4806      	ldr	r0, [pc, #24]	; (8007c68 <BSP_SD_Init+0x48>)
 8007c4e:	f7fe fc77 	bl	8006540 <HAL_SD_ConfigWideBusOperation>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d001      	beq.n	8007c5c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007c5c:	79fb      	ldrb	r3, [r7, #7]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	240011fc 	.word	0x240011fc

08007c6c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	68f9      	ldr	r1, [r7, #12]
 8007c82:	4806      	ldr	r0, [pc, #24]	; (8007c9c <BSP_SD_ReadBlocks_DMA+0x30>)
 8007c84:	f7fd fec6 	bl	8005a14 <HAL_SD_ReadBlocks_DMA>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3718      	adds	r7, #24
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	240011fc 	.word	0x240011fc

08007ca0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	68f9      	ldr	r1, [r7, #12]
 8007cb6:	4806      	ldr	r0, [pc, #24]	; (8007cd0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007cb8:	f7fd ff54 	bl	8005b64 <HAL_SD_WriteBlocks_DMA>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3718      	adds	r7, #24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	240011fc 	.word	0x240011fc

08007cd4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007cd8:	4805      	ldr	r0, [pc, #20]	; (8007cf0 <BSP_SD_GetCardState+0x1c>)
 8007cda:	f7fe fd41 	bl	8006760 <HAL_SD_GetCardState>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	bf14      	ite	ne
 8007ce4:	2301      	movne	r3, #1
 8007ce6:	2300      	moveq	r3, #0
 8007ce8:	b2db      	uxtb	r3, r3
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	240011fc 	.word	0x240011fc

08007cf4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007cfc:	6879      	ldr	r1, [r7, #4]
 8007cfe:	4803      	ldr	r0, [pc, #12]	; (8007d0c <BSP_SD_GetCardInfo+0x18>)
 8007d00:	f7fe fbf2 	bl	80064e8 <HAL_SD_GetCardInfo>
}
 8007d04:	bf00      	nop
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	240011fc 	.word	0x240011fc

08007d10 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007d18:	f000 f9a0 	bl	800805c <BSP_SD_WriteCpltCallback>
}
 8007d1c:	bf00      	nop
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007d2c:	f000 f9a2 	bl	8008074 <BSP_SD_ReadCpltCallback>
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007d42:	f000 f80b 	bl	8007d5c <BSP_PlatformIsDetected>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007d50:	79fb      	ldrb	r3, [r7, #7]
 8007d52:	b2db      	uxtb	r3, r3
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007d62:	2301      	movs	r3, #1
 8007d64:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007d66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d6a:	4806      	ldr	r0, [pc, #24]	; (8007d84 <BSP_PlatformIsDetected+0x28>)
 8007d6c:	f7f9 fd60 	bl	8001830 <HAL_GPIO_ReadPin>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007d76:	2300      	movs	r3, #0
 8007d78:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	58022000 	.word	0x58022000

08007d88 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007d90:	f7f9 fa52 	bl	8001238 <HAL_GetTick>
 8007d94:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007d96:	e006      	b.n	8007da6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007d98:	f7ff ff9c 	bl	8007cd4 <BSP_SD_GetCardState>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	e009      	b.n	8007dba <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007da6:	f7f9 fa47 	bl	8001238 <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d8f0      	bhi.n	8007d98 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
	...

08007dc4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	4603      	mov	r3, r0
 8007dcc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007dce:	4b0b      	ldr	r3, [pc, #44]	; (8007dfc <SD_CheckStatus+0x38>)
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007dd4:	f7ff ff7e 	bl	8007cd4 <BSP_SD_GetCardState>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d107      	bne.n	8007dee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007dde:	4b07      	ldr	r3, [pc, #28]	; (8007dfc <SD_CheckStatus+0x38>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	f023 0301 	bic.w	r3, r3, #1
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	4b04      	ldr	r3, [pc, #16]	; (8007dfc <SD_CheckStatus+0x38>)
 8007dec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007dee:	4b03      	ldr	r3, [pc, #12]	; (8007dfc <SD_CheckStatus+0x38>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	b2db      	uxtb	r3, r3
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	240010a1 	.word	0x240010a1

08007e00 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	4603      	mov	r3, r0
 8007e08:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007e0a:	f7ff ff09 	bl	8007c20 <BSP_SD_Init>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d107      	bne.n	8007e24 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007e14:	79fb      	ldrb	r3, [r7, #7]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7ff ffd4 	bl	8007dc4 <SD_CheckStatus>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	461a      	mov	r2, r3
 8007e20:	4b04      	ldr	r3, [pc, #16]	; (8007e34 <SD_initialize+0x34>)
 8007e22:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007e24:	4b03      	ldr	r3, [pc, #12]	; (8007e34 <SD_initialize+0x34>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	b2db      	uxtb	r3, r3
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	240010a1 	.word	0x240010a1

08007e38 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	4603      	mov	r3, r0
 8007e40:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007e42:	79fb      	ldrb	r3, [r7, #7]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7ff ffbd 	bl	8007dc4 <SD_CheckStatus>
 8007e4a:	4603      	mov	r3, r0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	607a      	str	r2, [r7, #4]
 8007e5e:	603b      	str	r3, [r7, #0]
 8007e60:	4603      	mov	r3, r0
 8007e62:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007e68:	f247 5030 	movw	r0, #30000	; 0x7530
 8007e6c:	f7ff ff8c 	bl	8007d88 <SD_CheckStatusWithTimeout>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	da01      	bge.n	8007e7a <SD_read+0x26>
  {
    return res;
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
 8007e78:	e03b      	b.n	8007ef2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	6879      	ldr	r1, [r7, #4]
 8007e7e:	68b8      	ldr	r0, [r7, #8]
 8007e80:	f7ff fef4 	bl	8007c6c <BSP_SD_ReadBlocks_DMA>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d132      	bne.n	8007ef0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007e8a:	4b1c      	ldr	r3, [pc, #112]	; (8007efc <SD_read+0xa8>)
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007e90:	f7f9 f9d2 	bl	8001238 <HAL_GetTick>
 8007e94:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007e96:	bf00      	nop
 8007e98:	4b18      	ldr	r3, [pc, #96]	; (8007efc <SD_read+0xa8>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d108      	bne.n	8007eb2 <SD_read+0x5e>
 8007ea0:	f7f9 f9ca 	bl	8001238 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	f247 522f 	movw	r2, #29999	; 0x752f
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d9f2      	bls.n	8007e98 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8007eb2:	4b12      	ldr	r3, [pc, #72]	; (8007efc <SD_read+0xa8>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d102      	bne.n	8007ec0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	75fb      	strb	r3, [r7, #23]
 8007ebe:	e017      	b.n	8007ef0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007ec0:	4b0e      	ldr	r3, [pc, #56]	; (8007efc <SD_read+0xa8>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007ec6:	f7f9 f9b7 	bl	8001238 <HAL_GetTick>
 8007eca:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007ecc:	e007      	b.n	8007ede <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007ece:	f7ff ff01 	bl	8007cd4 <BSP_SD_GetCardState>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d102      	bne.n	8007ede <SD_read+0x8a>
          {
            res = RES_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007edc:	e008      	b.n	8007ef0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007ede:	f7f9 f9ab 	bl	8001238 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	f247 522f 	movw	r2, #29999	; 0x752f
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d9ee      	bls.n	8007ece <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	2400116c 	.word	0x2400116c

08007f00 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60b9      	str	r1, [r7, #8]
 8007f08:	607a      	str	r2, [r7, #4]
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007f14:	4b24      	ldr	r3, [pc, #144]	; (8007fa8 <SD_write+0xa8>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007f1a:	f247 5030 	movw	r0, #30000	; 0x7530
 8007f1e:	f7ff ff33 	bl	8007d88 <SD_CheckStatusWithTimeout>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	da01      	bge.n	8007f2c <SD_write+0x2c>
  {
    return res;
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
 8007f2a:	e038      	b.n	8007f9e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	6879      	ldr	r1, [r7, #4]
 8007f30:	68b8      	ldr	r0, [r7, #8]
 8007f32:	f7ff feb5 	bl	8007ca0 <BSP_SD_WriteBlocks_DMA>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d12f      	bne.n	8007f9c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007f3c:	f7f9 f97c 	bl	8001238 <HAL_GetTick>
 8007f40:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007f42:	bf00      	nop
 8007f44:	4b18      	ldr	r3, [pc, #96]	; (8007fa8 <SD_write+0xa8>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d108      	bne.n	8007f5e <SD_write+0x5e>
 8007f4c:	f7f9 f974 	bl	8001238 <HAL_GetTick>
 8007f50:	4602      	mov	r2, r0
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	f247 522f 	movw	r2, #29999	; 0x752f
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d9f2      	bls.n	8007f44 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8007f5e:	4b12      	ldr	r3, [pc, #72]	; (8007fa8 <SD_write+0xa8>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d102      	bne.n	8007f6c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	75fb      	strb	r3, [r7, #23]
 8007f6a:	e017      	b.n	8007f9c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8007f6c:	4b0e      	ldr	r3, [pc, #56]	; (8007fa8 <SD_write+0xa8>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007f72:	f7f9 f961 	bl	8001238 <HAL_GetTick>
 8007f76:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007f78:	e007      	b.n	8007f8a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007f7a:	f7ff feab 	bl	8007cd4 <BSP_SD_GetCardState>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d102      	bne.n	8007f8a <SD_write+0x8a>
          {
            res = RES_OK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	75fb      	strb	r3, [r7, #23]
            break;
 8007f88:	e008      	b.n	8007f9c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007f8a:	f7f9 f955 	bl	8001238 <HAL_GetTick>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	f247 522f 	movw	r2, #29999	; 0x752f
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d9ee      	bls.n	8007f7a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8007f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	24001168 	.word	0x24001168

08007fac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08c      	sub	sp, #48	; 0x30
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	603a      	str	r2, [r7, #0]
 8007fb6:	71fb      	strb	r3, [r7, #7]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007fc2:	4b25      	ldr	r3, [pc, #148]	; (8008058 <SD_ioctl+0xac>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <SD_ioctl+0x28>
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e03c      	b.n	800804e <SD_ioctl+0xa2>

  switch (cmd)
 8007fd4:	79bb      	ldrb	r3, [r7, #6]
 8007fd6:	2b03      	cmp	r3, #3
 8007fd8:	d834      	bhi.n	8008044 <SD_ioctl+0x98>
 8007fda:	a201      	add	r2, pc, #4	; (adr r2, 8007fe0 <SD_ioctl+0x34>)
 8007fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe0:	08007ff1 	.word	0x08007ff1
 8007fe4:	08007ff9 	.word	0x08007ff9
 8007fe8:	08008011 	.word	0x08008011
 8007fec:	0800802b 	.word	0x0800802b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007ff6:	e028      	b.n	800804a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007ff8:	f107 0308 	add.w	r3, r7, #8
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7ff fe79 	bl	8007cf4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008002:	6a3a      	ldr	r2, [r7, #32]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800800e:	e01c      	b.n	800804a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008010:	f107 0308 	add.w	r3, r7, #8
 8008014:	4618      	mov	r0, r3
 8008016:	f7ff fe6d 	bl	8007cf4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	b29a      	uxth	r2, r3
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008028:	e00f      	b.n	800804a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800802a:	f107 0308 	add.w	r3, r7, #8
 800802e:	4618      	mov	r0, r3
 8008030:	f7ff fe60 	bl	8007cf4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	0a5a      	lsrs	r2, r3, #9
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800803c:	2300      	movs	r3, #0
 800803e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008042:	e002      	b.n	800804a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008044:	2304      	movs	r3, #4
 8008046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800804a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800804e:	4618      	mov	r0, r3
 8008050:	3730      	adds	r7, #48	; 0x30
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	240010a1 	.word	0x240010a1

0800805c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800805c:	b480      	push	{r7}
 800805e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008060:	4b03      	ldr	r3, [pc, #12]	; (8008070 <BSP_SD_WriteCpltCallback+0x14>)
 8008062:	2201      	movs	r2, #1
 8008064:	601a      	str	r2, [r3, #0]
}
 8008066:	bf00      	nop
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	24001168 	.word	0x24001168

08008074 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008074:	b480      	push	{r7}
 8008076:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008078:	4b03      	ldr	r3, [pc, #12]	; (8008088 <BSP_SD_ReadCpltCallback+0x14>)
 800807a:	2201      	movs	r2, #1
 800807c:	601a      	str	r2, [r3, #0]
}
 800807e:	bf00      	nop
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	2400116c 	.word	0x2400116c

0800808c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	4603      	mov	r3, r0
 8008094:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008096:	79fb      	ldrb	r3, [r7, #7]
 8008098:	4a08      	ldr	r2, [pc, #32]	; (80080bc <disk_status+0x30>)
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4413      	add	r3, r2
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	79fa      	ldrb	r2, [r7, #7]
 80080a4:	4905      	ldr	r1, [pc, #20]	; (80080bc <disk_status+0x30>)
 80080a6:	440a      	add	r2, r1
 80080a8:	7a12      	ldrb	r2, [r2, #8]
 80080aa:	4610      	mov	r0, r2
 80080ac:	4798      	blx	r3
 80080ae:	4603      	mov	r3, r0
 80080b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	24001198 	.word	0x24001198

080080c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80080ce:	79fb      	ldrb	r3, [r7, #7]
 80080d0:	4a0d      	ldr	r2, [pc, #52]	; (8008108 <disk_initialize+0x48>)
 80080d2:	5cd3      	ldrb	r3, [r2, r3]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d111      	bne.n	80080fc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80080d8:	79fb      	ldrb	r3, [r7, #7]
 80080da:	4a0b      	ldr	r2, [pc, #44]	; (8008108 <disk_initialize+0x48>)
 80080dc:	2101      	movs	r1, #1
 80080de:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80080e0:	79fb      	ldrb	r3, [r7, #7]
 80080e2:	4a09      	ldr	r2, [pc, #36]	; (8008108 <disk_initialize+0x48>)
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	79fa      	ldrb	r2, [r7, #7]
 80080ee:	4906      	ldr	r1, [pc, #24]	; (8008108 <disk_initialize+0x48>)
 80080f0:	440a      	add	r2, r1
 80080f2:	7a12      	ldrb	r2, [r2, #8]
 80080f4:	4610      	mov	r0, r2
 80080f6:	4798      	blx	r3
 80080f8:	4603      	mov	r3, r0
 80080fa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	24001198 	.word	0x24001198

0800810c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800810c:	b590      	push	{r4, r7, lr}
 800810e:	b087      	sub	sp, #28
 8008110:	af00      	add	r7, sp, #0
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	607a      	str	r2, [r7, #4]
 8008116:	603b      	str	r3, [r7, #0]
 8008118:	4603      	mov	r3, r0
 800811a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800811c:	7bfb      	ldrb	r3, [r7, #15]
 800811e:	4a0a      	ldr	r2, [pc, #40]	; (8008148 <disk_read+0x3c>)
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	689c      	ldr	r4, [r3, #8]
 8008128:	7bfb      	ldrb	r3, [r7, #15]
 800812a:	4a07      	ldr	r2, [pc, #28]	; (8008148 <disk_read+0x3c>)
 800812c:	4413      	add	r3, r2
 800812e:	7a18      	ldrb	r0, [r3, #8]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	68b9      	ldr	r1, [r7, #8]
 8008136:	47a0      	blx	r4
 8008138:	4603      	mov	r3, r0
 800813a:	75fb      	strb	r3, [r7, #23]
  return res;
 800813c:	7dfb      	ldrb	r3, [r7, #23]
}
 800813e:	4618      	mov	r0, r3
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	bd90      	pop	{r4, r7, pc}
 8008146:	bf00      	nop
 8008148:	24001198 	.word	0x24001198

0800814c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800814c:	b590      	push	{r4, r7, lr}
 800814e:	b087      	sub	sp, #28
 8008150:	af00      	add	r7, sp, #0
 8008152:	60b9      	str	r1, [r7, #8]
 8008154:	607a      	str	r2, [r7, #4]
 8008156:	603b      	str	r3, [r7, #0]
 8008158:	4603      	mov	r3, r0
 800815a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800815c:	7bfb      	ldrb	r3, [r7, #15]
 800815e:	4a0a      	ldr	r2, [pc, #40]	; (8008188 <disk_write+0x3c>)
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	68dc      	ldr	r4, [r3, #12]
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	4a07      	ldr	r2, [pc, #28]	; (8008188 <disk_write+0x3c>)
 800816c:	4413      	add	r3, r2
 800816e:	7a18      	ldrb	r0, [r3, #8]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	68b9      	ldr	r1, [r7, #8]
 8008176:	47a0      	blx	r4
 8008178:	4603      	mov	r3, r0
 800817a:	75fb      	strb	r3, [r7, #23]
  return res;
 800817c:	7dfb      	ldrb	r3, [r7, #23]
}
 800817e:	4618      	mov	r0, r3
 8008180:	371c      	adds	r7, #28
 8008182:	46bd      	mov	sp, r7
 8008184:	bd90      	pop	{r4, r7, pc}
 8008186:	bf00      	nop
 8008188:	24001198 	.word	0x24001198

0800818c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	4603      	mov	r3, r0
 8008194:	603a      	str	r2, [r7, #0]
 8008196:	71fb      	strb	r3, [r7, #7]
 8008198:	460b      	mov	r3, r1
 800819a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800819c:	79fb      	ldrb	r3, [r7, #7]
 800819e:	4a09      	ldr	r2, [pc, #36]	; (80081c4 <disk_ioctl+0x38>)
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	79fa      	ldrb	r2, [r7, #7]
 80081aa:	4906      	ldr	r1, [pc, #24]	; (80081c4 <disk_ioctl+0x38>)
 80081ac:	440a      	add	r2, r1
 80081ae:	7a10      	ldrb	r0, [r2, #8]
 80081b0:	79b9      	ldrb	r1, [r7, #6]
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	4798      	blx	r3
 80081b6:	4603      	mov	r3, r0
 80081b8:	73fb      	strb	r3, [r7, #15]
  return res;
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	24001198 	.word	0x24001198

080081c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	3301      	adds	r3, #1
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80081d8:	89fb      	ldrh	r3, [r7, #14]
 80081da:	021b      	lsls	r3, r3, #8
 80081dc:	b21a      	sxth	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	b21b      	sxth	r3, r3
 80081e4:	4313      	orrs	r3, r2
 80081e6:	b21b      	sxth	r3, r3
 80081e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80081ea:	89fb      	ldrh	r3, [r7, #14]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3303      	adds	r3, #3
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	3202      	adds	r2, #2
 8008210:	7812      	ldrb	r2, [r2, #0]
 8008212:	4313      	orrs	r3, r2
 8008214:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	021b      	lsls	r3, r3, #8
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	3201      	adds	r2, #1
 800821e:	7812      	ldrb	r2, [r2, #0]
 8008220:	4313      	orrs	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	021b      	lsls	r3, r3, #8
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	7812      	ldrb	r2, [r2, #0]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
	return rv;
 8008230:	68fb      	ldr	r3, [r7, #12]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800823e:	b480      	push	{r7}
 8008240:	b083      	sub	sp, #12
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	460b      	mov	r3, r1
 8008248:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	607a      	str	r2, [r7, #4]
 8008250:	887a      	ldrh	r2, [r7, #2]
 8008252:	b2d2      	uxtb	r2, r2
 8008254:	701a      	strb	r2, [r3, #0]
 8008256:	887b      	ldrh	r3, [r7, #2]
 8008258:	0a1b      	lsrs	r3, r3, #8
 800825a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	1c5a      	adds	r2, r3, #1
 8008260:	607a      	str	r2, [r7, #4]
 8008262:	887a      	ldrh	r2, [r7, #2]
 8008264:	b2d2      	uxtb	r2, r2
 8008266:	701a      	strb	r2, [r3, #0]
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	b2d2      	uxtb	r2, r2
 8008288:	701a      	strb	r2, [r3, #0]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	0a1b      	lsrs	r3, r3, #8
 800828e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	607a      	str	r2, [r7, #4]
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	b2d2      	uxtb	r2, r2
 800829a:	701a      	strb	r2, [r3, #0]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	0a1b      	lsrs	r3, r3, #8
 80082a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	b2d2      	uxtb	r2, r2
 80082ac:	701a      	strb	r2, [r3, #0]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	0a1b      	lsrs	r3, r3, #8
 80082b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	1c5a      	adds	r2, r3, #1
 80082b8:	607a      	str	r2, [r7, #4]
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	b2d2      	uxtb	r2, r2
 80082be:	701a      	strb	r2, [r3, #0]
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80082cc:	b480      	push	{r7}
 80082ce:	b087      	sub	sp, #28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00d      	beq.n	8008302 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	1c53      	adds	r3, r2, #1
 80082ea:	613b      	str	r3, [r7, #16]
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	1c59      	adds	r1, r3, #1
 80082f0:	6179      	str	r1, [r7, #20]
 80082f2:	7812      	ldrb	r2, [r2, #0]
 80082f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	3b01      	subs	r3, #1
 80082fa:	607b      	str	r3, [r7, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1f1      	bne.n	80082e6 <mem_cpy+0x1a>
	}
}
 8008302:	bf00      	nop
 8008304:	371c      	adds	r7, #28
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800830e:	b480      	push	{r7}
 8008310:	b087      	sub	sp, #28
 8008312:	af00      	add	r7, sp, #0
 8008314:	60f8      	str	r0, [r7, #12]
 8008316:	60b9      	str	r1, [r7, #8]
 8008318:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	617a      	str	r2, [r7, #20]
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	b2d2      	uxtb	r2, r2
 8008328:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3b01      	subs	r3, #1
 800832e:	607b      	str	r3, [r7, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1f3      	bne.n	800831e <mem_set+0x10>
}
 8008336:	bf00      	nop
 8008338:	bf00      	nop
 800833a:	371c      	adds	r7, #28
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008344:	b480      	push	{r7}
 8008346:	b089      	sub	sp, #36	; 0x24
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	61fb      	str	r3, [r7, #28]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008358:	2300      	movs	r3, #0
 800835a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	61fa      	str	r2, [r7, #28]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	4619      	mov	r1, r3
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	61ba      	str	r2, [r7, #24]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	1acb      	subs	r3, r1, r3
 8008370:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	3b01      	subs	r3, #1
 8008376:	607b      	str	r3, [r7, #4]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <mem_cmp+0x40>
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d0eb      	beq.n	800835c <mem_cmp+0x18>

	return r;
 8008384:	697b      	ldr	r3, [r7, #20]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3724      	adds	r7, #36	; 0x24
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800839c:	e002      	b.n	80083a4 <chk_chr+0x12>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	3301      	adds	r3, #1
 80083a2:	607b      	str	r3, [r7, #4]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d005      	beq.n	80083b8 <chk_chr+0x26>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d1f2      	bne.n	800839e <chk_chr+0xc>
	return *str;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	781b      	ldrb	r3, [r3, #0]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80083d2:	2300      	movs	r3, #0
 80083d4:	60bb      	str	r3, [r7, #8]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	e029      	b.n	8008430 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80083dc:	4a27      	ldr	r2, [pc, #156]	; (800847c <chk_lock+0xb4>)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	011b      	lsls	r3, r3, #4
 80083e2:	4413      	add	r3, r2
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d01d      	beq.n	8008426 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80083ea:	4a24      	ldr	r2, [pc, #144]	; (800847c <chk_lock+0xb4>)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	011b      	lsls	r3, r3, #4
 80083f0:	4413      	add	r3, r2
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d116      	bne.n	800842a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80083fc:	4a1f      	ldr	r2, [pc, #124]	; (800847c <chk_lock+0xb4>)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	011b      	lsls	r3, r3, #4
 8008402:	4413      	add	r3, r2
 8008404:	3304      	adds	r3, #4
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800840c:	429a      	cmp	r2, r3
 800840e:	d10c      	bne.n	800842a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008410:	4a1a      	ldr	r2, [pc, #104]	; (800847c <chk_lock+0xb4>)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	011b      	lsls	r3, r3, #4
 8008416:	4413      	add	r3, r2
 8008418:	3308      	adds	r3, #8
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008420:	429a      	cmp	r2, r3
 8008422:	d102      	bne.n	800842a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008424:	e007      	b.n	8008436 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008426:	2301      	movs	r3, #1
 8008428:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3301      	adds	r3, #1
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d9d2      	bls.n	80083dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b02      	cmp	r3, #2
 800843a:	d109      	bne.n	8008450 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d102      	bne.n	8008448 <chk_lock+0x80>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b02      	cmp	r3, #2
 8008446:	d101      	bne.n	800844c <chk_lock+0x84>
 8008448:	2300      	movs	r3, #0
 800844a:	e010      	b.n	800846e <chk_lock+0xa6>
 800844c:	2312      	movs	r3, #18
 800844e:	e00e      	b.n	800846e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d108      	bne.n	8008468 <chk_lock+0xa0>
 8008456:	4a09      	ldr	r2, [pc, #36]	; (800847c <chk_lock+0xb4>)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	011b      	lsls	r3, r3, #4
 800845c:	4413      	add	r3, r2
 800845e:	330c      	adds	r3, #12
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008466:	d101      	bne.n	800846c <chk_lock+0xa4>
 8008468:	2310      	movs	r3, #16
 800846a:	e000      	b.n	800846e <chk_lock+0xa6>
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	24001178 	.word	0x24001178

08008480 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008486:	2300      	movs	r3, #0
 8008488:	607b      	str	r3, [r7, #4]
 800848a:	e002      	b.n	8008492 <enq_lock+0x12>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	3301      	adds	r3, #1
 8008490:	607b      	str	r3, [r7, #4]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d806      	bhi.n	80084a6 <enq_lock+0x26>
 8008498:	4a09      	ldr	r2, [pc, #36]	; (80084c0 <enq_lock+0x40>)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	4413      	add	r3, r2
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1f2      	bne.n	800848c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	bf14      	ite	ne
 80084ac:	2301      	movne	r3, #1
 80084ae:	2300      	moveq	r3, #0
 80084b0:	b2db      	uxtb	r3, r3
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	24001178 	.word	0x24001178

080084c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80084ce:	2300      	movs	r3, #0
 80084d0:	60fb      	str	r3, [r7, #12]
 80084d2:	e01f      	b.n	8008514 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80084d4:	4a41      	ldr	r2, [pc, #260]	; (80085dc <inc_lock+0x118>)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	4413      	add	r3, r2
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d113      	bne.n	800850e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80084e6:	4a3d      	ldr	r2, [pc, #244]	; (80085dc <inc_lock+0x118>)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	011b      	lsls	r3, r3, #4
 80084ec:	4413      	add	r3, r2
 80084ee:	3304      	adds	r3, #4
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d109      	bne.n	800850e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80084fa:	4a38      	ldr	r2, [pc, #224]	; (80085dc <inc_lock+0x118>)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	011b      	lsls	r3, r3, #4
 8008500:	4413      	add	r3, r2
 8008502:	3308      	adds	r3, #8
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800850a:	429a      	cmp	r2, r3
 800850c:	d006      	beq.n	800851c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3301      	adds	r3, #1
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d9dc      	bls.n	80084d4 <inc_lock+0x10>
 800851a:	e000      	b.n	800851e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800851c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b02      	cmp	r3, #2
 8008522:	d132      	bne.n	800858a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008524:	2300      	movs	r3, #0
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	e002      	b.n	8008530 <inc_lock+0x6c>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	3301      	adds	r3, #1
 800852e:	60fb      	str	r3, [r7, #12]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d806      	bhi.n	8008544 <inc_lock+0x80>
 8008536:	4a29      	ldr	r2, [pc, #164]	; (80085dc <inc_lock+0x118>)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	011b      	lsls	r3, r3, #4
 800853c:	4413      	add	r3, r2
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1f2      	bne.n	800852a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b02      	cmp	r3, #2
 8008548:	d101      	bne.n	800854e <inc_lock+0x8a>
 800854a:	2300      	movs	r3, #0
 800854c:	e040      	b.n	80085d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	4922      	ldr	r1, [pc, #136]	; (80085dc <inc_lock+0x118>)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	011b      	lsls	r3, r3, #4
 8008558:	440b      	add	r3, r1
 800855a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	491e      	ldr	r1, [pc, #120]	; (80085dc <inc_lock+0x118>)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	011b      	lsls	r3, r3, #4
 8008566:	440b      	add	r3, r1
 8008568:	3304      	adds	r3, #4
 800856a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	695a      	ldr	r2, [r3, #20]
 8008570:	491a      	ldr	r1, [pc, #104]	; (80085dc <inc_lock+0x118>)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	011b      	lsls	r3, r3, #4
 8008576:	440b      	add	r3, r1
 8008578:	3308      	adds	r3, #8
 800857a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800857c:	4a17      	ldr	r2, [pc, #92]	; (80085dc <inc_lock+0x118>)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	011b      	lsls	r3, r3, #4
 8008582:	4413      	add	r3, r2
 8008584:	330c      	adds	r3, #12
 8008586:	2200      	movs	r2, #0
 8008588:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d009      	beq.n	80085a4 <inc_lock+0xe0>
 8008590:	4a12      	ldr	r2, [pc, #72]	; (80085dc <inc_lock+0x118>)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	011b      	lsls	r3, r3, #4
 8008596:	4413      	add	r3, r2
 8008598:	330c      	adds	r3, #12
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <inc_lock+0xe0>
 80085a0:	2300      	movs	r3, #0
 80085a2:	e015      	b.n	80085d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d108      	bne.n	80085bc <inc_lock+0xf8>
 80085aa:	4a0c      	ldr	r2, [pc, #48]	; (80085dc <inc_lock+0x118>)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	011b      	lsls	r3, r3, #4
 80085b0:	4413      	add	r3, r2
 80085b2:	330c      	adds	r3, #12
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	3301      	adds	r3, #1
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	e001      	b.n	80085c0 <inc_lock+0xfc>
 80085bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085c0:	4906      	ldr	r1, [pc, #24]	; (80085dc <inc_lock+0x118>)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	011b      	lsls	r3, r3, #4
 80085c6:	440b      	add	r3, r1
 80085c8:	330c      	adds	r3, #12
 80085ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3301      	adds	r3, #1
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	24001178 	.word	0x24001178

080085e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	607b      	str	r3, [r7, #4]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d825      	bhi.n	8008640 <dec_lock+0x60>
		n = Files[i].ctr;
 80085f4:	4a17      	ldr	r2, [pc, #92]	; (8008654 <dec_lock+0x74>)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	011b      	lsls	r3, r3, #4
 80085fa:	4413      	add	r3, r2
 80085fc:	330c      	adds	r3, #12
 80085fe:	881b      	ldrh	r3, [r3, #0]
 8008600:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008602:	89fb      	ldrh	r3, [r7, #14]
 8008604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008608:	d101      	bne.n	800860e <dec_lock+0x2e>
 800860a:	2300      	movs	r3, #0
 800860c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800860e:	89fb      	ldrh	r3, [r7, #14]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d002      	beq.n	800861a <dec_lock+0x3a>
 8008614:	89fb      	ldrh	r3, [r7, #14]
 8008616:	3b01      	subs	r3, #1
 8008618:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800861a:	4a0e      	ldr	r2, [pc, #56]	; (8008654 <dec_lock+0x74>)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	011b      	lsls	r3, r3, #4
 8008620:	4413      	add	r3, r2
 8008622:	330c      	adds	r3, #12
 8008624:	89fa      	ldrh	r2, [r7, #14]
 8008626:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008628:	89fb      	ldrh	r3, [r7, #14]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d105      	bne.n	800863a <dec_lock+0x5a>
 800862e:	4a09      	ldr	r2, [pc, #36]	; (8008654 <dec_lock+0x74>)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	011b      	lsls	r3, r3, #4
 8008634:	4413      	add	r3, r2
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	737b      	strb	r3, [r7, #13]
 800863e:	e001      	b.n	8008644 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008640:	2302      	movs	r3, #2
 8008642:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008644:	7b7b      	ldrb	r3, [r7, #13]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	24001178 	.word	0x24001178

08008658 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008660:	2300      	movs	r3, #0
 8008662:	60fb      	str	r3, [r7, #12]
 8008664:	e010      	b.n	8008688 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008666:	4a0d      	ldr	r2, [pc, #52]	; (800869c <clear_lock+0x44>)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	011b      	lsls	r3, r3, #4
 800866c:	4413      	add	r3, r2
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	429a      	cmp	r2, r3
 8008674:	d105      	bne.n	8008682 <clear_lock+0x2a>
 8008676:	4a09      	ldr	r2, [pc, #36]	; (800869c <clear_lock+0x44>)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	011b      	lsls	r3, r3, #4
 800867c:	4413      	add	r3, r2
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3301      	adds	r3, #1
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d9eb      	bls.n	8008666 <clear_lock+0xe>
	}
}
 800868e:	bf00      	nop
 8008690:	bf00      	nop
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	24001178 	.word	0x24001178

080086a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	78db      	ldrb	r3, [r3, #3]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d034      	beq.n	800871e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	7858      	ldrb	r0, [r3, #1]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086c4:	2301      	movs	r3, #1
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	f7ff fd40 	bl	800814c <disk_write>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d002      	beq.n	80086d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	73fb      	strb	r3, [r7, #15]
 80086d6:	e022      	b.n	800871e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	1ad2      	subs	r2, r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d217      	bcs.n	800871e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	789b      	ldrb	r3, [r3, #2]
 80086f2:	613b      	str	r3, [r7, #16]
 80086f4:	e010      	b.n	8008718 <sync_window+0x78>
					wsect += fs->fsize;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	699b      	ldr	r3, [r3, #24]
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	4413      	add	r3, r2
 80086fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	7858      	ldrb	r0, [r3, #1]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800870a:	2301      	movs	r3, #1
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	f7ff fd1d 	bl	800814c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	3b01      	subs	r3, #1
 8008716:	613b      	str	r3, [r7, #16]
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d8eb      	bhi.n	80086f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800871e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3718      	adds	r7, #24
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	429a      	cmp	r2, r3
 800873e:	d01b      	beq.n	8008778 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff ffad 	bl	80086a0 <sync_window>
 8008746:	4603      	mov	r3, r0
 8008748:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800874a:	7bfb      	ldrb	r3, [r7, #15]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d113      	bne.n	8008778 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	7858      	ldrb	r0, [r3, #1]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800875a:	2301      	movs	r3, #1
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	f7ff fcd5 	bl	800810c <disk_read>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	d004      	beq.n	8008772 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008768:	f04f 33ff 	mov.w	r3, #4294967295
 800876c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800876e:	2301      	movs	r3, #1
 8008770:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008778:	7bfb      	ldrb	r3, [r7, #15]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
	...

08008784 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7ff ff87 	bl	80086a0 <sync_window>
 8008792:	4603      	mov	r3, r0
 8008794:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d158      	bne.n	800884e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d148      	bne.n	8008836 <sync_fs+0xb2>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	791b      	ldrb	r3, [r3, #4]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d144      	bne.n	8008836 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	3330      	adds	r3, #48	; 0x30
 80087b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087b4:	2100      	movs	r1, #0
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff fda9 	bl	800830e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	3330      	adds	r3, #48	; 0x30
 80087c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80087c4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7ff fd38 	bl	800823e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	3330      	adds	r3, #48	; 0x30
 80087d2:	4921      	ldr	r1, [pc, #132]	; (8008858 <sync_fs+0xd4>)
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7ff fd4d 	bl	8008274 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	3330      	adds	r3, #48	; 0x30
 80087de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80087e2:	491e      	ldr	r1, [pc, #120]	; (800885c <sync_fs+0xd8>)
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7ff fd45 	bl	8008274 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	3330      	adds	r3, #48	; 0x30
 80087ee:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	4619      	mov	r1, r3
 80087f8:	4610      	mov	r0, r2
 80087fa:	f7ff fd3b 	bl	8008274 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	3330      	adds	r3, #48	; 0x30
 8008802:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	4619      	mov	r1, r3
 800880c:	4610      	mov	r0, r2
 800880e:	f7ff fd31 	bl	8008274 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	1c5a      	adds	r2, r3, #1
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	7858      	ldrb	r0, [r3, #1]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800882a:	2301      	movs	r3, #1
 800882c:	f7ff fc8e 	bl	800814c <disk_write>
			fs->fsi_flag = 0;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	785b      	ldrb	r3, [r3, #1]
 800883a:	2200      	movs	r2, #0
 800883c:	2100      	movs	r1, #0
 800883e:	4618      	mov	r0, r3
 8008840:	f7ff fca4 	bl	800818c <disk_ioctl>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <sync_fs+0xca>
 800884a:	2301      	movs	r3, #1
 800884c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800884e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	41615252 	.word	0x41615252
 800885c:	61417272 	.word	0x61417272

08008860 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	3b02      	subs	r3, #2
 800886e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	3b02      	subs	r3, #2
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	429a      	cmp	r2, r3
 800887a:	d301      	bcc.n	8008880 <clust2sect+0x20>
 800887c:	2300      	movs	r3, #0
 800887e:	e008      	b.n	8008892 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	895b      	ldrh	r3, [r3, #10]
 8008884:	461a      	mov	r2, r3
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	fb03 f202 	mul.w	r2, r3, r2
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008890:	4413      	add	r3, r2
}
 8008892:	4618      	mov	r0, r3
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b086      	sub	sp, #24
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d904      	bls.n	80088be <get_fat+0x20>
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d302      	bcc.n	80088c4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80088be:	2301      	movs	r3, #1
 80088c0:	617b      	str	r3, [r7, #20]
 80088c2:	e08f      	b.n	80089e4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80088c4:	f04f 33ff 	mov.w	r3, #4294967295
 80088c8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	d062      	beq.n	8008998 <get_fat+0xfa>
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	dc7c      	bgt.n	80089d0 <get_fat+0x132>
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d002      	beq.n	80088e0 <get_fat+0x42>
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d042      	beq.n	8008964 <get_fat+0xc6>
 80088de:	e077      	b.n	80089d0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	085b      	lsrs	r3, r3, #1
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	4413      	add	r3, r2
 80088ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	6a1a      	ldr	r2, [r3, #32]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	0a5b      	lsrs	r3, r3, #9
 80088f6:	4413      	add	r3, r2
 80088f8:	4619      	mov	r1, r3
 80088fa:	6938      	ldr	r0, [r7, #16]
 80088fc:	f7ff ff14 	bl	8008728 <move_window>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d167      	bne.n	80089d6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	1c5a      	adds	r2, r3, #1
 800890a:	60fa      	str	r2, [r7, #12]
 800890c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	4413      	add	r3, r2
 8008914:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008918:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	6a1a      	ldr	r2, [r3, #32]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	0a5b      	lsrs	r3, r3, #9
 8008922:	4413      	add	r3, r2
 8008924:	4619      	mov	r1, r3
 8008926:	6938      	ldr	r0, [r7, #16]
 8008928:	f7ff fefe 	bl	8008728 <move_window>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d153      	bne.n	80089da <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	4413      	add	r3, r2
 800893c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008940:	021b      	lsls	r3, r3, #8
 8008942:	461a      	mov	r2, r3
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	4313      	orrs	r3, r2
 8008948:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	2b00      	cmp	r3, #0
 8008952:	d002      	beq.n	800895a <get_fat+0xbc>
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	091b      	lsrs	r3, r3, #4
 8008958:	e002      	b.n	8008960 <get_fat+0xc2>
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008960:	617b      	str	r3, [r7, #20]
			break;
 8008962:	e03f      	b.n	80089e4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	6a1a      	ldr	r2, [r3, #32]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	0a1b      	lsrs	r3, r3, #8
 800896c:	4413      	add	r3, r2
 800896e:	4619      	mov	r1, r3
 8008970:	6938      	ldr	r0, [r7, #16]
 8008972:	f7ff fed9 	bl	8008728 <move_window>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d130      	bne.n	80089de <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	005b      	lsls	r3, r3, #1
 8008986:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800898a:	4413      	add	r3, r2
 800898c:	4618      	mov	r0, r3
 800898e:	f7ff fc1b 	bl	80081c8 <ld_word>
 8008992:	4603      	mov	r3, r0
 8008994:	617b      	str	r3, [r7, #20]
			break;
 8008996:	e025      	b.n	80089e4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	6a1a      	ldr	r2, [r3, #32]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	09db      	lsrs	r3, r3, #7
 80089a0:	4413      	add	r3, r2
 80089a2:	4619      	mov	r1, r3
 80089a4:	6938      	ldr	r0, [r7, #16]
 80089a6:	f7ff febf 	bl	8008728 <move_window>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d118      	bne.n	80089e2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80089be:	4413      	add	r3, r2
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7ff fc19 	bl	80081f8 <ld_dword>
 80089c6:	4603      	mov	r3, r0
 80089c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80089cc:	617b      	str	r3, [r7, #20]
			break;
 80089ce:	e009      	b.n	80089e4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80089d0:	2301      	movs	r3, #1
 80089d2:	617b      	str	r3, [r7, #20]
 80089d4:	e006      	b.n	80089e4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089d6:	bf00      	nop
 80089d8:	e004      	b.n	80089e4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089da:	bf00      	nop
 80089dc:	e002      	b.n	80089e4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80089de:	bf00      	nop
 80089e0:	e000      	b.n	80089e4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80089e2:	bf00      	nop
		}
	}

	return val;
 80089e4:	697b      	ldr	r3, [r7, #20]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80089ee:	b590      	push	{r4, r7, lr}
 80089f0:	b089      	sub	sp, #36	; 0x24
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80089fa:	2302      	movs	r3, #2
 80089fc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	f240 80d2 	bls.w	8008baa <put_fat+0x1bc>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	f080 80cc 	bcs.w	8008baa <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	f000 8096 	beq.w	8008b48 <put_fat+0x15a>
 8008a1c:	2b03      	cmp	r3, #3
 8008a1e:	f300 80cd 	bgt.w	8008bbc <put_fat+0x1ce>
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d002      	beq.n	8008a2c <put_fat+0x3e>
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d06e      	beq.n	8008b08 <put_fat+0x11a>
 8008a2a:	e0c7      	b.n	8008bbc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	61bb      	str	r3, [r7, #24]
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	085b      	lsrs	r3, r3, #1
 8008a34:	69ba      	ldr	r2, [r7, #24]
 8008a36:	4413      	add	r3, r2
 8008a38:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6a1a      	ldr	r2, [r3, #32]
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	0a5b      	lsrs	r3, r3, #9
 8008a42:	4413      	add	r3, r2
 8008a44:	4619      	mov	r1, r3
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f7ff fe6e 	bl	8008728 <move_window>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a50:	7ffb      	ldrb	r3, [r7, #31]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f040 80ab 	bne.w	8008bae <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	1c59      	adds	r1, r3, #1
 8008a62:	61b9      	str	r1, [r7, #24]
 8008a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a68:	4413      	add	r3, r2
 8008a6a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00d      	beq.n	8008a92 <put_fat+0xa4>
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	b25b      	sxtb	r3, r3
 8008a7c:	f003 030f 	and.w	r3, r3, #15
 8008a80:	b25a      	sxtb	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	011b      	lsls	r3, r3, #4
 8008a88:	b25b      	sxtb	r3, r3
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	b25b      	sxtb	r3, r3
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	e001      	b.n	8008a96 <put_fat+0xa8>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6a1a      	ldr	r2, [r3, #32]
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	0a5b      	lsrs	r3, r3, #9
 8008aa8:	4413      	add	r3, r2
 8008aaa:	4619      	mov	r1, r3
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f7ff fe3b 	bl	8008728 <move_window>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ab6:	7ffb      	ldrb	r3, [r7, #31]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d17a      	bne.n	8008bb2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac8:	4413      	add	r3, r2
 8008aca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d003      	beq.n	8008ade <put_fat+0xf0>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	091b      	lsrs	r3, r3, #4
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	e00e      	b.n	8008afc <put_fat+0x10e>
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	b25b      	sxtb	r3, r3
 8008ae4:	f023 030f 	bic.w	r3, r3, #15
 8008ae8:	b25a      	sxtb	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	0a1b      	lsrs	r3, r3, #8
 8008aee:	b25b      	sxtb	r3, r3
 8008af0:	f003 030f 	and.w	r3, r3, #15
 8008af4:	b25b      	sxtb	r3, r3
 8008af6:	4313      	orrs	r3, r2
 8008af8:	b25b      	sxtb	r3, r3
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2201      	movs	r2, #1
 8008b04:	70da      	strb	r2, [r3, #3]
			break;
 8008b06:	e059      	b.n	8008bbc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6a1a      	ldr	r2, [r3, #32]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	0a1b      	lsrs	r3, r3, #8
 8008b10:	4413      	add	r3, r2
 8008b12:	4619      	mov	r1, r3
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f7ff fe07 	bl	8008728 <move_window>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b1e:	7ffb      	ldrb	r3, [r7, #31]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d148      	bne.n	8008bb6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	005b      	lsls	r3, r3, #1
 8008b2e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008b32:	4413      	add	r3, r2
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	b292      	uxth	r2, r2
 8008b38:	4611      	mov	r1, r2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff fb7f 	bl	800823e <st_word>
			fs->wflag = 1;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2201      	movs	r2, #1
 8008b44:	70da      	strb	r2, [r3, #3]
			break;
 8008b46:	e039      	b.n	8008bbc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6a1a      	ldr	r2, [r3, #32]
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	09db      	lsrs	r3, r3, #7
 8008b50:	4413      	add	r3, r2
 8008b52:	4619      	mov	r1, r3
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f7ff fde7 	bl	8008728 <move_window>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b5e:	7ffb      	ldrb	r3, [r7, #31]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d12a      	bne.n	8008bba <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008b78:	4413      	add	r3, r2
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7ff fb3c 	bl	80081f8 <ld_dword>
 8008b80:	4603      	mov	r3, r0
 8008b82:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b86:	4323      	orrs	r3, r4
 8008b88:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008b98:	4413      	add	r3, r2
 8008b9a:	6879      	ldr	r1, [r7, #4]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7ff fb69 	bl	8008274 <st_dword>
			fs->wflag = 1;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	70da      	strb	r2, [r3, #3]
			break;
 8008ba8:	e008      	b.n	8008bbc <put_fat+0x1ce>
		}
	}
 8008baa:	bf00      	nop
 8008bac:	e006      	b.n	8008bbc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008bae:	bf00      	nop
 8008bb0:	e004      	b.n	8008bbc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008bb2:	bf00      	nop
 8008bb4:	e002      	b.n	8008bbc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008bb6:	bf00      	nop
 8008bb8:	e000      	b.n	8008bbc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008bba:	bf00      	nop
	return res;
 8008bbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3724      	adds	r7, #36	; 0x24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd90      	pop	{r4, r7, pc}

08008bc6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b088      	sub	sp, #32
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	60f8      	str	r0, [r7, #12]
 8008bce:	60b9      	str	r1, [r7, #8]
 8008bd0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d904      	bls.n	8008bec <remove_chain+0x26>
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	695b      	ldr	r3, [r3, #20]
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d301      	bcc.n	8008bf0 <remove_chain+0x2a>
 8008bec:	2302      	movs	r3, #2
 8008bee:	e04b      	b.n	8008c88 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00c      	beq.n	8008c10 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bfa:	6879      	ldr	r1, [r7, #4]
 8008bfc:	69b8      	ldr	r0, [r7, #24]
 8008bfe:	f7ff fef6 	bl	80089ee <put_fat>
 8008c02:	4603      	mov	r3, r0
 8008c04:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008c06:	7ffb      	ldrb	r3, [r7, #31]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <remove_chain+0x4a>
 8008c0c:	7ffb      	ldrb	r3, [r7, #31]
 8008c0e:	e03b      	b.n	8008c88 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008c10:	68b9      	ldr	r1, [r7, #8]
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f7ff fe43 	bl	800889e <get_fat>
 8008c18:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d031      	beq.n	8008c84 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d101      	bne.n	8008c2a <remove_chain+0x64>
 8008c26:	2302      	movs	r3, #2
 8008c28:	e02e      	b.n	8008c88 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c30:	d101      	bne.n	8008c36 <remove_chain+0x70>
 8008c32:	2301      	movs	r3, #1
 8008c34:	e028      	b.n	8008c88 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008c36:	2200      	movs	r2, #0
 8008c38:	68b9      	ldr	r1, [r7, #8]
 8008c3a:	69b8      	ldr	r0, [r7, #24]
 8008c3c:	f7ff fed7 	bl	80089ee <put_fat>
 8008c40:	4603      	mov	r3, r0
 8008c42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008c44:	7ffb      	ldrb	r3, [r7, #31]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <remove_chain+0x88>
 8008c4a:	7ffb      	ldrb	r3, [r7, #31]
 8008c4c:	e01c      	b.n	8008c88 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	691a      	ldr	r2, [r3, #16]
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	3b02      	subs	r3, #2
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d20b      	bcs.n	8008c74 <remove_chain+0xae>
			fs->free_clst++;
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	1c5a      	adds	r2, r3, #1
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	791b      	ldrb	r3, [r3, #4]
 8008c6a:	f043 0301 	orr.w	r3, r3, #1
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	695b      	ldr	r3, [r3, #20]
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d3c6      	bcc.n	8008c10 <remove_chain+0x4a>
 8008c82:	e000      	b.n	8008c86 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008c84:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3720      	adds	r7, #32
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b088      	sub	sp, #32
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10d      	bne.n	8008cc2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d004      	beq.n	8008cbc <create_chain+0x2c>
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d31b      	bcc.n	8008cf4 <create_chain+0x64>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	61bb      	str	r3, [r7, #24]
 8008cc0:	e018      	b.n	8008cf4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f7ff fdea 	bl	800889e <get_fat>
 8008cca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d801      	bhi.n	8008cd6 <create_chain+0x46>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e070      	b.n	8008db8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cdc:	d101      	bne.n	8008ce2 <create_chain+0x52>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	e06a      	b.n	8008db8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d201      	bcs.n	8008cf0 <create_chain+0x60>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	e063      	b.n	8008db8 <create_chain+0x128>
		scl = clst;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	69fa      	ldr	r2, [r7, #28]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d307      	bcc.n	8008d18 <create_chain+0x88>
				ncl = 2;
 8008d08:	2302      	movs	r3, #2
 8008d0a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008d0c:	69fa      	ldr	r2, [r7, #28]
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d901      	bls.n	8008d18 <create_chain+0x88>
 8008d14:	2300      	movs	r3, #0
 8008d16:	e04f      	b.n	8008db8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008d18:	69f9      	ldr	r1, [r7, #28]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7ff fdbf 	bl	800889e <get_fat>
 8008d20:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00e      	beq.n	8008d46 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d003      	beq.n	8008d36 <create_chain+0xa6>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d34:	d101      	bne.n	8008d3a <create_chain+0xaa>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	e03e      	b.n	8008db8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008d3a:	69fa      	ldr	r2, [r7, #28]
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d1da      	bne.n	8008cf8 <create_chain+0x68>
 8008d42:	2300      	movs	r3, #0
 8008d44:	e038      	b.n	8008db8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008d46:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008d48:	f04f 32ff 	mov.w	r2, #4294967295
 8008d4c:	69f9      	ldr	r1, [r7, #28]
 8008d4e:	6938      	ldr	r0, [r7, #16]
 8008d50:	f7ff fe4d 	bl	80089ee <put_fat>
 8008d54:	4603      	mov	r3, r0
 8008d56:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008d58:	7dfb      	ldrb	r3, [r7, #23]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d109      	bne.n	8008d72 <create_chain+0xe2>
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d006      	beq.n	8008d72 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008d64:	69fa      	ldr	r2, [r7, #28]
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6938      	ldr	r0, [r7, #16]
 8008d6a:	f7ff fe40 	bl	80089ee <put_fat>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008d72:	7dfb      	ldrb	r3, [r7, #23]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d116      	bne.n	8008da6 <create_chain+0x116>
		fs->last_clst = ncl;
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	69fa      	ldr	r2, [r7, #28]
 8008d7c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	691a      	ldr	r2, [r3, #16]
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	3b02      	subs	r3, #2
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d804      	bhi.n	8008d96 <create_chain+0x106>
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	1e5a      	subs	r2, r3, #1
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	791b      	ldrb	r3, [r3, #4]
 8008d9a:	f043 0301 	orr.w	r3, r3, #1
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	711a      	strb	r2, [r3, #4]
 8008da4:	e007      	b.n	8008db6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008da6:	7dfb      	ldrb	r3, [r7, #23]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d102      	bne.n	8008db2 <create_chain+0x122>
 8008dac:	f04f 33ff 	mov.w	r3, #4294967295
 8008db0:	e000      	b.n	8008db4 <create_chain+0x124>
 8008db2:	2301      	movs	r3, #1
 8008db4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008db6:	69fb      	ldr	r3, [r7, #28]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3720      	adds	r7, #32
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b087      	sub	sp, #28
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	0a5b      	lsrs	r3, r3, #9
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	8952      	ldrh	r2, [r2, #10]
 8008de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008de4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	1d1a      	adds	r2, r3, #4
 8008dea:	613a      	str	r2, [r7, #16]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <clmt_clust+0x3a>
 8008df6:	2300      	movs	r3, #0
 8008df8:	e010      	b.n	8008e1c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d307      	bcc.n	8008e12 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	617b      	str	r3, [r7, #20]
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e10:	e7e9      	b.n	8008de6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008e12:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	4413      	add	r3, r2
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	371c      	adds	r7, #28
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e3e:	d204      	bcs.n	8008e4a <dir_sdi+0x22>
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	f003 031f 	and.w	r3, r3, #31
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <dir_sdi+0x26>
		return FR_INT_ERR;
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	e063      	b.n	8008f16 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	683a      	ldr	r2, [r7, #0]
 8008e52:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d106      	bne.n	8008e6e <dir_sdi+0x46>
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d902      	bls.n	8008e6e <dir_sdi+0x46>
		clst = fs->dirbase;
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10c      	bne.n	8008e8e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	095b      	lsrs	r3, r3, #5
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	8912      	ldrh	r2, [r2, #8]
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d301      	bcc.n	8008e84 <dir_sdi+0x5c>
 8008e80:	2302      	movs	r3, #2
 8008e82:	e048      	b.n	8008f16 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	61da      	str	r2, [r3, #28]
 8008e8c:	e029      	b.n	8008ee2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	895b      	ldrh	r3, [r3, #10]
 8008e92:	025b      	lsls	r3, r3, #9
 8008e94:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008e96:	e019      	b.n	8008ecc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6979      	ldr	r1, [r7, #20]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7ff fcfe 	bl	800889e <get_fat>
 8008ea2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eaa:	d101      	bne.n	8008eb0 <dir_sdi+0x88>
 8008eac:	2301      	movs	r3, #1
 8008eae:	e032      	b.n	8008f16 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d904      	bls.n	8008ec0 <dir_sdi+0x98>
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d301      	bcc.n	8008ec4 <dir_sdi+0x9c>
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	e028      	b.n	8008f16 <dir_sdi+0xee>
			ofs -= csz;
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d2e1      	bcs.n	8008e98 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008ed4:	6979      	ldr	r1, [r7, #20]
 8008ed6:	6938      	ldr	r0, [r7, #16]
 8008ed8:	f7ff fcc2 	bl	8008860 <clust2sect>
 8008edc:	4602      	mov	r2, r0
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d101      	bne.n	8008ef4 <dir_sdi+0xcc>
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	e010      	b.n	8008f16 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	69da      	ldr	r2, [r3, #28]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	0a5b      	lsrs	r3, r3, #9
 8008efc:	441a      	add	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f0e:	441a      	add	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3718      	adds	r7, #24
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b086      	sub	sp, #24
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	3320      	adds	r3, #32
 8008f34:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d003      	beq.n	8008f46 <dir_next+0x28>
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f44:	d301      	bcc.n	8008f4a <dir_next+0x2c>
 8008f46:	2304      	movs	r3, #4
 8008f48:	e0aa      	b.n	80090a0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f040 8098 	bne.w	8009086 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10b      	bne.n	8008f80 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	095b      	lsrs	r3, r3, #5
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	8912      	ldrh	r2, [r2, #8]
 8008f70:	4293      	cmp	r3, r2
 8008f72:	f0c0 8088 	bcc.w	8009086 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	61da      	str	r2, [r3, #28]
 8008f7c:	2304      	movs	r3, #4
 8008f7e:	e08f      	b.n	80090a0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	0a5b      	lsrs	r3, r3, #9
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	8952      	ldrh	r2, [r2, #10]
 8008f88:	3a01      	subs	r2, #1
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d17a      	bne.n	8009086 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	4619      	mov	r1, r3
 8008f98:	4610      	mov	r0, r2
 8008f9a:	f7ff fc80 	bl	800889e <get_fat>
 8008f9e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d801      	bhi.n	8008faa <dir_next+0x8c>
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	e07a      	b.n	80090a0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb0:	d101      	bne.n	8008fb6 <dir_next+0x98>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e074      	b.n	80090a0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	695b      	ldr	r3, [r3, #20]
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d358      	bcc.n	8009072 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d104      	bne.n	8008fd0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	61da      	str	r2, [r3, #28]
 8008fcc:	2304      	movs	r3, #4
 8008fce:	e067      	b.n	80090a0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	4610      	mov	r0, r2
 8008fda:	f7ff fe59 	bl	8008c90 <create_chain>
 8008fde:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d101      	bne.n	8008fea <dir_next+0xcc>
 8008fe6:	2307      	movs	r3, #7
 8008fe8:	e05a      	b.n	80090a0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d101      	bne.n	8008ff4 <dir_next+0xd6>
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e055      	b.n	80090a0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffa:	d101      	bne.n	8009000 <dir_next+0xe2>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e04f      	b.n	80090a0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f7ff fb4d 	bl	80086a0 <sync_window>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d001      	beq.n	8009010 <dir_next+0xf2>
 800900c:	2301      	movs	r3, #1
 800900e:	e047      	b.n	80090a0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	3330      	adds	r3, #48	; 0x30
 8009014:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009018:	2100      	movs	r1, #0
 800901a:	4618      	mov	r0, r3
 800901c:	f7ff f977 	bl	800830e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009020:	2300      	movs	r3, #0
 8009022:	613b      	str	r3, [r7, #16]
 8009024:	6979      	ldr	r1, [r7, #20]
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f7ff fc1a 	bl	8008860 <clust2sect>
 800902c:	4602      	mov	r2, r0
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	62da      	str	r2, [r3, #44]	; 0x2c
 8009032:	e012      	b.n	800905a <dir_next+0x13c>
						fs->wflag = 1;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2201      	movs	r2, #1
 8009038:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f7ff fb30 	bl	80086a0 <sync_window>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <dir_next+0x12c>
 8009046:	2301      	movs	r3, #1
 8009048:	e02a      	b.n	80090a0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	3301      	adds	r3, #1
 800904e:	613b      	str	r3, [r7, #16]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009054:	1c5a      	adds	r2, r3, #1
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	62da      	str	r2, [r3, #44]	; 0x2c
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	895b      	ldrh	r3, [r3, #10]
 800905e:	461a      	mov	r2, r3
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	4293      	cmp	r3, r2
 8009064:	d3e6      	bcc.n	8009034 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	1ad2      	subs	r2, r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	697a      	ldr	r2, [r7, #20]
 8009076:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009078:	6979      	ldr	r1, [r7, #20]
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f7ff fbf0 	bl	8008860 <clust2sect>
 8009080:	4602      	mov	r2, r0
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009098:	441a      	add	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3718      	adds	r7, #24
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80090b8:	2100      	movs	r1, #0
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7ff feb4 	bl	8008e28 <dir_sdi>
 80090c0:	4603      	mov	r3, r0
 80090c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80090c4:	7dfb      	ldrb	r3, [r7, #23]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d12b      	bne.n	8009122 <dir_alloc+0x7a>
		n = 0;
 80090ca:	2300      	movs	r3, #0
 80090cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	4619      	mov	r1, r3
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f7ff fb27 	bl	8008728 <move_window>
 80090da:	4603      	mov	r3, r0
 80090dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80090de:	7dfb      	ldrb	r3, [r7, #23]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d11d      	bne.n	8009120 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	2be5      	cmp	r3, #229	; 0xe5
 80090ec:	d004      	beq.n	80090f8 <dir_alloc+0x50>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a1b      	ldr	r3, [r3, #32]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d107      	bne.n	8009108 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	3301      	adds	r3, #1
 80090fc:	613b      	str	r3, [r7, #16]
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	429a      	cmp	r2, r3
 8009104:	d102      	bne.n	800910c <dir_alloc+0x64>
 8009106:	e00c      	b.n	8009122 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009108:	2300      	movs	r3, #0
 800910a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800910c:	2101      	movs	r1, #1
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7ff ff05 	bl	8008f1e <dir_next>
 8009114:	4603      	mov	r3, r0
 8009116:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009118:	7dfb      	ldrb	r3, [r7, #23]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d0d7      	beq.n	80090ce <dir_alloc+0x26>
 800911e:	e000      	b.n	8009122 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009120:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009122:	7dfb      	ldrb	r3, [r7, #23]
 8009124:	2b04      	cmp	r3, #4
 8009126:	d101      	bne.n	800912c <dir_alloc+0x84>
 8009128:	2307      	movs	r3, #7
 800912a:	75fb      	strb	r3, [r7, #23]
	return res;
 800912c:	7dfb      	ldrb	r3, [r7, #23]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3718      	adds	r7, #24
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b084      	sub	sp, #16
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	331a      	adds	r3, #26
 8009144:	4618      	mov	r0, r3
 8009146:	f7ff f83f 	bl	80081c8 <ld_word>
 800914a:	4603      	mov	r3, r0
 800914c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	2b03      	cmp	r3, #3
 8009154:	d109      	bne.n	800916a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	3314      	adds	r3, #20
 800915a:	4618      	mov	r0, r3
 800915c:	f7ff f834 	bl	80081c8 <ld_word>
 8009160:	4603      	mov	r3, r0
 8009162:	041b      	lsls	r3, r3, #16
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	4313      	orrs	r3, r2
 8009168:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800916a:	68fb      	ldr	r3, [r7, #12]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	331a      	adds	r3, #26
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	b292      	uxth	r2, r2
 8009188:	4611      	mov	r1, r2
 800918a:	4618      	mov	r0, r3
 800918c:	f7ff f857 	bl	800823e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	2b03      	cmp	r3, #3
 8009196:	d109      	bne.n	80091ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	f103 0214 	add.w	r2, r3, #20
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	0c1b      	lsrs	r3, r3, #16
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	4619      	mov	r1, r3
 80091a6:	4610      	mov	r0, r2
 80091a8:	f7ff f849 	bl	800823e <st_word>
	}
}
 80091ac:	bf00      	nop
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80091c2:	2100      	movs	r1, #0
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7ff fe2f 	bl	8008e28 <dir_sdi>
 80091ca:	4603      	mov	r3, r0
 80091cc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <dir_find+0x24>
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	e03e      	b.n	8009256 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	4619      	mov	r1, r3
 80091de:	6938      	ldr	r0, [r7, #16]
 80091e0:	f7ff faa2 	bl	8008728 <move_window>
 80091e4:	4603      	mov	r3, r0
 80091e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80091e8:	7dfb      	ldrb	r3, [r7, #23]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d12f      	bne.n	800924e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d102      	bne.n	8009202 <dir_find+0x4e>
 80091fc:	2304      	movs	r3, #4
 80091fe:	75fb      	strb	r3, [r7, #23]
 8009200:	e028      	b.n	8009254 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	330b      	adds	r3, #11
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800920e:	b2da      	uxtb	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	330b      	adds	r3, #11
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	f003 0308 	and.w	r3, r3, #8
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10a      	bne.n	800923a <dir_find+0x86>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a18      	ldr	r0, [r3, #32]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	3324      	adds	r3, #36	; 0x24
 800922c:	220b      	movs	r2, #11
 800922e:	4619      	mov	r1, r3
 8009230:	f7ff f888 	bl	8008344 <mem_cmp>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00b      	beq.n	8009252 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800923a:	2100      	movs	r1, #0
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7ff fe6e 	bl	8008f1e <dir_next>
 8009242:	4603      	mov	r3, r0
 8009244:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d0c5      	beq.n	80091d8 <dir_find+0x24>
 800924c:	e002      	b.n	8009254 <dir_find+0xa0>
		if (res != FR_OK) break;
 800924e:	bf00      	nop
 8009250:	e000      	b.n	8009254 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009252:	bf00      	nop

	return res;
 8009254:	7dfb      	ldrb	r3, [r7, #23]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b084      	sub	sp, #16
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800926c:	2101      	movs	r1, #1
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f7ff ff1a 	bl	80090a8 <dir_alloc>
 8009274:	4603      	mov	r3, r0
 8009276:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009278:	7bfb      	ldrb	r3, [r7, #15]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d11c      	bne.n	80092b8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	69db      	ldr	r3, [r3, #28]
 8009282:	4619      	mov	r1, r3
 8009284:	68b8      	ldr	r0, [r7, #8]
 8009286:	f7ff fa4f 	bl	8008728 <move_window>
 800928a:	4603      	mov	r3, r0
 800928c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800928e:	7bfb      	ldrb	r3, [r7, #15]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d111      	bne.n	80092b8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a1b      	ldr	r3, [r3, #32]
 8009298:	2220      	movs	r2, #32
 800929a:	2100      	movs	r1, #0
 800929c:	4618      	mov	r0, r3
 800929e:	f7ff f836 	bl	800830e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a18      	ldr	r0, [r3, #32]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	3324      	adds	r3, #36	; 0x24
 80092aa:	220b      	movs	r2, #11
 80092ac:	4619      	mov	r1, r3
 80092ae:	f7ff f80d 	bl	80082cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	2201      	movs	r2, #1
 80092b6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80092b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b088      	sub	sp, #32
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	3324      	adds	r3, #36	; 0x24
 80092d8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80092da:	220b      	movs	r2, #11
 80092dc:	2120      	movs	r1, #32
 80092de:	68b8      	ldr	r0, [r7, #8]
 80092e0:	f7ff f815 	bl	800830e <mem_set>
	si = i = 0; ni = 8;
 80092e4:	2300      	movs	r3, #0
 80092e6:	613b      	str	r3, [r7, #16]
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	61fb      	str	r3, [r7, #28]
 80092ec:	2308      	movs	r3, #8
 80092ee:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	1c5a      	adds	r2, r3, #1
 80092f4:	61fa      	str	r2, [r7, #28]
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	4413      	add	r3, r2
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80092fe:	7efb      	ldrb	r3, [r7, #27]
 8009300:	2b20      	cmp	r3, #32
 8009302:	d94e      	bls.n	80093a2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009304:	7efb      	ldrb	r3, [r7, #27]
 8009306:	2b2f      	cmp	r3, #47	; 0x2f
 8009308:	d006      	beq.n	8009318 <create_name+0x54>
 800930a:	7efb      	ldrb	r3, [r7, #27]
 800930c:	2b5c      	cmp	r3, #92	; 0x5c
 800930e:	d110      	bne.n	8009332 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009310:	e002      	b.n	8009318 <create_name+0x54>
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	3301      	adds	r3, #1
 8009316:	61fb      	str	r3, [r7, #28]
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	4413      	add	r3, r2
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	2b2f      	cmp	r3, #47	; 0x2f
 8009322:	d0f6      	beq.n	8009312 <create_name+0x4e>
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	4413      	add	r3, r2
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	2b5c      	cmp	r3, #92	; 0x5c
 800932e:	d0f0      	beq.n	8009312 <create_name+0x4e>
			break;
 8009330:	e038      	b.n	80093a4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009332:	7efb      	ldrb	r3, [r7, #27]
 8009334:	2b2e      	cmp	r3, #46	; 0x2e
 8009336:	d003      	beq.n	8009340 <create_name+0x7c>
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	429a      	cmp	r2, r3
 800933e:	d30c      	bcc.n	800935a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	2b0b      	cmp	r3, #11
 8009344:	d002      	beq.n	800934c <create_name+0x88>
 8009346:	7efb      	ldrb	r3, [r7, #27]
 8009348:	2b2e      	cmp	r3, #46	; 0x2e
 800934a:	d001      	beq.n	8009350 <create_name+0x8c>
 800934c:	2306      	movs	r3, #6
 800934e:	e044      	b.n	80093da <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009350:	2308      	movs	r3, #8
 8009352:	613b      	str	r3, [r7, #16]
 8009354:	230b      	movs	r3, #11
 8009356:	617b      	str	r3, [r7, #20]
			continue;
 8009358:	e022      	b.n	80093a0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800935a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800935e:	2b00      	cmp	r3, #0
 8009360:	da04      	bge.n	800936c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009362:	7efb      	ldrb	r3, [r7, #27]
 8009364:	3b80      	subs	r3, #128	; 0x80
 8009366:	4a1f      	ldr	r2, [pc, #124]	; (80093e4 <create_name+0x120>)
 8009368:	5cd3      	ldrb	r3, [r2, r3]
 800936a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800936c:	7efb      	ldrb	r3, [r7, #27]
 800936e:	4619      	mov	r1, r3
 8009370:	481d      	ldr	r0, [pc, #116]	; (80093e8 <create_name+0x124>)
 8009372:	f7ff f80e 	bl	8008392 <chk_chr>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <create_name+0xbc>
 800937c:	2306      	movs	r3, #6
 800937e:	e02c      	b.n	80093da <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009380:	7efb      	ldrb	r3, [r7, #27]
 8009382:	2b60      	cmp	r3, #96	; 0x60
 8009384:	d905      	bls.n	8009392 <create_name+0xce>
 8009386:	7efb      	ldrb	r3, [r7, #27]
 8009388:	2b7a      	cmp	r3, #122	; 0x7a
 800938a:	d802      	bhi.n	8009392 <create_name+0xce>
 800938c:	7efb      	ldrb	r3, [r7, #27]
 800938e:	3b20      	subs	r3, #32
 8009390:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	1c5a      	adds	r2, r3, #1
 8009396:	613a      	str	r2, [r7, #16]
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	4413      	add	r3, r2
 800939c:	7efa      	ldrb	r2, [r7, #27]
 800939e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80093a0:	e7a6      	b.n	80092f0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80093a2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	441a      	add	r2, r3
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d101      	bne.n	80093b8 <create_name+0xf4>
 80093b4:	2306      	movs	r3, #6
 80093b6:	e010      	b.n	80093da <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	2be5      	cmp	r3, #229	; 0xe5
 80093be:	d102      	bne.n	80093c6 <create_name+0x102>
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2205      	movs	r2, #5
 80093c4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80093c6:	7efb      	ldrb	r3, [r7, #27]
 80093c8:	2b20      	cmp	r3, #32
 80093ca:	d801      	bhi.n	80093d0 <create_name+0x10c>
 80093cc:	2204      	movs	r2, #4
 80093ce:	e000      	b.n	80093d2 <create_name+0x10e>
 80093d0:	2200      	movs	r2, #0
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	330b      	adds	r3, #11
 80093d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80093d8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3720      	adds	r7, #32
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	0800d2fc 	.word	0x0800d2fc
 80093e8:	0800d294 	.word	0x0800d294

080093ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009400:	e002      	b.n	8009408 <follow_path+0x1c>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	3301      	adds	r3, #1
 8009406:	603b      	str	r3, [r7, #0]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	2b2f      	cmp	r3, #47	; 0x2f
 800940e:	d0f8      	beq.n	8009402 <follow_path+0x16>
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	2b5c      	cmp	r3, #92	; 0x5c
 8009416:	d0f4      	beq.n	8009402 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	2200      	movs	r2, #0
 800941c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	2b1f      	cmp	r3, #31
 8009424:	d80a      	bhi.n	800943c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2280      	movs	r2, #128	; 0x80
 800942a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800942e:	2100      	movs	r1, #0
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7ff fcf9 	bl	8008e28 <dir_sdi>
 8009436:	4603      	mov	r3, r0
 8009438:	75fb      	strb	r3, [r7, #23]
 800943a:	e043      	b.n	80094c4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800943c:	463b      	mov	r3, r7
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7ff ff3f 	bl	80092c4 <create_name>
 8009446:	4603      	mov	r3, r0
 8009448:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800944a:	7dfb      	ldrb	r3, [r7, #23]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d134      	bne.n	80094ba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7ff feaf 	bl	80091b4 <dir_find>
 8009456:	4603      	mov	r3, r0
 8009458:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009460:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009462:	7dfb      	ldrb	r3, [r7, #23]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00a      	beq.n	800947e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009468:	7dfb      	ldrb	r3, [r7, #23]
 800946a:	2b04      	cmp	r3, #4
 800946c:	d127      	bne.n	80094be <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800946e:	7afb      	ldrb	r3, [r7, #11]
 8009470:	f003 0304 	and.w	r3, r3, #4
 8009474:	2b00      	cmp	r3, #0
 8009476:	d122      	bne.n	80094be <follow_path+0xd2>
 8009478:	2305      	movs	r3, #5
 800947a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800947c:	e01f      	b.n	80094be <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800947e:	7afb      	ldrb	r3, [r7, #11]
 8009480:	f003 0304 	and.w	r3, r3, #4
 8009484:	2b00      	cmp	r3, #0
 8009486:	d11c      	bne.n	80094c2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	799b      	ldrb	r3, [r3, #6]
 800948c:	f003 0310 	and.w	r3, r3, #16
 8009490:	2b00      	cmp	r3, #0
 8009492:	d102      	bne.n	800949a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009494:	2305      	movs	r3, #5
 8009496:	75fb      	strb	r3, [r7, #23]
 8009498:	e014      	b.n	80094c4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094a8:	4413      	add	r3, r2
 80094aa:	4619      	mov	r1, r3
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f7ff fe42 	bl	8009136 <ld_clust>
 80094b2:	4602      	mov	r2, r0
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80094b8:	e7c0      	b.n	800943c <follow_path+0x50>
			if (res != FR_OK) break;
 80094ba:	bf00      	nop
 80094bc:	e002      	b.n	80094c4 <follow_path+0xd8>
				break;
 80094be:	bf00      	nop
 80094c0:	e000      	b.n	80094c4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80094c2:	bf00      	nop
			}
		}
	}

	return res;
 80094c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3718      	adds	r7, #24
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b087      	sub	sp, #28
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80094d6:	f04f 33ff 	mov.w	r3, #4294967295
 80094da:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d031      	beq.n	8009548 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	617b      	str	r3, [r7, #20]
 80094ea:	e002      	b.n	80094f2 <get_ldnumber+0x24>
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	3301      	adds	r3, #1
 80094f0:	617b      	str	r3, [r7, #20]
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	2b20      	cmp	r3, #32
 80094f8:	d903      	bls.n	8009502 <get_ldnumber+0x34>
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	2b3a      	cmp	r3, #58	; 0x3a
 8009500:	d1f4      	bne.n	80094ec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	2b3a      	cmp	r3, #58	; 0x3a
 8009508:	d11c      	bne.n	8009544 <get_ldnumber+0x76>
			tp = *path;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	1c5a      	adds	r2, r3, #1
 8009514:	60fa      	str	r2, [r7, #12]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	3b30      	subs	r3, #48	; 0x30
 800951a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	2b09      	cmp	r3, #9
 8009520:	d80e      	bhi.n	8009540 <get_ldnumber+0x72>
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	429a      	cmp	r2, r3
 8009528:	d10a      	bne.n	8009540 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d107      	bne.n	8009540 <get_ldnumber+0x72>
					vol = (int)i;
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	3301      	adds	r3, #1
 8009538:	617b      	str	r3, [r7, #20]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	e002      	b.n	800954a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009544:	2300      	movs	r3, #0
 8009546:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009548:	693b      	ldr	r3, [r7, #16]
}
 800954a:	4618      	mov	r0, r3
 800954c:	371c      	adds	r7, #28
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
	...

08009558 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	70da      	strb	r2, [r3, #3]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f04f 32ff 	mov.w	r2, #4294967295
 800956e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7ff f8d8 	bl	8008728 <move_window>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d001      	beq.n	8009582 <check_fs+0x2a>
 800957e:	2304      	movs	r3, #4
 8009580:	e038      	b.n	80095f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	3330      	adds	r3, #48	; 0x30
 8009586:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800958a:	4618      	mov	r0, r3
 800958c:	f7fe fe1c 	bl	80081c8 <ld_word>
 8009590:	4603      	mov	r3, r0
 8009592:	461a      	mov	r2, r3
 8009594:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009598:	429a      	cmp	r2, r3
 800959a:	d001      	beq.n	80095a0 <check_fs+0x48>
 800959c:	2303      	movs	r3, #3
 800959e:	e029      	b.n	80095f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80095a6:	2be9      	cmp	r3, #233	; 0xe9
 80095a8:	d009      	beq.n	80095be <check_fs+0x66>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80095b0:	2beb      	cmp	r3, #235	; 0xeb
 80095b2:	d11e      	bne.n	80095f2 <check_fs+0x9a>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80095ba:	2b90      	cmp	r3, #144	; 0x90
 80095bc:	d119      	bne.n	80095f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	3330      	adds	r3, #48	; 0x30
 80095c2:	3336      	adds	r3, #54	; 0x36
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7fe fe17 	bl	80081f8 <ld_dword>
 80095ca:	4603      	mov	r3, r0
 80095cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80095d0:	4a0a      	ldr	r2, [pc, #40]	; (80095fc <check_fs+0xa4>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d101      	bne.n	80095da <check_fs+0x82>
 80095d6:	2300      	movs	r3, #0
 80095d8:	e00c      	b.n	80095f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	3330      	adds	r3, #48	; 0x30
 80095de:	3352      	adds	r3, #82	; 0x52
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fe fe09 	bl	80081f8 <ld_dword>
 80095e6:	4603      	mov	r3, r0
 80095e8:	4a05      	ldr	r2, [pc, #20]	; (8009600 <check_fs+0xa8>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d101      	bne.n	80095f2 <check_fs+0x9a>
 80095ee:	2300      	movs	r3, #0
 80095f0:	e000      	b.n	80095f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80095f2:	2302      	movs	r3, #2
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	00544146 	.word	0x00544146
 8009600:	33544146 	.word	0x33544146

08009604 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b096      	sub	sp, #88	; 0x58
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	4613      	mov	r3, r2
 8009610:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	2200      	movs	r2, #0
 8009616:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f7ff ff58 	bl	80094ce <get_ldnumber>
 800961e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009622:	2b00      	cmp	r3, #0
 8009624:	da01      	bge.n	800962a <find_volume+0x26>
 8009626:	230b      	movs	r3, #11
 8009628:	e22e      	b.n	8009a88 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800962a:	4aa8      	ldr	r2, [pc, #672]	; (80098cc <find_volume+0x2c8>)
 800962c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800962e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009632:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009636:	2b00      	cmp	r3, #0
 8009638:	d101      	bne.n	800963e <find_volume+0x3a>
 800963a:	230c      	movs	r3, #12
 800963c:	e224      	b.n	8009a88 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009642:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	f023 0301 	bic.w	r3, r3, #1
 800964a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800964c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d01a      	beq.n	800968a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009656:	785b      	ldrb	r3, [r3, #1]
 8009658:	4618      	mov	r0, r3
 800965a:	f7fe fd17 	bl	800808c <disk_status>
 800965e:	4603      	mov	r3, r0
 8009660:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009664:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009668:	f003 0301 	and.w	r3, r3, #1
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10c      	bne.n	800968a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009670:	79fb      	ldrb	r3, [r7, #7]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d007      	beq.n	8009686 <find_volume+0x82>
 8009676:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800967a:	f003 0304 	and.w	r3, r3, #4
 800967e:	2b00      	cmp	r3, #0
 8009680:	d001      	beq.n	8009686 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009682:	230a      	movs	r3, #10
 8009684:	e200      	b.n	8009a88 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8009686:	2300      	movs	r3, #0
 8009688:	e1fe      	b.n	8009a88 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800968a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968c:	2200      	movs	r2, #0
 800968e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009692:	b2da      	uxtb	r2, r3
 8009694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009696:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969a:	785b      	ldrb	r3, [r3, #1]
 800969c:	4618      	mov	r0, r3
 800969e:	f7fe fd0f 	bl	80080c0 <disk_initialize>
 80096a2:	4603      	mov	r3, r0
 80096a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80096a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80096b4:	2303      	movs	r3, #3
 80096b6:	e1e7      	b.n	8009a88 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80096b8:	79fb      	ldrb	r3, [r7, #7]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d007      	beq.n	80096ce <find_volume+0xca>
 80096be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096c2:	f003 0304 	and.w	r3, r3, #4
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80096ca:	230a      	movs	r3, #10
 80096cc:	e1dc      	b.n	8009a88 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80096ce:	2300      	movs	r3, #0
 80096d0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80096d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80096d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096d6:	f7ff ff3f 	bl	8009558 <check_fs>
 80096da:	4603      	mov	r3, r0
 80096dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80096e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096e4:	2b02      	cmp	r3, #2
 80096e6:	d14b      	bne.n	8009780 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80096e8:	2300      	movs	r3, #0
 80096ea:	643b      	str	r3, [r7, #64]	; 0x40
 80096ec:	e01f      	b.n	800972e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80096ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096f6:	011b      	lsls	r3, r3, #4
 80096f8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80096fc:	4413      	add	r3, r2
 80096fe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009702:	3304      	adds	r3, #4
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d006      	beq.n	8009718 <find_volume+0x114>
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	3308      	adds	r3, #8
 800970e:	4618      	mov	r0, r3
 8009710:	f7fe fd72 	bl	80081f8 <ld_dword>
 8009714:	4602      	mov	r2, r0
 8009716:	e000      	b.n	800971a <find_volume+0x116>
 8009718:	2200      	movs	r2, #0
 800971a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009722:	440b      	add	r3, r1
 8009724:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800972a:	3301      	adds	r3, #1
 800972c:	643b      	str	r3, [r7, #64]	; 0x40
 800972e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009730:	2b03      	cmp	r3, #3
 8009732:	d9dc      	bls.n	80096ee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009734:	2300      	movs	r3, #0
 8009736:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <find_volume+0x140>
 800973e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009740:	3b01      	subs	r3, #1
 8009742:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800974c:	4413      	add	r3, r2
 800974e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009752:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009756:	2b00      	cmp	r3, #0
 8009758:	d005      	beq.n	8009766 <find_volume+0x162>
 800975a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800975c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800975e:	f7ff fefb 	bl	8009558 <check_fs>
 8009762:	4603      	mov	r3, r0
 8009764:	e000      	b.n	8009768 <find_volume+0x164>
 8009766:	2303      	movs	r3, #3
 8009768:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800976c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009770:	2b01      	cmp	r3, #1
 8009772:	d905      	bls.n	8009780 <find_volume+0x17c>
 8009774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009776:	3301      	adds	r3, #1
 8009778:	643b      	str	r3, [r7, #64]	; 0x40
 800977a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800977c:	2b03      	cmp	r3, #3
 800977e:	d9e1      	bls.n	8009744 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009780:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009784:	2b04      	cmp	r3, #4
 8009786:	d101      	bne.n	800978c <find_volume+0x188>
 8009788:	2301      	movs	r3, #1
 800978a:	e17d      	b.n	8009a88 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800978c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009790:	2b01      	cmp	r3, #1
 8009792:	d901      	bls.n	8009798 <find_volume+0x194>
 8009794:	230d      	movs	r3, #13
 8009796:	e177      	b.n	8009a88 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979a:	3330      	adds	r3, #48	; 0x30
 800979c:	330b      	adds	r3, #11
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fe fd12 	bl	80081c8 <ld_word>
 80097a4:	4603      	mov	r3, r0
 80097a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097aa:	d001      	beq.n	80097b0 <find_volume+0x1ac>
 80097ac:	230d      	movs	r3, #13
 80097ae:	e16b      	b.n	8009a88 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80097b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b2:	3330      	adds	r3, #48	; 0x30
 80097b4:	3316      	adds	r3, #22
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fe fd06 	bl	80081c8 <ld_word>
 80097bc:	4603      	mov	r3, r0
 80097be:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80097c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d106      	bne.n	80097d4 <find_volume+0x1d0>
 80097c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c8:	3330      	adds	r3, #48	; 0x30
 80097ca:	3324      	adds	r3, #36	; 0x24
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fe fd13 	bl	80081f8 <ld_dword>
 80097d2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80097d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097d8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80097da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097dc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80097e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80097e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e6:	789b      	ldrb	r3, [r3, #2]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d005      	beq.n	80097f8 <find_volume+0x1f4>
 80097ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ee:	789b      	ldrb	r3, [r3, #2]
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d001      	beq.n	80097f8 <find_volume+0x1f4>
 80097f4:	230d      	movs	r3, #13
 80097f6:	e147      	b.n	8009a88 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80097f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fa:	789b      	ldrb	r3, [r3, #2]
 80097fc:	461a      	mov	r2, r3
 80097fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009800:	fb02 f303 	mul.w	r3, r2, r3
 8009804:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800980c:	b29a      	uxth	r2, r3
 800980e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009810:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009814:	895b      	ldrh	r3, [r3, #10]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d008      	beq.n	800982c <find_volume+0x228>
 800981a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981c:	895b      	ldrh	r3, [r3, #10]
 800981e:	461a      	mov	r2, r3
 8009820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009822:	895b      	ldrh	r3, [r3, #10]
 8009824:	3b01      	subs	r3, #1
 8009826:	4013      	ands	r3, r2
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <find_volume+0x22c>
 800982c:	230d      	movs	r3, #13
 800982e:	e12b      	b.n	8009a88 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009832:	3330      	adds	r3, #48	; 0x30
 8009834:	3311      	adds	r3, #17
 8009836:	4618      	mov	r0, r3
 8009838:	f7fe fcc6 	bl	80081c8 <ld_word>
 800983c:	4603      	mov	r3, r0
 800983e:	461a      	mov	r2, r3
 8009840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009842:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	891b      	ldrh	r3, [r3, #8]
 8009848:	f003 030f 	and.w	r3, r3, #15
 800984c:	b29b      	uxth	r3, r3
 800984e:	2b00      	cmp	r3, #0
 8009850:	d001      	beq.n	8009856 <find_volume+0x252>
 8009852:	230d      	movs	r3, #13
 8009854:	e118      	b.n	8009a88 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009858:	3330      	adds	r3, #48	; 0x30
 800985a:	3313      	adds	r3, #19
 800985c:	4618      	mov	r0, r3
 800985e:	f7fe fcb3 	bl	80081c8 <ld_word>
 8009862:	4603      	mov	r3, r0
 8009864:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009868:	2b00      	cmp	r3, #0
 800986a:	d106      	bne.n	800987a <find_volume+0x276>
 800986c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986e:	3330      	adds	r3, #48	; 0x30
 8009870:	3320      	adds	r3, #32
 8009872:	4618      	mov	r0, r3
 8009874:	f7fe fcc0 	bl	80081f8 <ld_dword>
 8009878:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800987a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987c:	3330      	adds	r3, #48	; 0x30
 800987e:	330e      	adds	r3, #14
 8009880:	4618      	mov	r0, r3
 8009882:	f7fe fca1 	bl	80081c8 <ld_word>
 8009886:	4603      	mov	r3, r0
 8009888:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800988a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800988c:	2b00      	cmp	r3, #0
 800988e:	d101      	bne.n	8009894 <find_volume+0x290>
 8009890:	230d      	movs	r3, #13
 8009892:	e0f9      	b.n	8009a88 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009894:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009898:	4413      	add	r3, r2
 800989a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800989c:	8912      	ldrh	r2, [r2, #8]
 800989e:	0912      	lsrs	r2, r2, #4
 80098a0:	b292      	uxth	r2, r2
 80098a2:	4413      	add	r3, r2
 80098a4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80098a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d201      	bcs.n	80098b2 <find_volume+0x2ae>
 80098ae:	230d      	movs	r3, #13
 80098b0:	e0ea      	b.n	8009a88 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80098b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098ba:	8952      	ldrh	r2, [r2, #10]
 80098bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80098c0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80098c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d103      	bne.n	80098d0 <find_volume+0x2cc>
 80098c8:	230d      	movs	r3, #13
 80098ca:	e0dd      	b.n	8009a88 <find_volume+0x484>
 80098cc:	24001170 	.word	0x24001170
		fmt = FS_FAT32;
 80098d0:	2303      	movs	r3, #3
 80098d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80098dc:	4293      	cmp	r3, r2
 80098de:	d802      	bhi.n	80098e6 <find_volume+0x2e2>
 80098e0:	2302      	movs	r3, #2
 80098e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80098e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d802      	bhi.n	80098f6 <find_volume+0x2f2>
 80098f0:	2301      	movs	r3, #1
 80098f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80098f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f8:	1c9a      	adds	r2, r3, #2
 80098fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fc:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80098fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009900:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009902:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009904:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009908:	441a      	add	r2, r3
 800990a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800990e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009912:	441a      	add	r2, r3
 8009914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009916:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009918:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800991c:	2b03      	cmp	r3, #3
 800991e:	d11e      	bne.n	800995e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009922:	3330      	adds	r3, #48	; 0x30
 8009924:	332a      	adds	r3, #42	; 0x2a
 8009926:	4618      	mov	r0, r3
 8009928:	f7fe fc4e 	bl	80081c8 <ld_word>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <find_volume+0x332>
 8009932:	230d      	movs	r3, #13
 8009934:	e0a8      	b.n	8009a88 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009938:	891b      	ldrh	r3, [r3, #8]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d001      	beq.n	8009942 <find_volume+0x33e>
 800993e:	230d      	movs	r3, #13
 8009940:	e0a2      	b.n	8009a88 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009944:	3330      	adds	r3, #48	; 0x30
 8009946:	332c      	adds	r3, #44	; 0x2c
 8009948:	4618      	mov	r0, r3
 800994a:	f7fe fc55 	bl	80081f8 <ld_dword>
 800994e:	4602      	mov	r2, r0
 8009950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009952:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	647b      	str	r3, [r7, #68]	; 0x44
 800995c:	e01f      	b.n	800999e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800995e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009960:	891b      	ldrh	r3, [r3, #8]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <find_volume+0x366>
 8009966:	230d      	movs	r3, #13
 8009968:	e08e      	b.n	8009a88 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800996a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996c:	6a1a      	ldr	r2, [r3, #32]
 800996e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009970:	441a      	add	r2, r3
 8009972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009974:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009976:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800997a:	2b02      	cmp	r3, #2
 800997c:	d103      	bne.n	8009986 <find_volume+0x382>
 800997e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	005b      	lsls	r3, r3, #1
 8009984:	e00a      	b.n	800999c <find_volume+0x398>
 8009986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009988:	695a      	ldr	r2, [r3, #20]
 800998a:	4613      	mov	r3, r2
 800998c:	005b      	lsls	r3, r3, #1
 800998e:	4413      	add	r3, r2
 8009990:	085a      	lsrs	r2, r3, #1
 8009992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009994:	695b      	ldr	r3, [r3, #20]
 8009996:	f003 0301 	and.w	r3, r3, #1
 800999a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800999c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800999e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a0:	699a      	ldr	r2, [r3, #24]
 80099a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80099a8:	0a5b      	lsrs	r3, r3, #9
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d201      	bcs.n	80099b2 <find_volume+0x3ae>
 80099ae:	230d      	movs	r3, #13
 80099b0:	e06a      	b.n	8009a88 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80099b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b4:	f04f 32ff 	mov.w	r2, #4294967295
 80099b8:	611a      	str	r2, [r3, #16]
 80099ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099bc:	691a      	ldr	r2, [r3, #16]
 80099be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80099c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c4:	2280      	movs	r2, #128	; 0x80
 80099c6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80099c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	d149      	bne.n	8009a64 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80099d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d2:	3330      	adds	r3, #48	; 0x30
 80099d4:	3330      	adds	r3, #48	; 0x30
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fe fbf6 	bl	80081c8 <ld_word>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d140      	bne.n	8009a64 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80099e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099e4:	3301      	adds	r3, #1
 80099e6:	4619      	mov	r1, r3
 80099e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099ea:	f7fe fe9d 	bl	8008728 <move_window>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d137      	bne.n	8009a64 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80099f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f6:	2200      	movs	r2, #0
 80099f8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80099fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fc:	3330      	adds	r3, #48	; 0x30
 80099fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fe fbe0 	bl	80081c8 <ld_word>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d127      	bne.n	8009a64 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a16:	3330      	adds	r3, #48	; 0x30
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7fe fbed 	bl	80081f8 <ld_dword>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	4a1b      	ldr	r2, [pc, #108]	; (8009a90 <find_volume+0x48c>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d11e      	bne.n	8009a64 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a28:	3330      	adds	r3, #48	; 0x30
 8009a2a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fe fbe2 	bl	80081f8 <ld_dword>
 8009a34:	4603      	mov	r3, r0
 8009a36:	4a17      	ldr	r2, [pc, #92]	; (8009a94 <find_volume+0x490>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d113      	bne.n	8009a64 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3e:	3330      	adds	r3, #48	; 0x30
 8009a40:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7fe fbd7 	bl	80081f8 <ld_dword>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a52:	3330      	adds	r3, #48	; 0x30
 8009a54:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7fe fbcd 	bl	80081f8 <ld_dword>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a62:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a66:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009a6a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009a6c:	4b0a      	ldr	r3, [pc, #40]	; (8009a98 <find_volume+0x494>)
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	3301      	adds	r3, #1
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	4b08      	ldr	r3, [pc, #32]	; (8009a98 <find_volume+0x494>)
 8009a76:	801a      	strh	r2, [r3, #0]
 8009a78:	4b07      	ldr	r3, [pc, #28]	; (8009a98 <find_volume+0x494>)
 8009a7a:	881a      	ldrh	r2, [r3, #0]
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009a80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a82:	f7fe fde9 	bl	8008658 <clear_lock>
#endif
	return FR_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3758      	adds	r7, #88	; 0x58
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	41615252 	.word	0x41615252
 8009a94:	61417272 	.word	0x61417272
 8009a98:	24001174 	.word	0x24001174

08009a9c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009aa6:	2309      	movs	r3, #9
 8009aa8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d01c      	beq.n	8009aea <validate+0x4e>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d018      	beq.n	8009aea <validate+0x4e>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d013      	beq.n	8009aea <validate+0x4e>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	889a      	ldrh	r2, [r3, #4]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	88db      	ldrh	r3, [r3, #6]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d10c      	bne.n	8009aea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	785b      	ldrb	r3, [r3, #1]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7fe fad8 	bl	800808c <disk_status>
 8009adc:	4603      	mov	r3, r0
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d101      	bne.n	8009aea <validate+0x4e>
			res = FR_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d102      	bne.n	8009af6 <validate+0x5a>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	e000      	b.n	8009af8 <validate+0x5c>
 8009af6:	2300      	movs	r3, #0
 8009af8:	683a      	ldr	r2, [r7, #0]
 8009afa:	6013      	str	r3, [r2, #0]
	return res;
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
	...

08009b08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b088      	sub	sp, #32
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	4613      	mov	r3, r2
 8009b14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009b1a:	f107 0310 	add.w	r3, r7, #16
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7ff fcd5 	bl	80094ce <get_ldnumber>
 8009b24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	da01      	bge.n	8009b30 <f_mount+0x28>
 8009b2c:	230b      	movs	r3, #11
 8009b2e:	e02b      	b.n	8009b88 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009b30:	4a17      	ldr	r2, [pc, #92]	; (8009b90 <f_mount+0x88>)
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d005      	beq.n	8009b4c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009b40:	69b8      	ldr	r0, [r7, #24]
 8009b42:	f7fe fd89 	bl	8008658 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d002      	beq.n	8009b58 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2200      	movs	r2, #0
 8009b56:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	490d      	ldr	r1, [pc, #52]	; (8009b90 <f_mount+0x88>)
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d002      	beq.n	8009b6e <f_mount+0x66>
 8009b68:	79fb      	ldrb	r3, [r7, #7]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d001      	beq.n	8009b72 <f_mount+0x6a>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	e00a      	b.n	8009b88 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009b72:	f107 010c 	add.w	r1, r7, #12
 8009b76:	f107 0308 	add.w	r3, r7, #8
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7ff fd41 	bl	8009604 <find_volume>
 8009b82:	4603      	mov	r3, r0
 8009b84:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3720      	adds	r7, #32
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	24001170 	.word	0x24001170

08009b94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b098      	sub	sp, #96	; 0x60
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d101      	bne.n	8009bac <f_open+0x18>
 8009ba8:	2309      	movs	r3, #9
 8009baa:	e1ad      	b.n	8009f08 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009bac:	79fb      	ldrb	r3, [r7, #7]
 8009bae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bb2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009bb4:	79fa      	ldrb	r2, [r7, #7]
 8009bb6:	f107 0110 	add.w	r1, r7, #16
 8009bba:	f107 0308 	add.w	r3, r7, #8
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7ff fd20 	bl	8009604 <find_volume>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009bca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f040 8191 	bne.w	8009ef6 <f_open+0x362>
		dj.obj.fs = fs;
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	f107 0314 	add.w	r3, r7, #20
 8009bde:	4611      	mov	r1, r2
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7ff fc03 	bl	80093ec <follow_path>
 8009be6:	4603      	mov	r3, r0
 8009be8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009bec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d11a      	bne.n	8009c2a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009bf4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009bf8:	b25b      	sxtb	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	da03      	bge.n	8009c06 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009bfe:	2306      	movs	r3, #6
 8009c00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009c04:	e011      	b.n	8009c2a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009c06:	79fb      	ldrb	r3, [r7, #7]
 8009c08:	f023 0301 	bic.w	r3, r3, #1
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	bf14      	ite	ne
 8009c10:	2301      	movne	r3, #1
 8009c12:	2300      	moveq	r3, #0
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	461a      	mov	r2, r3
 8009c18:	f107 0314 	add.w	r3, r7, #20
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fe fbd2 	bl	80083c8 <chk_lock>
 8009c24:	4603      	mov	r3, r0
 8009c26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009c2a:	79fb      	ldrb	r3, [r7, #7]
 8009c2c:	f003 031c 	and.w	r3, r3, #28
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d07f      	beq.n	8009d34 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009c34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d017      	beq.n	8009c6c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009c3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c40:	2b04      	cmp	r3, #4
 8009c42:	d10e      	bne.n	8009c62 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009c44:	f7fe fc1c 	bl	8008480 <enq_lock>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d006      	beq.n	8009c5c <f_open+0xc8>
 8009c4e:	f107 0314 	add.w	r3, r7, #20
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7ff fb03 	bl	800925e <dir_register>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	e000      	b.n	8009c5e <f_open+0xca>
 8009c5c:	2312      	movs	r3, #18
 8009c5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009c62:	79fb      	ldrb	r3, [r7, #7]
 8009c64:	f043 0308 	orr.w	r3, r3, #8
 8009c68:	71fb      	strb	r3, [r7, #7]
 8009c6a:	e010      	b.n	8009c8e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009c6c:	7ebb      	ldrb	r3, [r7, #26]
 8009c6e:	f003 0311 	and.w	r3, r3, #17
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d003      	beq.n	8009c7e <f_open+0xea>
					res = FR_DENIED;
 8009c76:	2307      	movs	r3, #7
 8009c78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009c7c:	e007      	b.n	8009c8e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009c7e:	79fb      	ldrb	r3, [r7, #7]
 8009c80:	f003 0304 	and.w	r3, r3, #4
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <f_open+0xfa>
 8009c88:	2308      	movs	r3, #8
 8009c8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d168      	bne.n	8009d68 <f_open+0x1d4>
 8009c96:	79fb      	ldrb	r3, [r7, #7]
 8009c98:	f003 0308 	and.w	r3, r3, #8
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d063      	beq.n	8009d68 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009ca0:	f7fd ffb6 	bl	8007c10 <get_fattime>
 8009ca4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca8:	330e      	adds	r3, #14
 8009caa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fe fae1 	bl	8008274 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb4:	3316      	adds	r3, #22
 8009cb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fe fadb 	bl	8008274 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc0:	330b      	adds	r3, #11
 8009cc2:	2220      	movs	r2, #32
 8009cc4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cca:	4611      	mov	r1, r2
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7ff fa32 	bl	8009136 <ld_clust>
 8009cd2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009cd8:	2200      	movs	r2, #0
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7ff fa4a 	bl	8009174 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce2:	331c      	adds	r3, #28
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fe fac4 	bl	8008274 <st_dword>
					fs->wflag = 1;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d037      	beq.n	8009d68 <f_open+0x1d4>
						dw = fs->winsect;
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009cfe:	f107 0314 	add.w	r3, r7, #20
 8009d02:	2200      	movs	r2, #0
 8009d04:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fe ff5d 	bl	8008bc6 <remove_chain>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009d12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d126      	bne.n	8009d68 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe fd02 	bl	8008728 <move_window>
 8009d24:	4603      	mov	r3, r0
 8009d26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d2e:	3a01      	subs	r2, #1
 8009d30:	60da      	str	r2, [r3, #12]
 8009d32:	e019      	b.n	8009d68 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009d34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d115      	bne.n	8009d68 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009d3c:	7ebb      	ldrb	r3, [r7, #26]
 8009d3e:	f003 0310 	and.w	r3, r3, #16
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d003      	beq.n	8009d4e <f_open+0x1ba>
					res = FR_NO_FILE;
 8009d46:	2304      	movs	r3, #4
 8009d48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009d4c:	e00c      	b.n	8009d68 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009d4e:	79fb      	ldrb	r3, [r7, #7]
 8009d50:	f003 0302 	and.w	r3, r3, #2
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d007      	beq.n	8009d68 <f_open+0x1d4>
 8009d58:	7ebb      	ldrb	r3, [r7, #26]
 8009d5a:	f003 0301 	and.w	r3, r3, #1
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d002      	beq.n	8009d68 <f_open+0x1d4>
						res = FR_DENIED;
 8009d62:	2307      	movs	r3, #7
 8009d64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009d68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d128      	bne.n	8009dc2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009d70:	79fb      	ldrb	r3, [r7, #7]
 8009d72:	f003 0308 	and.w	r3, r3, #8
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d003      	beq.n	8009d82 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009d7a:	79fb      	ldrb	r3, [r7, #7]
 8009d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d80:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009d90:	79fb      	ldrb	r3, [r7, #7]
 8009d92:	f023 0301 	bic.w	r3, r3, #1
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	bf14      	ite	ne
 8009d9a:	2301      	movne	r3, #1
 8009d9c:	2300      	moveq	r3, #0
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	461a      	mov	r2, r3
 8009da2:	f107 0314 	add.w	r3, r7, #20
 8009da6:	4611      	mov	r1, r2
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fe fb8b 	bl	80084c4 <inc_lock>
 8009dae:	4602      	mov	r2, r0
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d102      	bne.n	8009dc2 <f_open+0x22e>
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009dc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f040 8095 	bne.w	8009ef6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7ff f9af 	bl	8009136 <ld_clust>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de0:	331c      	adds	r3, #28
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fe fa08 	bl	80081f8 <ld_dword>
 8009de8:	4602      	mov	r2, r0
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009df4:	693a      	ldr	r2, [r7, #16]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	88da      	ldrh	r2, [r3, #6]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	79fa      	ldrb	r2, [r7, #7]
 8009e06:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	3330      	adds	r3, #48	; 0x30
 8009e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e22:	2100      	movs	r1, #0
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fe fa72 	bl	800830e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009e2a:	79fb      	ldrb	r3, [r7, #7]
 8009e2c:	f003 0320 	and.w	r3, r3, #32
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d060      	beq.n	8009ef6 <f_open+0x362>
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d05c      	beq.n	8009ef6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	68da      	ldr	r2, [r3, #12]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	895b      	ldrh	r3, [r3, #10]
 8009e48:	025b      	lsls	r3, r3, #9
 8009e4a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	657b      	str	r3, [r7, #84]	; 0x54
 8009e58:	e016      	b.n	8009e88 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fe fd1d 	bl	800889e <get_fat>
 8009e64:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009e66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d802      	bhi.n	8009e72 <f_open+0x2de>
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e78:	d102      	bne.n	8009e80 <f_open+0x2ec>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009e80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e84:	1ad3      	subs	r3, r2, r3
 8009e86:	657b      	str	r3, [r7, #84]	; 0x54
 8009e88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d103      	bne.n	8009e98 <f_open+0x304>
 8009e90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d8e0      	bhi.n	8009e5a <f_open+0x2c6>
				}
				fp->clust = clst;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e9c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009e9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d127      	bne.n	8009ef6 <f_open+0x362>
 8009ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d022      	beq.n	8009ef6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fe fcd3 	bl	8008860 <clust2sect>
 8009eba:	6478      	str	r0, [r7, #68]	; 0x44
 8009ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d103      	bne.n	8009eca <f_open+0x336>
						res = FR_INT_ERR;
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009ec8:	e015      	b.n	8009ef6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ecc:	0a5a      	lsrs	r2, r3, #9
 8009ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ed0:	441a      	add	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	7858      	ldrb	r0, [r3, #1]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6a1a      	ldr	r2, [r3, #32]
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	f7fe f911 	bl	800810c <disk_read>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d002      	beq.n	8009ef6 <f_open+0x362>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009ef6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d002      	beq.n	8009f04 <f_open+0x370>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009f04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3760      	adds	r7, #96	; 0x60
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b08c      	sub	sp, #48	; 0x30
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	607a      	str	r2, [r7, #4]
 8009f1c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2200      	movs	r2, #0
 8009f26:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f107 0210 	add.w	r2, r7, #16
 8009f2e:	4611      	mov	r1, r2
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7ff fdb3 	bl	8009a9c <validate>
 8009f36:	4603      	mov	r3, r0
 8009f38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d107      	bne.n	8009f54 <f_write+0x44>
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	7d5b      	ldrb	r3, [r3, #21]
 8009f48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009f4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d002      	beq.n	8009f5a <f_write+0x4a>
 8009f54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f58:	e14b      	b.n	800a1f2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	7d1b      	ldrb	r3, [r3, #20]
 8009f5e:	f003 0302 	and.w	r3, r3, #2
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d101      	bne.n	8009f6a <f_write+0x5a>
 8009f66:	2307      	movs	r3, #7
 8009f68:	e143      	b.n	800a1f2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	699a      	ldr	r2, [r3, #24]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	441a      	add	r2, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	f080 812d 	bcs.w	800a1d6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	699b      	ldr	r3, [r3, #24]
 8009f80:	43db      	mvns	r3, r3
 8009f82:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009f84:	e127      	b.n	800a1d6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	699b      	ldr	r3, [r3, #24]
 8009f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f040 80e3 	bne.w	800a15a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	0a5b      	lsrs	r3, r3, #9
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	8952      	ldrh	r2, [r2, #10]
 8009f9e:	3a01      	subs	r2, #1
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d143      	bne.n	800a032 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d10c      	bne.n	8009fcc <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d11a      	bne.n	8009ff4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fe fe64 	bl	8008c90 <create_chain>
 8009fc8:	62b8      	str	r0, [r7, #40]	; 0x28
 8009fca:	e013      	b.n	8009ff4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d007      	beq.n	8009fe4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	699b      	ldr	r3, [r3, #24]
 8009fd8:	4619      	mov	r1, r3
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f7fe fef0 	bl	8008dc0 <clmt_clust>
 8009fe0:	62b8      	str	r0, [r7, #40]	; 0x28
 8009fe2:	e007      	b.n	8009ff4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	69db      	ldr	r3, [r3, #28]
 8009fea:	4619      	mov	r1, r3
 8009fec:	4610      	mov	r0, r2
 8009fee:	f7fe fe4f 	bl	8008c90 <create_chain>
 8009ff2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f000 80f2 	beq.w	800a1e0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d104      	bne.n	800a00c <f_write+0xfc>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2202      	movs	r2, #2
 800a006:	755a      	strb	r2, [r3, #21]
 800a008:	2302      	movs	r3, #2
 800a00a:	e0f2      	b.n	800a1f2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a012:	d104      	bne.n	800a01e <f_write+0x10e>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2201      	movs	r2, #1
 800a018:	755a      	strb	r2, [r3, #21]
 800a01a:	2301      	movs	r3, #1
 800a01c:	e0e9      	b.n	800a1f2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a022:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d102      	bne.n	800a032 <f_write+0x122>
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a030:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	7d1b      	ldrb	r3, [r3, #20]
 800a036:	b25b      	sxtb	r3, r3
 800a038:	2b00      	cmp	r3, #0
 800a03a:	da18      	bge.n	800a06e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	7858      	ldrb	r0, [r3, #1]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6a1a      	ldr	r2, [r3, #32]
 800a04a:	2301      	movs	r3, #1
 800a04c:	f7fe f87e 	bl	800814c <disk_write>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d004      	beq.n	800a060 <f_write+0x150>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2201      	movs	r2, #1
 800a05a:	755a      	strb	r2, [r3, #21]
 800a05c:	2301      	movs	r3, #1
 800a05e:	e0c8      	b.n	800a1f2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	7d1b      	ldrb	r3, [r3, #20]
 800a064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a068:	b2da      	uxtb	r2, r3
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	69db      	ldr	r3, [r3, #28]
 800a074:	4619      	mov	r1, r3
 800a076:	4610      	mov	r0, r2
 800a078:	f7fe fbf2 	bl	8008860 <clust2sect>
 800a07c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d104      	bne.n	800a08e <f_write+0x17e>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2202      	movs	r2, #2
 800a088:	755a      	strb	r2, [r3, #21]
 800a08a:	2302      	movs	r3, #2
 800a08c:	e0b1      	b.n	800a1f2 <f_write+0x2e2>
			sect += csect;
 800a08e:	697a      	ldr	r2, [r7, #20]
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	4413      	add	r3, r2
 800a094:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	0a5b      	lsrs	r3, r3, #9
 800a09a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a09c:	6a3b      	ldr	r3, [r7, #32]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d03c      	beq.n	800a11c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a0a2:	69ba      	ldr	r2, [r7, #24]
 800a0a4:	6a3b      	ldr	r3, [r7, #32]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	8952      	ldrh	r2, [r2, #10]
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d905      	bls.n	800a0bc <f_write+0x1ac>
					cc = fs->csize - csect;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	895b      	ldrh	r3, [r3, #10]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	1ad3      	subs	r3, r2, r3
 800a0ba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	7858      	ldrb	r0, [r3, #1]
 800a0c0:	6a3b      	ldr	r3, [r7, #32]
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	69f9      	ldr	r1, [r7, #28]
 800a0c6:	f7fe f841 	bl	800814c <disk_write>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d004      	beq.n	800a0da <f_write+0x1ca>
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	755a      	strb	r2, [r3, #21]
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e08b      	b.n	800a1f2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6a1a      	ldr	r2, [r3, #32]
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	6a3a      	ldr	r2, [r7, #32]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d915      	bls.n	800a114 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6a1a      	ldr	r2, [r3, #32]
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	025b      	lsls	r3, r3, #9
 800a0f8:	69fa      	ldr	r2, [r7, #28]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a100:	4619      	mov	r1, r3
 800a102:	f7fe f8e3 	bl	80082cc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	7d1b      	ldrb	r3, [r3, #20]
 800a10a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	025b      	lsls	r3, r3, #9
 800a118:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a11a:	e03f      	b.n	800a19c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6a1b      	ldr	r3, [r3, #32]
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	429a      	cmp	r2, r3
 800a124:	d016      	beq.n	800a154 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	699a      	ldr	r2, [r3, #24]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a12e:	429a      	cmp	r2, r3
 800a130:	d210      	bcs.n	800a154 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	7858      	ldrb	r0, [r3, #1]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a13c:	2301      	movs	r3, #1
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	f7fd ffe4 	bl	800810c <disk_read>
 800a144:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a146:	2b00      	cmp	r3, #0
 800a148:	d004      	beq.n	800a154 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2201      	movs	r2, #1
 800a14e:	755a      	strb	r2, [r3, #21]
 800a150:	2301      	movs	r3, #1
 800a152:	e04e      	b.n	800a1f2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	699b      	ldr	r3, [r3, #24]
 800a15e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a162:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a166:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d901      	bls.n	800a174 <f_write+0x264>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	699b      	ldr	r3, [r3, #24]
 800a17e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a182:	4413      	add	r3, r2
 800a184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a186:	69f9      	ldr	r1, [r7, #28]
 800a188:	4618      	mov	r0, r3
 800a18a:	f7fe f89f 	bl	80082cc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	7d1b      	ldrb	r3, [r3, #20]
 800a192:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a196:	b2da      	uxtb	r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a19c:	69fa      	ldr	r2, [r7, #28]
 800a19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a0:	4413      	add	r3, r2
 800a1a2:	61fb      	str	r3, [r7, #28]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	699a      	ldr	r2, [r3, #24]
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	441a      	add	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	619a      	str	r2, [r3, #24]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	68da      	ldr	r2, [r3, #12]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	bf38      	it	cc
 800a1bc:	461a      	movcc	r2, r3
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	60da      	str	r2, [r3, #12]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	441a      	add	r2, r3
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	601a      	str	r2, [r3, #0]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f47f aed4 	bne.w	8009f86 <f_write+0x76>
 800a1de:	e000      	b.n	800a1e2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a1e0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	7d1b      	ldrb	r3, [r3, #20]
 800a1e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1ea:	b2da      	uxtb	r2, r3
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3730      	adds	r7, #48	; 0x30
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b086      	sub	sp, #24
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f107 0208 	add.w	r2, r7, #8
 800a208:	4611      	mov	r1, r2
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7ff fc46 	bl	8009a9c <validate>
 800a210:	4603      	mov	r3, r0
 800a212:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a214:	7dfb      	ldrb	r3, [r7, #23]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d168      	bne.n	800a2ec <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	7d1b      	ldrb	r3, [r3, #20]
 800a21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a222:	2b00      	cmp	r3, #0
 800a224:	d062      	beq.n	800a2ec <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	7d1b      	ldrb	r3, [r3, #20]
 800a22a:	b25b      	sxtb	r3, r3
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	da15      	bge.n	800a25c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	7858      	ldrb	r0, [r3, #1]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a1a      	ldr	r2, [r3, #32]
 800a23e:	2301      	movs	r3, #1
 800a240:	f7fd ff84 	bl	800814c <disk_write>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <f_sync+0x54>
 800a24a:	2301      	movs	r3, #1
 800a24c:	e04f      	b.n	800a2ee <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	7d1b      	ldrb	r3, [r3, #20]
 800a252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a256:	b2da      	uxtb	r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a25c:	f7fd fcd8 	bl	8007c10 <get_fattime>
 800a260:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a268:	4619      	mov	r1, r3
 800a26a:	4610      	mov	r0, r2
 800a26c:	f7fe fa5c 	bl	8008728 <move_window>
 800a270:	4603      	mov	r3, r0
 800a272:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a274:	7dfb      	ldrb	r3, [r7, #23]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d138      	bne.n	800a2ec <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a27e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	330b      	adds	r3, #11
 800a284:	781a      	ldrb	r2, [r3, #0]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	330b      	adds	r3, #11
 800a28a:	f042 0220 	orr.w	r2, r2, #32
 800a28e:	b2d2      	uxtb	r2, r2
 800a290:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6818      	ldr	r0, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	461a      	mov	r2, r3
 800a29c:	68f9      	ldr	r1, [r7, #12]
 800a29e:	f7fe ff69 	bl	8009174 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f103 021c 	add.w	r2, r3, #28
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	4610      	mov	r0, r2
 800a2b0:	f7fd ffe0 	bl	8008274 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	3316      	adds	r3, #22
 800a2b8:	6939      	ldr	r1, [r7, #16]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fd ffda 	bl	8008274 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3312      	adds	r3, #18
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fd ffb9 	bl	800823e <st_word>
					fs->wflag = 1;
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7fe fa55 	bl	8008784 <sync_fs>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	7d1b      	ldrb	r3, [r3, #20]
 800a2e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2e6:	b2da      	uxtb	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a2ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3718      	adds	r7, #24
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b084      	sub	sp, #16
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7ff ff7b 	bl	800a1fa <f_sync>
 800a304:	4603      	mov	r3, r0
 800a306:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a308:	7bfb      	ldrb	r3, [r7, #15]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d118      	bne.n	800a340 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f107 0208 	add.w	r2, r7, #8
 800a314:	4611      	mov	r1, r2
 800a316:	4618      	mov	r0, r3
 800a318:	f7ff fbc0 	bl	8009a9c <validate>
 800a31c:	4603      	mov	r3, r0
 800a31e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a320:	7bfb      	ldrb	r3, [r7, #15]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d10c      	bne.n	800a340 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fe f958 	bl	80085e0 <dec_lock>
 800a330:	4603      	mov	r3, r0
 800a332:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a334:	7bfb      	ldrb	r3, [r7, #15]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d102      	bne.n	800a340 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a340:	7bfb      	ldrb	r3, [r7, #15]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
	...

0800a34c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800a34c:	b590      	push	{r4, r7, lr}
 800a34e:	b09d      	sub	sp, #116	; 0x74
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	607a      	str	r2, [r7, #4]
 800a356:	603b      	str	r3, [r7, #0]
 800a358:	460b      	mov	r3, r1
 800a35a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800a35c:	2301      	movs	r3, #1
 800a35e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800a360:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a364:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800a366:	f107 030c 	add.w	r3, r7, #12
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7ff f8af 	bl	80094ce <get_ldnumber>
 800a370:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a374:	2b00      	cmp	r3, #0
 800a376:	da02      	bge.n	800a37e <f_mkfs+0x32>
 800a378:	230b      	movs	r3, #11
 800a37a:	f000 bc0d 	b.w	800ab98 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800a37e:	4a94      	ldr	r2, [pc, #592]	; (800a5d0 <f_mkfs+0x284>)
 800a380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d005      	beq.n	800a396 <f_mkfs+0x4a>
 800a38a:	4a91      	ldr	r2, [pc, #580]	; (800a5d0 <f_mkfs+0x284>)
 800a38c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a38e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a392:	2200      	movs	r2, #0
 800a394:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800a396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a398:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800a39c:	2300      	movs	r3, #0
 800a39e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800a3a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7fd fe8a 	bl	80080c0 <disk_initialize>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800a3b2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a3b6:	f003 0301 	and.w	r3, r3, #1
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <f_mkfs+0x76>
 800a3be:	2303      	movs	r3, #3
 800a3c0:	e3ea      	b.n	800ab98 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a3c2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a3c6:	f003 0304 	and.w	r3, r3, #4
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <f_mkfs+0x86>
 800a3ce:	230a      	movs	r3, #10
 800a3d0:	e3e2      	b.n	800ab98 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800a3d2:	f107 0214 	add.w	r2, r7, #20
 800a3d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a3da:	2103      	movs	r1, #3
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7fd fed5 	bl	800818c <disk_ioctl>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10c      	bne.n	800a402 <f_mkfs+0xb6>
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d009      	beq.n	800a402 <f_mkfs+0xb6>
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3f4:	d805      	bhi.n	800a402 <f_mkfs+0xb6>
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	1e5a      	subs	r2, r3, #1
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d001      	beq.n	800a406 <f_mkfs+0xba>
 800a402:	2301      	movs	r3, #1
 800a404:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800a406:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a40a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d003      	beq.n	800a41a <f_mkfs+0xce>
 800a412:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	429a      	cmp	r2, r3
 800a418:	d309      	bcc.n	800a42e <f_mkfs+0xe2>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a420:	d805      	bhi.n	800a42e <f_mkfs+0xe2>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	1e5a      	subs	r2, r3, #1
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4013      	ands	r3, r2
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <f_mkfs+0xe6>
 800a42e:	2313      	movs	r3, #19
 800a430:	e3b2      	b.n	800ab98 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800a432:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	fbb2 f3f3 	udiv	r3, r2, r3
 800a43a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800a440:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a442:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a446:	fbb2 f3f3 	udiv	r3, r2, r3
 800a44a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800a44c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a450:	fb02 f303 	mul.w	r3, r2, r3
 800a454:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800a456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <f_mkfs+0x114>
 800a45c:	230e      	movs	r3, #14
 800a45e:	e39b      	b.n	800ab98 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800a460:	f107 0210 	add.w	r2, r7, #16
 800a464:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a468:	2101      	movs	r1, #1
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7fd fe8e 	bl	800818c <disk_ioctl>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d001      	beq.n	800a47a <f_mkfs+0x12e>
 800a476:	2301      	movs	r3, #1
 800a478:	e38e      	b.n	800ab98 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800a47a:	7afb      	ldrb	r3, [r7, #11]
 800a47c:	f003 0308 	and.w	r3, r3, #8
 800a480:	2b00      	cmp	r3, #0
 800a482:	d001      	beq.n	800a488 <f_mkfs+0x13c>
 800a484:	2300      	movs	r3, #0
 800a486:	e000      	b.n	800a48a <f_mkfs+0x13e>
 800a488:	233f      	movs	r3, #63	; 0x3f
 800a48a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a490:	429a      	cmp	r2, r3
 800a492:	d901      	bls.n	800a498 <f_mkfs+0x14c>
 800a494:	230e      	movs	r3, #14
 800a496:	e37f      	b.n	800ab98 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800a498:	693a      	ldr	r2, [r7, #16]
 800a49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	2b7f      	cmp	r3, #127	; 0x7f
 800a4a4:	d801      	bhi.n	800a4aa <f_mkfs+0x15e>
 800a4a6:	230e      	movs	r3, #14
 800a4a8:	e376      	b.n	800ab98 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b80      	cmp	r3, #128	; 0x80
 800a4ae:	d901      	bls.n	800a4b4 <f_mkfs+0x168>
 800a4b0:	2313      	movs	r3, #19
 800a4b2:	e371      	b.n	800ab98 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800a4b4:	7afb      	ldrb	r3, [r7, #11]
 800a4b6:	f003 0302 	and.w	r3, r3, #2
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00d      	beq.n	800a4da <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800a4be:	7afb      	ldrb	r3, [r7, #11]
 800a4c0:	f003 0307 	and.w	r3, r3, #7
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d004      	beq.n	800a4d2 <f_mkfs+0x186>
 800a4c8:	7afb      	ldrb	r3, [r7, #11]
 800a4ca:	f003 0301 	and.w	r3, r3, #1
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d103      	bne.n	800a4da <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a4d8:	e009      	b.n	800a4ee <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800a4da:	7afb      	ldrb	r3, [r7, #11]
 800a4dc:	f003 0301 	and.w	r3, r3, #1
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d101      	bne.n	800a4e8 <f_mkfs+0x19c>
 800a4e4:	2313      	movs	r3, #19
 800a4e6:	e357      	b.n	800ab98 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800a4f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a4f6:	2b03      	cmp	r3, #3
 800a4f8:	d13c      	bne.n	800a574 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800a4fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d11b      	bne.n	800a538 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	0c5b      	lsrs	r3, r3, #17
 800a504:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a506:	2300      	movs	r3, #0
 800a508:	64bb      	str	r3, [r7, #72]	; 0x48
 800a50a:	2301      	movs	r3, #1
 800a50c:	653b      	str	r3, [r7, #80]	; 0x50
 800a50e:	e005      	b.n	800a51c <f_mkfs+0x1d0>
 800a510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a512:	3301      	adds	r3, #1
 800a514:	64bb      	str	r3, [r7, #72]	; 0x48
 800a516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	653b      	str	r3, [r7, #80]	; 0x50
 800a51c:	4a2d      	ldr	r2, [pc, #180]	; (800a5d4 <f_mkfs+0x288>)
 800a51e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d007      	beq.n	800a538 <f_mkfs+0x1ec>
 800a528:	4a2a      	ldr	r2, [pc, #168]	; (800a5d4 <f_mkfs+0x288>)
 800a52a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a52c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a530:	461a      	mov	r2, r3
 800a532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a534:	4293      	cmp	r3, r2
 800a536:	d2eb      	bcs.n	800a510 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a53c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a540:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800a542:	6a3b      	ldr	r3, [r7, #32]
 800a544:	3302      	adds	r3, #2
 800a546:	009a      	lsls	r2, r3, #2
 800a548:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a54a:	4413      	add	r3, r2
 800a54c:	1e5a      	subs	r2, r3, #1
 800a54e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a550:	fbb2 f3f3 	udiv	r3, r2, r3
 800a554:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800a556:	2320      	movs	r3, #32
 800a558:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800a55a:	2300      	movs	r3, #0
 800a55c:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800a55e:	6a3b      	ldr	r3, [r7, #32]
 800a560:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a564:	4293      	cmp	r3, r2
 800a566:	d903      	bls.n	800a570 <f_mkfs+0x224>
 800a568:	6a3b      	ldr	r3, [r7, #32]
 800a56a:	4a1b      	ldr	r2, [pc, #108]	; (800a5d8 <f_mkfs+0x28c>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d952      	bls.n	800a616 <f_mkfs+0x2ca>
 800a570:	230e      	movs	r3, #14
 800a572:	e311      	b.n	800ab98 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800a574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a576:	2b00      	cmp	r3, #0
 800a578:	d11b      	bne.n	800a5b2 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	0b1b      	lsrs	r3, r3, #12
 800a57e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a580:	2300      	movs	r3, #0
 800a582:	64bb      	str	r3, [r7, #72]	; 0x48
 800a584:	2301      	movs	r3, #1
 800a586:	653b      	str	r3, [r7, #80]	; 0x50
 800a588:	e005      	b.n	800a596 <f_mkfs+0x24a>
 800a58a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a58c:	3301      	adds	r3, #1
 800a58e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a592:	005b      	lsls	r3, r3, #1
 800a594:	653b      	str	r3, [r7, #80]	; 0x50
 800a596:	4a11      	ldr	r2, [pc, #68]	; (800a5dc <f_mkfs+0x290>)
 800a598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a59a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d007      	beq.n	800a5b2 <f_mkfs+0x266>
 800a5a2:	4a0e      	ldr	r2, [pc, #56]	; (800a5dc <f_mkfs+0x290>)
 800a5a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d2eb      	bcs.n	800a58a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800a5b2:	693a      	ldr	r2, [r7, #16]
 800a5b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ba:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800a5bc:	6a3b      	ldr	r3, [r7, #32]
 800a5be:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d90c      	bls.n	800a5e0 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800a5c6:	6a3b      	ldr	r3, [r7, #32]
 800a5c8:	3302      	adds	r3, #2
 800a5ca:	005b      	lsls	r3, r3, #1
 800a5cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5ce:	e012      	b.n	800a5f6 <f_mkfs+0x2aa>
 800a5d0:	24001170 	.word	0x24001170
 800a5d4:	0800d37c 	.word	0x0800d37c
 800a5d8:	0ffffff5 	.word	0x0ffffff5
 800a5dc:	0800d38c 	.word	0x0800d38c
				} else {
					fmt = FS_FAT12;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800a5e6:	6a3a      	ldr	r2, [r7, #32]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	005b      	lsls	r3, r3, #1
 800a5ec:	4413      	add	r3, r2
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	085b      	lsrs	r3, r3, #1
 800a5f2:	3303      	adds	r3, #3
 800a5f4:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800a5f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a5f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5fa:	4413      	add	r3, r2
 800a5fc:	1e5a      	subs	r2, r3, #1
 800a5fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a600:	fbb2 f3f3 	udiv	r3, r2, r3
 800a604:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800a606:	2301      	movs	r3, #1
 800a608:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800a60a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a60c:	015a      	lsls	r2, r3, #5
 800a60e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a610:	fbb2 f3f3 	udiv	r3, r2, r3
 800a614:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800a616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a61a:	4413      	add	r3, r2
 800a61c:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800a61e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a622:	fb02 f203 	mul.w	r2, r2, r3
 800a626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a628:	4413      	add	r3, r2
 800a62a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a62c:	4413      	add	r3, r2
 800a62e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	4413      	add	r3, r2
 800a636:	1e5a      	subs	r2, r3, #1
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	425b      	negs	r3, r3
 800a63c:	401a      	ands	r2, r3
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800a644:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a648:	2b03      	cmp	r3, #3
 800a64a:	d108      	bne.n	800a65e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800a64c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a64e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a650:	4413      	add	r3, r2
 800a652:	657b      	str	r3, [r7, #84]	; 0x54
 800a654:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a658:	4413      	add	r3, r2
 800a65a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a65c:	e006      	b.n	800a66c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800a65e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a662:	fbb2 f3f3 	udiv	r3, r2, r3
 800a666:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a668:	4413      	add	r3, r2
 800a66a:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800a66c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a66e:	011a      	lsls	r2, r3, #4
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	441a      	add	r2, r3
 800a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a676:	1ad2      	subs	r2, r2, r3
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d901      	bls.n	800a682 <f_mkfs+0x336>
 800a67e:	230e      	movs	r3, #14
 800a680:	e28a      	b.n	800ab98 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800a682:	693a      	ldr	r2, [r7, #16]
 800a684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a686:	1ad2      	subs	r2, r2, r3
 800a688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a68a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a68c:	fb01 f303 	mul.w	r3, r1, r3
 800a690:	1ad2      	subs	r2, r2, r3
 800a692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a694:	1ad2      	subs	r2, r2, r3
 800a696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a698:	fbb2 f3f3 	udiv	r3, r2, r3
 800a69c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800a69e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a6a2:	2b03      	cmp	r3, #3
 800a6a4:	d10f      	bne.n	800a6c6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800a6a6:	6a3b      	ldr	r3, [r7, #32]
 800a6a8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d80a      	bhi.n	800a6c6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d105      	bne.n	800a6c2 <f_mkfs+0x376>
 800a6b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6b8:	085b      	lsrs	r3, r3, #1
 800a6ba:	607b      	str	r3, [r7, #4]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d144      	bne.n	800a74c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800a6c2:	230e      	movs	r3, #14
 800a6c4:	e268      	b.n	800ab98 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800a6c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	d133      	bne.n	800a736 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800a6ce:	6a3b      	ldr	r3, [r7, #32]
 800a6d0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d91e      	bls.n	800a716 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d107      	bne.n	800a6ee <f_mkfs+0x3a2>
 800a6de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6e0:	005b      	lsls	r3, r3, #1
 800a6e2:	2b40      	cmp	r3, #64	; 0x40
 800a6e4:	d803      	bhi.n	800a6ee <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800a6e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6e8:	005b      	lsls	r3, r3, #1
 800a6ea:	607b      	str	r3, [r7, #4]
 800a6ec:	e033      	b.n	800a756 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800a6ee:	7afb      	ldrb	r3, [r7, #11]
 800a6f0:	f003 0302 	and.w	r3, r3, #2
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d003      	beq.n	800a700 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800a6f8:	2303      	movs	r3, #3
 800a6fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a6fe:	e02a      	b.n	800a756 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d105      	bne.n	800a712 <f_mkfs+0x3c6>
 800a706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a708:	005b      	lsls	r3, r3, #1
 800a70a:	607b      	str	r3, [r7, #4]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b80      	cmp	r3, #128	; 0x80
 800a710:	d91e      	bls.n	800a750 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800a712:	230e      	movs	r3, #14
 800a714:	e240      	b.n	800ab98 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800a716:	6a3b      	ldr	r3, [r7, #32]
 800a718:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d80a      	bhi.n	800a736 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d105      	bne.n	800a732 <f_mkfs+0x3e6>
 800a726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	607b      	str	r3, [r7, #4]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b80      	cmp	r3, #128	; 0x80
 800a730:	d910      	bls.n	800a754 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800a732:	230e      	movs	r3, #14
 800a734:	e230      	b.n	800ab98 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800a736:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d10c      	bne.n	800a758 <f_mkfs+0x40c>
 800a73e:	6a3b      	ldr	r3, [r7, #32]
 800a740:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a744:	4293      	cmp	r3, r2
 800a746:	d907      	bls.n	800a758 <f_mkfs+0x40c>
 800a748:	230e      	movs	r3, #14
 800a74a:	e225      	b.n	800ab98 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a74c:	bf00      	nop
 800a74e:	e6ce      	b.n	800a4ee <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a750:	bf00      	nop
 800a752:	e6cc      	b.n	800a4ee <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a754:	bf00      	nop
			pau = au;
 800a756:	e6ca      	b.n	800a4ee <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800a758:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800a75a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a75c:	461a      	mov	r2, r3
 800a75e:	2100      	movs	r1, #0
 800a760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a762:	f7fd fdd4 	bl	800830e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800a766:	220b      	movs	r2, #11
 800a768:	49bc      	ldr	r1, [pc, #752]	; (800aa5c <f_mkfs+0x710>)
 800a76a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a76c:	f7fd fdae 	bl	80082cc <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	330b      	adds	r3, #11
 800a774:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a776:	4611      	mov	r1, r2
 800a778:	4618      	mov	r0, r3
 800a77a:	f7fd fd60 	bl	800823e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a780:	330d      	adds	r3, #13
 800a782:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a784:	b2d2      	uxtb	r2, r2
 800a786:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800a788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78a:	330e      	adds	r3, #14
 800a78c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a78e:	b292      	uxth	r2, r2
 800a790:	4611      	mov	r1, r2
 800a792:	4618      	mov	r0, r3
 800a794:	f7fd fd53 	bl	800823e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800a798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79a:	3310      	adds	r3, #16
 800a79c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a79e:	b2d2      	uxtb	r2, r2
 800a7a0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	f103 0211 	add.w	r2, r3, #17
 800a7a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a7ac:	2b03      	cmp	r3, #3
 800a7ae:	d002      	beq.n	800a7b6 <f_mkfs+0x46a>
 800a7b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	e000      	b.n	800a7b8 <f_mkfs+0x46c>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	4610      	mov	r0, r2
 800a7bc:	f7fd fd3f 	bl	800823e <st_word>
		if (sz_vol < 0x10000) {
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7c6:	d208      	bcs.n	800a7da <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ca:	3313      	adds	r3, #19
 800a7cc:	693a      	ldr	r2, [r7, #16]
 800a7ce:	b292      	uxth	r2, r2
 800a7d0:	4611      	mov	r1, r2
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7fd fd33 	bl	800823e <st_word>
 800a7d8:	e006      	b.n	800a7e8 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	3320      	adds	r3, #32
 800a7de:	693a      	ldr	r2, [r7, #16]
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fd fd46 	bl	8008274 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800a7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ea:	3315      	adds	r3, #21
 800a7ec:	22f8      	movs	r2, #248	; 0xf8
 800a7ee:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f2:	3318      	adds	r3, #24
 800a7f4:	213f      	movs	r1, #63	; 0x3f
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fd fd21 	bl	800823e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800a7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fe:	331a      	adds	r3, #26
 800a800:	21ff      	movs	r1, #255	; 0xff
 800a802:	4618      	mov	r0, r3
 800a804:	f7fd fd1b 	bl	800823e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800a808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80a:	331c      	adds	r3, #28
 800a80c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fd fd30 	bl	8008274 <st_dword>
		if (fmt == FS_FAT32) {
 800a814:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a818:	2b03      	cmp	r3, #3
 800a81a:	d131      	bne.n	800a880 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800a81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800a822:	f7fd f9f5 	bl	8007c10 <get_fattime>
 800a826:	4603      	mov	r3, r0
 800a828:	4619      	mov	r1, r3
 800a82a:	4620      	mov	r0, r4
 800a82c:	f7fd fd22 	bl	8008274 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800a830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a832:	3324      	adds	r3, #36	; 0x24
 800a834:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a836:	4618      	mov	r0, r3
 800a838:	f7fd fd1c 	bl	8008274 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800a83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83e:	332c      	adds	r3, #44	; 0x2c
 800a840:	2102      	movs	r1, #2
 800a842:	4618      	mov	r0, r3
 800a844:	f7fd fd16 	bl	8008274 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800a848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84a:	3330      	adds	r3, #48	; 0x30
 800a84c:	2101      	movs	r1, #1
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fd fcf5 	bl	800823e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800a854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a856:	3332      	adds	r3, #50	; 0x32
 800a858:	2106      	movs	r1, #6
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fd fcef 	bl	800823e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800a860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a862:	3340      	adds	r3, #64	; 0x40
 800a864:	2280      	movs	r2, #128	; 0x80
 800a866:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800a868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86a:	3342      	adds	r3, #66	; 0x42
 800a86c:	2229      	movs	r2, #41	; 0x29
 800a86e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800a870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a872:	3347      	adds	r3, #71	; 0x47
 800a874:	2213      	movs	r2, #19
 800a876:	497a      	ldr	r1, [pc, #488]	; (800aa60 <f_mkfs+0x714>)
 800a878:	4618      	mov	r0, r3
 800a87a:	f7fd fd27 	bl	80082cc <mem_cpy>
 800a87e:	e020      	b.n	800a8c2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800a880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a882:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800a886:	f7fd f9c3 	bl	8007c10 <get_fattime>
 800a88a:	4603      	mov	r3, r0
 800a88c:	4619      	mov	r1, r3
 800a88e:	4620      	mov	r0, r4
 800a890:	f7fd fcf0 	bl	8008274 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800a894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a896:	3316      	adds	r3, #22
 800a898:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a89a:	b292      	uxth	r2, r2
 800a89c:	4611      	mov	r1, r2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fd fccd 	bl	800823e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a6:	3324      	adds	r3, #36	; 0x24
 800a8a8:	2280      	movs	r2, #128	; 0x80
 800a8aa:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ae:	3326      	adds	r3, #38	; 0x26
 800a8b0:	2229      	movs	r2, #41	; 0x29
 800a8b2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b6:	332b      	adds	r3, #43	; 0x2b
 800a8b8:	2213      	movs	r2, #19
 800a8ba:	496a      	ldr	r1, [pc, #424]	; (800aa64 <f_mkfs+0x718>)
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7fd fd05 	bl	80082cc <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a8c8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7fd fcb6 	bl	800823e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800a8d2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8dc:	f7fd fc36 	bl	800814c <disk_write>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d001      	beq.n	800a8ea <f_mkfs+0x59e>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e156      	b.n	800ab98 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800a8ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a8ee:	2b03      	cmp	r3, #3
 800a8f0:	d140      	bne.n	800a974 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800a8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f4:	1d9a      	adds	r2, r3, #6
 800a8f6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8fe:	f7fd fc25 	bl	800814c <disk_write>
			mem_set(buf, 0, ss);
 800a902:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a904:	461a      	mov	r2, r3
 800a906:	2100      	movs	r1, #0
 800a908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a90a:	f7fd fd00 	bl	800830e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800a90e:	4956      	ldr	r1, [pc, #344]	; (800aa68 <f_mkfs+0x71c>)
 800a910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a912:	f7fd fcaf 	bl	8008274 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800a916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a918:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a91c:	4953      	ldr	r1, [pc, #332]	; (800aa6c <f_mkfs+0x720>)
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fd fca8 	bl	8008274 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a926:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a92a:	6a3b      	ldr	r3, [r7, #32]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	4619      	mov	r1, r3
 800a930:	4610      	mov	r0, r2
 800a932:	f7fd fc9f 	bl	8008274 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a93c:	2102      	movs	r1, #2
 800a93e:	4618      	mov	r0, r3
 800a940:	f7fd fc98 	bl	8008274 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800a944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a946:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a94a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fd fc75 	bl	800823e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800a954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a956:	1dda      	adds	r2, r3, #7
 800a958:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a95c:	2301      	movs	r3, #1
 800a95e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a960:	f7fd fbf4 	bl	800814c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	1c5a      	adds	r2, r3, #1
 800a968:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a96c:	2301      	movs	r3, #1
 800a96e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a970:	f7fd fbec 	bl	800814c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800a974:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a976:	2100      	movs	r1, #0
 800a978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a97a:	f7fd fcc8 	bl	800830e <mem_set>
		sect = b_fat;		/* FAT start sector */
 800a97e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a980:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800a982:	2300      	movs	r3, #0
 800a984:	64bb      	str	r3, [r7, #72]	; 0x48
 800a986:	e04b      	b.n	800aa20 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800a988:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a98c:	2b03      	cmp	r3, #3
 800a98e:	d113      	bne.n	800a9b8 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800a990:	f06f 0107 	mvn.w	r1, #7
 800a994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a996:	f7fd fc6d 	bl	8008274 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99c:	3304      	adds	r3, #4
 800a99e:	f04f 31ff 	mov.w	r1, #4294967295
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7fd fc66 	bl	8008274 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9aa:	3308      	adds	r3, #8
 800a9ac:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fd fc5f 	bl	8008274 <st_dword>
 800a9b6:	e00b      	b.n	800a9d0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800a9b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d101      	bne.n	800a9c4 <f_mkfs+0x678>
 800a9c0:	4b2b      	ldr	r3, [pc, #172]	; (800aa70 <f_mkfs+0x724>)
 800a9c2:	e001      	b.n	800a9c8 <f_mkfs+0x67c>
 800a9c4:	f06f 0307 	mvn.w	r3, #7
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9cc:	f7fd fc52 	bl	8008274 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800a9d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9d2:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800a9d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	bf28      	it	cs
 800a9dc:	4613      	movcs	r3, r2
 800a9de:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800a9e0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800a9e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a9e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9ea:	f7fd fbaf 	bl	800814c <disk_write>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <f_mkfs+0x6ac>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e0cf      	b.n	800ab98 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800a9f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa00:	f7fd fc85 	bl	800830e <mem_set>
				sect += n; nsect -= n;
 800aa04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aa06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa08:	4413      	add	r3, r2
 800aa0a:	667b      	str	r3, [r7, #100]	; 0x64
 800aa0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800aa14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1dc      	bne.n	800a9d4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800aa1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d3af      	bcc.n	800a988 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800aa28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aa2c:	2b03      	cmp	r3, #3
 800aa2e:	d101      	bne.n	800aa34 <f_mkfs+0x6e8>
 800aa30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa32:	e000      	b.n	800aa36 <f_mkfs+0x6ea>
 800aa34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa36:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800aa38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	bf28      	it	cs
 800aa40:	4613      	movcs	r3, r2
 800aa42:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800aa44:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800aa48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aa4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa4e:	f7fd fb7d 	bl	800814c <disk_write>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00d      	beq.n	800aa74 <f_mkfs+0x728>
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e09d      	b.n	800ab98 <f_mkfs+0x84c>
 800aa5c:	0800d2a4 	.word	0x0800d2a4
 800aa60:	0800d2b0 	.word	0x0800d2b0
 800aa64:	0800d2c4 	.word	0x0800d2c4
 800aa68:	41615252 	.word	0x41615252
 800aa6c:	61417272 	.word	0x61417272
 800aa70:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800aa74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aa76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa78:	4413      	add	r3, r2
 800aa7a:	667b      	str	r3, [r7, #100]	; 0x64
 800aa7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800aa84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d1d6      	bne.n	800aa38 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800aa8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d103      	bne.n	800aa9a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800aa92:	230c      	movs	r3, #12
 800aa94:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800aa98:	e010      	b.n	800aabc <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaa0:	d303      	bcc.n	800aaaa <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800aaa2:	2306      	movs	r3, #6
 800aaa4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800aaa8:	e008      	b.n	800aabc <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800aaaa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d101      	bne.n	800aab6 <f_mkfs+0x76a>
 800aab2:	2304      	movs	r3, #4
 800aab4:	e000      	b.n	800aab8 <f_mkfs+0x76c>
 800aab6:	2301      	movs	r3, #1
 800aab8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800aabc:	7afb      	ldrb	r3, [r7, #11]
 800aabe:	f003 0308 	and.w	r3, r3, #8
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d15b      	bne.n	800ab7e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800aac6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aac8:	461a      	mov	r2, r3
 800aaca:	2100      	movs	r1, #0
 800aacc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aace:	f7fd fc1e 	bl	800830e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aad8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800aadc:	4618      	mov	r0, r3
 800aade:	f7fd fbae 	bl	800823e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800aae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800aae8:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	2200      	movs	r2, #0
 800aaee:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	3302      	adds	r3, #2
 800aafc:	2201      	movs	r2, #1
 800aafe:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	3303      	adds	r3, #3
 800ab04:	2200      	movs	r2, #0
 800ab06:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ab10:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	441a      	add	r2, r3
 800ab18:	4b21      	ldr	r3, [pc, #132]	; (800aba0 <f_mkfs+0x854>)
 800ab1a:	fba3 1302 	umull	r1, r3, r3, r2
 800ab1e:	1ad2      	subs	r2, r2, r3
 800ab20:	0852      	lsrs	r2, r2, #1
 800ab22:	4413      	add	r3, r2
 800ab24:	0b5b      	lsrs	r3, r3, #13
 800ab26:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	3305      	adds	r3, #5
 800ab2c:	22fe      	movs	r2, #254	; 0xfe
 800ab2e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800ab30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab32:	089b      	lsrs	r3, r3, #2
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	3306      	adds	r3, #6
 800ab3a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800ab3e:	b2d2      	uxtb	r2, r2
 800ab40:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	3307      	adds	r3, #7
 800ab46:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab48:	b2d2      	uxtb	r2, r2
 800ab4a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	3308      	adds	r3, #8
 800ab50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7fd fb8e 	bl	8008274 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	330c      	adds	r3, #12
 800ab5c:	693a      	ldr	r2, [r7, #16]
 800ab5e:	4611      	mov	r1, r2
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fd fb87 	bl	8008274 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800ab66:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab70:	f7fd faec 	bl	800814c <disk_write>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d001      	beq.n	800ab7e <f_mkfs+0x832>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e00c      	b.n	800ab98 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800ab7e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ab82:	2200      	movs	r2, #0
 800ab84:	2100      	movs	r1, #0
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fd fb00 	bl	800818c <disk_ioctl>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d001      	beq.n	800ab96 <f_mkfs+0x84a>
 800ab92:	2301      	movs	r3, #1
 800ab94:	e000      	b.n	800ab98 <f_mkfs+0x84c>

	return FR_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3774      	adds	r7, #116	; 0x74
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd90      	pop	{r4, r7, pc}
 800aba0:	0515565b 	.word	0x0515565b

0800aba4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b087      	sub	sp, #28
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	4613      	mov	r3, r2
 800abb0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800abb2:	2301      	movs	r3, #1
 800abb4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800abb6:	2300      	movs	r3, #0
 800abb8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800abba:	4b1f      	ldr	r3, [pc, #124]	; (800ac38 <FATFS_LinkDriverEx+0x94>)
 800abbc:	7a5b      	ldrb	r3, [r3, #9]
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d131      	bne.n	800ac28 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800abc4:	4b1c      	ldr	r3, [pc, #112]	; (800ac38 <FATFS_LinkDriverEx+0x94>)
 800abc6:	7a5b      	ldrb	r3, [r3, #9]
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	461a      	mov	r2, r3
 800abcc:	4b1a      	ldr	r3, [pc, #104]	; (800ac38 <FATFS_LinkDriverEx+0x94>)
 800abce:	2100      	movs	r1, #0
 800abd0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800abd2:	4b19      	ldr	r3, [pc, #100]	; (800ac38 <FATFS_LinkDriverEx+0x94>)
 800abd4:	7a5b      	ldrb	r3, [r3, #9]
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	4a17      	ldr	r2, [pc, #92]	; (800ac38 <FATFS_LinkDriverEx+0x94>)
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	4413      	add	r3, r2
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800abe2:	4b15      	ldr	r3, [pc, #84]	; (800ac38 <FATFS_LinkDriverEx+0x94>)
 800abe4:	7a5b      	ldrb	r3, [r3, #9]
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	461a      	mov	r2, r3
 800abea:	4b13      	ldr	r3, [pc, #76]	; (800ac38 <FATFS_LinkDriverEx+0x94>)
 800abec:	4413      	add	r3, r2
 800abee:	79fa      	ldrb	r2, [r7, #7]
 800abf0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800abf2:	4b11      	ldr	r3, [pc, #68]	; (800ac38 <FATFS_LinkDriverEx+0x94>)
 800abf4:	7a5b      	ldrb	r3, [r3, #9]
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	1c5a      	adds	r2, r3, #1
 800abfa:	b2d1      	uxtb	r1, r2
 800abfc:	4a0e      	ldr	r2, [pc, #56]	; (800ac38 <FATFS_LinkDriverEx+0x94>)
 800abfe:	7251      	strb	r1, [r2, #9]
 800ac00:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ac02:	7dbb      	ldrb	r3, [r7, #22]
 800ac04:	3330      	adds	r3, #48	; 0x30
 800ac06:	b2da      	uxtb	r2, r3
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	223a      	movs	r2, #58	; 0x3a
 800ac12:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	3302      	adds	r3, #2
 800ac18:	222f      	movs	r2, #47	; 0x2f
 800ac1a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	3303      	adds	r3, #3
 800ac20:	2200      	movs	r2, #0
 800ac22:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ac28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	371c      	adds	r7, #28
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop
 800ac38:	24001198 	.word	0x24001198

0800ac3c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ac46:	2200      	movs	r2, #0
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff ffaa 	bl	800aba4 <FATFS_LinkDriverEx>
 800ac50:	4603      	mov	r3, r0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
	...

0800ac5c <gcvt>:
 800ac5c:	b513      	push	{r0, r1, r4, lr}
 800ac5e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ac62:	460a      	mov	r2, r1
 800ac64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac68:	bf42      	ittt	mi
 800ac6a:	232d      	movmi	r3, #45	; 0x2d
 800ac6c:	f100 30ff 	addmi.w	r0, r0, #4294967295
 800ac70:	f802 3b01 	strbmi.w	r3, [r2], #1
 800ac74:	460c      	mov	r4, r1
 800ac76:	2300      	movs	r3, #0
 800ac78:	4601      	mov	r1, r0
 800ac7a:	4806      	ldr	r0, [pc, #24]	; (800ac94 <gcvt+0x38>)
 800ac7c:	9300      	str	r3, [sp, #0]
 800ac7e:	6800      	ldr	r0, [r0, #0]
 800ac80:	2367      	movs	r3, #103	; 0x67
 800ac82:	f000 f8b1 	bl	800ade8 <_gcvt>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	bf14      	ite	ne
 800ac8a:	4620      	movne	r0, r4
 800ac8c:	2000      	moveq	r0, #0
 800ac8e:	b002      	add	sp, #8
 800ac90:	bd10      	pop	{r4, pc}
 800ac92:	bf00      	nop
 800ac94:	240010a4 	.word	0x240010a4

0800ac98 <__errno>:
 800ac98:	4b01      	ldr	r3, [pc, #4]	; (800aca0 <__errno+0x8>)
 800ac9a:	6818      	ldr	r0, [r3, #0]
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	240010a4 	.word	0x240010a4

0800aca4 <__libc_init_array>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	4d0d      	ldr	r5, [pc, #52]	; (800acdc <__libc_init_array+0x38>)
 800aca8:	4c0d      	ldr	r4, [pc, #52]	; (800ace0 <__libc_init_array+0x3c>)
 800acaa:	1b64      	subs	r4, r4, r5
 800acac:	10a4      	asrs	r4, r4, #2
 800acae:	2600      	movs	r6, #0
 800acb0:	42a6      	cmp	r6, r4
 800acb2:	d109      	bne.n	800acc8 <__libc_init_array+0x24>
 800acb4:	4d0b      	ldr	r5, [pc, #44]	; (800ace4 <__libc_init_array+0x40>)
 800acb6:	4c0c      	ldr	r4, [pc, #48]	; (800ace8 <__libc_init_array+0x44>)
 800acb8:	f002 fad8 	bl	800d26c <_init>
 800acbc:	1b64      	subs	r4, r4, r5
 800acbe:	10a4      	asrs	r4, r4, #2
 800acc0:	2600      	movs	r6, #0
 800acc2:	42a6      	cmp	r6, r4
 800acc4:	d105      	bne.n	800acd2 <__libc_init_array+0x2e>
 800acc6:	bd70      	pop	{r4, r5, r6, pc}
 800acc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800accc:	4798      	blx	r3
 800acce:	3601      	adds	r6, #1
 800acd0:	e7ee      	b.n	800acb0 <__libc_init_array+0xc>
 800acd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800acd6:	4798      	blx	r3
 800acd8:	3601      	adds	r6, #1
 800acda:	e7f2      	b.n	800acc2 <__libc_init_array+0x1e>
 800acdc:	0800d664 	.word	0x0800d664
 800ace0:	0800d664 	.word	0x0800d664
 800ace4:	0800d664 	.word	0x0800d664
 800ace8:	0800d668 	.word	0x0800d668

0800acec <memset>:
 800acec:	4402      	add	r2, r0
 800acee:	4603      	mov	r3, r0
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d100      	bne.n	800acf6 <memset+0xa>
 800acf4:	4770      	bx	lr
 800acf6:	f803 1b01 	strb.w	r1, [r3], #1
 800acfa:	e7f9      	b.n	800acf0 <memset+0x4>

0800acfc <print_e>:
 800acfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acfe:	b087      	sub	sp, #28
 800ad00:	461e      	mov	r6, r3
 800ad02:	ab04      	add	r3, sp, #16
 800ad04:	9301      	str	r3, [sp, #4]
 800ad06:	ab03      	add	r3, sp, #12
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	ab05      	add	r3, sp, #20
 800ad0e:	4615      	mov	r5, r2
 800ad10:	2102      	movs	r1, #2
 800ad12:	3201      	adds	r2, #1
 800ad14:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800ad16:	f000 fddf 	bl	800b8d8 <_dtoa_r>
 800ad1a:	9b05      	ldr	r3, [sp, #20]
 800ad1c:	f242 720f 	movw	r2, #9999	; 0x270f
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d105      	bne.n	800ad30 <print_e+0x34>
 800ad24:	4601      	mov	r1, r0
 800ad26:	4620      	mov	r0, r4
 800ad28:	f000 fd22 	bl	800b770 <strcpy>
 800ad2c:	b007      	add	sp, #28
 800ad2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad30:	7802      	ldrb	r2, [r0, #0]
 800ad32:	f804 2b01 	strb.w	r2, [r4], #1
 800ad36:	2d00      	cmp	r5, #0
 800ad38:	bfc8      	it	gt
 800ad3a:	2701      	movgt	r7, #1
 800ad3c:	222e      	movs	r2, #46	; 0x2e
 800ad3e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 800ad42:	b109      	cbz	r1, 800ad48 <print_e+0x4c>
 800ad44:	2d00      	cmp	r5, #0
 800ad46:	dc37      	bgt.n	800adb8 <print_e+0xbc>
 800ad48:	2e67      	cmp	r6, #103	; 0x67
 800ad4a:	d046      	beq.n	800adda <print_e+0xde>
 800ad4c:	2e47      	cmp	r6, #71	; 0x47
 800ad4e:	d046      	beq.n	800adde <print_e+0xe2>
 800ad50:	222e      	movs	r2, #46	; 0x2e
 800ad52:	2130      	movs	r1, #48	; 0x30
 800ad54:	2d00      	cmp	r5, #0
 800ad56:	dc38      	bgt.n	800adca <print_e+0xce>
 800ad58:	1e5a      	subs	r2, r3, #1
 800ad5a:	2a00      	cmp	r2, #0
 800ad5c:	bfb8      	it	lt
 800ad5e:	f1c3 0301 	rsblt	r3, r3, #1
 800ad62:	4621      	mov	r1, r4
 800ad64:	9205      	str	r2, [sp, #20]
 800ad66:	bfbc      	itt	lt
 800ad68:	222d      	movlt	r2, #45	; 0x2d
 800ad6a:	9305      	strlt	r3, [sp, #20]
 800ad6c:	f801 6b02 	strb.w	r6, [r1], #2
 800ad70:	bfb8      	it	lt
 800ad72:	7062      	strblt	r2, [r4, #1]
 800ad74:	9a05      	ldr	r2, [sp, #20]
 800ad76:	bfa4      	itt	ge
 800ad78:	232b      	movge	r3, #43	; 0x2b
 800ad7a:	7063      	strbge	r3, [r4, #1]
 800ad7c:	2a63      	cmp	r2, #99	; 0x63
 800ad7e:	dd0b      	ble.n	800ad98 <print_e+0x9c>
 800ad80:	2364      	movs	r3, #100	; 0x64
 800ad82:	fb92 f3f3 	sdiv	r3, r2, r3
 800ad86:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ad8a:	70a0      	strb	r0, [r4, #2]
 800ad8c:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800ad90:	fb00 2303 	mla	r3, r0, r3, r2
 800ad94:	1ce1      	adds	r1, r4, #3
 800ad96:	9305      	str	r3, [sp, #20]
 800ad98:	9a05      	ldr	r2, [sp, #20]
 800ad9a:	230a      	movs	r3, #10
 800ad9c:	fb92 f3f3 	sdiv	r3, r2, r3
 800ada0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ada4:	7008      	strb	r0, [r1, #0]
 800ada6:	f06f 0009 	mvn.w	r0, #9
 800adaa:	fb00 2303 	mla	r3, r0, r3, r2
 800adae:	3330      	adds	r3, #48	; 0x30
 800adb0:	704b      	strb	r3, [r1, #1]
 800adb2:	2300      	movs	r3, #0
 800adb4:	708b      	strb	r3, [r1, #2]
 800adb6:	e7b9      	b.n	800ad2c <print_e+0x30>
 800adb8:	b10f      	cbz	r7, 800adbe <print_e+0xc2>
 800adba:	f804 2b01 	strb.w	r2, [r4], #1
 800adbe:	7801      	ldrb	r1, [r0, #0]
 800adc0:	f804 1b01 	strb.w	r1, [r4], #1
 800adc4:	3d01      	subs	r5, #1
 800adc6:	2700      	movs	r7, #0
 800adc8:	e7b9      	b.n	800ad3e <print_e+0x42>
 800adca:	b10f      	cbz	r7, 800add0 <print_e+0xd4>
 800adcc:	f804 2b01 	strb.w	r2, [r4], #1
 800add0:	f804 1b01 	strb.w	r1, [r4], #1
 800add4:	3d01      	subs	r5, #1
 800add6:	2700      	movs	r7, #0
 800add8:	e7bc      	b.n	800ad54 <print_e+0x58>
 800adda:	2665      	movs	r6, #101	; 0x65
 800addc:	e7bc      	b.n	800ad58 <print_e+0x5c>
 800adde:	2645      	movs	r6, #69	; 0x45
 800ade0:	e7ba      	b.n	800ad58 <print_e+0x5c>
 800ade2:	0000      	movs	r0, r0
 800ade4:	0000      	movs	r0, r0
	...

0800ade8 <_gcvt>:
 800ade8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adea:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800adee:	ed2d 8b02 	vpush	{d8}
 800adf2:	eeb0 8b40 	vmov.f64	d8, d0
 800adf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adfa:	b089      	sub	sp, #36	; 0x24
 800adfc:	bf48      	it	mi
 800adfe:	eeb1 8b40 	vnegmi.f64	d8, d0
 800ae02:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ae06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae0a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800ae0c:	4607      	mov	r7, r0
 800ae0e:	460c      	mov	r4, r1
 800ae10:	4615      	mov	r5, r2
 800ae12:	d108      	bne.n	800ae26 <_gcvt+0x3e>
 800ae14:	2330      	movs	r3, #48	; 0x30
 800ae16:	7013      	strb	r3, [r2, #0]
 800ae18:	2300      	movs	r3, #0
 800ae1a:	7053      	strb	r3, [r2, #1]
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	b009      	add	sp, #36	; 0x24
 800ae20:	ecbd 8b02 	vpop	{d8}
 800ae24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae26:	ed9f 7b4a 	vldr	d7, [pc, #296]	; 800af50 <_gcvt+0x168>
 800ae2a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ae2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae32:	d808      	bhi.n	800ae46 <_gcvt+0x5e>
 800ae34:	eeb0 0b48 	vmov.f64	d0, d8
 800ae38:	9600      	str	r6, [sp, #0]
 800ae3a:	1e62      	subs	r2, r4, #1
 800ae3c:	4629      	mov	r1, r5
 800ae3e:	4638      	mov	r0, r7
 800ae40:	f7ff ff5c 	bl	800acfc <print_e>
 800ae44:	e7ea      	b.n	800ae1c <_gcvt+0x34>
 800ae46:	4608      	mov	r0, r1
 800ae48:	9303      	str	r3, [sp, #12]
 800ae4a:	f000 fc03 	bl	800b654 <_mprec_log10>
 800ae4e:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800ae52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae56:	9b03      	ldr	r3, [sp, #12]
 800ae58:	d9ec      	bls.n	800ae34 <_gcvt+0x4c>
 800ae5a:	eeb0 0b48 	vmov.f64	d0, d8
 800ae5e:	ab07      	add	r3, sp, #28
 800ae60:	9301      	str	r3, [sp, #4]
 800ae62:	ab06      	add	r3, sp, #24
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	4622      	mov	r2, r4
 800ae68:	ab05      	add	r3, sp, #20
 800ae6a:	2102      	movs	r1, #2
 800ae6c:	4638      	mov	r0, r7
 800ae6e:	f000 fd33 	bl	800b8d8 <_dtoa_r>
 800ae72:	9a05      	ldr	r2, [sp, #20]
 800ae74:	f242 730f 	movw	r3, #9999	; 0x270f
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d00f      	beq.n	800ae9c <_gcvt+0xb4>
 800ae7c:	462b      	mov	r3, r5
 800ae7e:	192a      	adds	r2, r5, r4
 800ae80:	4607      	mov	r7, r0
 800ae82:	f810 cb01 	ldrb.w	ip, [r0], #1
 800ae86:	9905      	ldr	r1, [sp, #20]
 800ae88:	1ad4      	subs	r4, r2, r3
 800ae8a:	f1bc 0f00 	cmp.w	ip, #0
 800ae8e:	d001      	beq.n	800ae94 <_gcvt+0xac>
 800ae90:	2900      	cmp	r1, #0
 800ae92:	dc08      	bgt.n	800aea6 <_gcvt+0xbe>
 800ae94:	2200      	movs	r2, #0
 800ae96:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800ae9a:	e00d      	b.n	800aeb8 <_gcvt+0xd0>
 800ae9c:	4601      	mov	r1, r0
 800ae9e:	4628      	mov	r0, r5
 800aea0:	f000 fc66 	bl	800b770 <strcpy>
 800aea4:	e7ba      	b.n	800ae1c <_gcvt+0x34>
 800aea6:	3901      	subs	r1, #1
 800aea8:	f803 cb01 	strb.w	ip, [r3], #1
 800aeac:	9105      	str	r1, [sp, #20]
 800aeae:	e7e7      	b.n	800ae80 <_gcvt+0x98>
 800aeb0:	f803 cb01 	strb.w	ip, [r3], #1
 800aeb4:	3c01      	subs	r4, #1
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	2900      	cmp	r1, #0
 800aeba:	4608      	mov	r0, r1
 800aebc:	dc2a      	bgt.n	800af14 <_gcvt+0x12c>
 800aebe:	b102      	cbz	r2, 800aec2 <_gcvt+0xda>
 800aec0:	9105      	str	r1, [sp, #20]
 800aec2:	b90e      	cbnz	r6, 800aec8 <_gcvt+0xe0>
 800aec4:	783a      	ldrb	r2, [r7, #0]
 800aec6:	b312      	cbz	r2, 800af0e <_gcvt+0x126>
 800aec8:	42ab      	cmp	r3, r5
 800aeca:	bf04      	itt	eq
 800aecc:	2230      	moveq	r2, #48	; 0x30
 800aece:	f803 2b01 	strbeq.w	r2, [r3], #1
 800aed2:	222e      	movs	r2, #46	; 0x2e
 800aed4:	701a      	strb	r2, [r3, #0]
 800aed6:	9a05      	ldr	r2, [sp, #20]
 800aed8:	4619      	mov	r1, r3
 800aeda:	2000      	movs	r0, #0
 800aedc:	eba2 0c03 	sub.w	ip, r2, r3
 800aee0:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800aee4:	eb1c 0f01 	cmn.w	ip, r1
 800aee8:	d41c      	bmi.n	800af24 <_gcvt+0x13c>
 800aeea:	2a00      	cmp	r2, #0
 800aeec:	f1c2 0100 	rsb	r1, r2, #0
 800aef0:	bfc8      	it	gt
 800aef2:	2100      	movgt	r1, #0
 800aef4:	f101 0c01 	add.w	ip, r1, #1
 800aef8:	4463      	add	r3, ip
 800aefa:	440a      	add	r2, r1
 800aefc:	b100      	cbz	r0, 800af00 <_gcvt+0x118>
 800aefe:	9205      	str	r2, [sp, #20]
 800af00:	1e7a      	subs	r2, r7, #1
 800af02:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800af06:	b109      	cbz	r1, 800af0c <_gcvt+0x124>
 800af08:	2c00      	cmp	r4, #0
 800af0a:	dc0f      	bgt.n	800af2c <_gcvt+0x144>
 800af0c:	b9de      	cbnz	r6, 800af46 <_gcvt+0x15e>
 800af0e:	2200      	movs	r2, #0
 800af10:	701a      	strb	r2, [r3, #0]
 800af12:	e783      	b.n	800ae1c <_gcvt+0x34>
 800af14:	2c00      	cmp	r4, #0
 800af16:	f101 31ff 	add.w	r1, r1, #4294967295
 800af1a:	dcc9      	bgt.n	800aeb0 <_gcvt+0xc8>
 800af1c:	2a00      	cmp	r2, #0
 800af1e:	d0d0      	beq.n	800aec2 <_gcvt+0xda>
 800af20:	9005      	str	r0, [sp, #20]
 800af22:	e7ce      	b.n	800aec2 <_gcvt+0xda>
 800af24:	f801 ef01 	strb.w	lr, [r1, #1]!
 800af28:	2001      	movs	r0, #1
 800af2a:	e7db      	b.n	800aee4 <_gcvt+0xfc>
 800af2c:	f803 1b01 	strb.w	r1, [r3], #1
 800af30:	3c01      	subs	r4, #1
 800af32:	e7e6      	b.n	800af02 <_gcvt+0x11a>
 800af34:	f802 6b01 	strb.w	r6, [r2], #1
 800af38:	1a81      	subs	r1, r0, r2
 800af3a:	2900      	cmp	r1, #0
 800af3c:	dcfa      	bgt.n	800af34 <_gcvt+0x14c>
 800af3e:	2c00      	cmp	r4, #0
 800af40:	bfa8      	it	ge
 800af42:	191b      	addge	r3, r3, r4
 800af44:	e7e3      	b.n	800af0e <_gcvt+0x126>
 800af46:	461a      	mov	r2, r3
 800af48:	1918      	adds	r0, r3, r4
 800af4a:	2630      	movs	r6, #48	; 0x30
 800af4c:	e7f4      	b.n	800af38 <_gcvt+0x150>
 800af4e:	bf00      	nop
 800af50:	eb1c432d 	.word	0xeb1c432d
 800af54:	3f1a36e2 	.word	0x3f1a36e2

0800af58 <_Balloc>:
 800af58:	b570      	push	{r4, r5, r6, lr}
 800af5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af5c:	4604      	mov	r4, r0
 800af5e:	460d      	mov	r5, r1
 800af60:	b976      	cbnz	r6, 800af80 <_Balloc+0x28>
 800af62:	2010      	movs	r0, #16
 800af64:	f001 fa4c 	bl	800c400 <malloc>
 800af68:	4602      	mov	r2, r0
 800af6a:	6260      	str	r0, [r4, #36]	; 0x24
 800af6c:	b920      	cbnz	r0, 800af78 <_Balloc+0x20>
 800af6e:	4b18      	ldr	r3, [pc, #96]	; (800afd0 <_Balloc+0x78>)
 800af70:	4818      	ldr	r0, [pc, #96]	; (800afd4 <_Balloc+0x7c>)
 800af72:	2166      	movs	r1, #102	; 0x66
 800af74:	f000 fc04 	bl	800b780 <__assert_func>
 800af78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af7c:	6006      	str	r6, [r0, #0]
 800af7e:	60c6      	str	r6, [r0, #12]
 800af80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af82:	68f3      	ldr	r3, [r6, #12]
 800af84:	b183      	cbz	r3, 800afa8 <_Balloc+0x50>
 800af86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af8e:	b9b8      	cbnz	r0, 800afc0 <_Balloc+0x68>
 800af90:	2101      	movs	r1, #1
 800af92:	fa01 f605 	lsl.w	r6, r1, r5
 800af96:	1d72      	adds	r2, r6, #5
 800af98:	0092      	lsls	r2, r2, #2
 800af9a:	4620      	mov	r0, r4
 800af9c:	f000 fb6e 	bl	800b67c <_calloc_r>
 800afa0:	b160      	cbz	r0, 800afbc <_Balloc+0x64>
 800afa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afa6:	e00e      	b.n	800afc6 <_Balloc+0x6e>
 800afa8:	2221      	movs	r2, #33	; 0x21
 800afaa:	2104      	movs	r1, #4
 800afac:	4620      	mov	r0, r4
 800afae:	f000 fb65 	bl	800b67c <_calloc_r>
 800afb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afb4:	60f0      	str	r0, [r6, #12]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1e4      	bne.n	800af86 <_Balloc+0x2e>
 800afbc:	2000      	movs	r0, #0
 800afbe:	bd70      	pop	{r4, r5, r6, pc}
 800afc0:	6802      	ldr	r2, [r0, #0]
 800afc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afc6:	2300      	movs	r3, #0
 800afc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afcc:	e7f7      	b.n	800afbe <_Balloc+0x66>
 800afce:	bf00      	nop
 800afd0:	0800d3a0 	.word	0x0800d3a0
 800afd4:	0800d3b7 	.word	0x0800d3b7

0800afd8 <_Bfree>:
 800afd8:	b570      	push	{r4, r5, r6, lr}
 800afda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afdc:	4605      	mov	r5, r0
 800afde:	460c      	mov	r4, r1
 800afe0:	b976      	cbnz	r6, 800b000 <_Bfree+0x28>
 800afe2:	2010      	movs	r0, #16
 800afe4:	f001 fa0c 	bl	800c400 <malloc>
 800afe8:	4602      	mov	r2, r0
 800afea:	6268      	str	r0, [r5, #36]	; 0x24
 800afec:	b920      	cbnz	r0, 800aff8 <_Bfree+0x20>
 800afee:	4b09      	ldr	r3, [pc, #36]	; (800b014 <_Bfree+0x3c>)
 800aff0:	4809      	ldr	r0, [pc, #36]	; (800b018 <_Bfree+0x40>)
 800aff2:	218a      	movs	r1, #138	; 0x8a
 800aff4:	f000 fbc4 	bl	800b780 <__assert_func>
 800aff8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800affc:	6006      	str	r6, [r0, #0]
 800affe:	60c6      	str	r6, [r0, #12]
 800b000:	b13c      	cbz	r4, 800b012 <_Bfree+0x3a>
 800b002:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b004:	6862      	ldr	r2, [r4, #4]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b00c:	6021      	str	r1, [r4, #0]
 800b00e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b012:	bd70      	pop	{r4, r5, r6, pc}
 800b014:	0800d3a0 	.word	0x0800d3a0
 800b018:	0800d3b7 	.word	0x0800d3b7

0800b01c <__multadd>:
 800b01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b020:	690e      	ldr	r6, [r1, #16]
 800b022:	4607      	mov	r7, r0
 800b024:	4698      	mov	r8, r3
 800b026:	460c      	mov	r4, r1
 800b028:	f101 0014 	add.w	r0, r1, #20
 800b02c:	2300      	movs	r3, #0
 800b02e:	6805      	ldr	r5, [r0, #0]
 800b030:	b2a9      	uxth	r1, r5
 800b032:	fb02 8101 	mla	r1, r2, r1, r8
 800b036:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b03a:	0c2d      	lsrs	r5, r5, #16
 800b03c:	fb02 c505 	mla	r5, r2, r5, ip
 800b040:	b289      	uxth	r1, r1
 800b042:	3301      	adds	r3, #1
 800b044:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b048:	429e      	cmp	r6, r3
 800b04a:	f840 1b04 	str.w	r1, [r0], #4
 800b04e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b052:	dcec      	bgt.n	800b02e <__multadd+0x12>
 800b054:	f1b8 0f00 	cmp.w	r8, #0
 800b058:	d022      	beq.n	800b0a0 <__multadd+0x84>
 800b05a:	68a3      	ldr	r3, [r4, #8]
 800b05c:	42b3      	cmp	r3, r6
 800b05e:	dc19      	bgt.n	800b094 <__multadd+0x78>
 800b060:	6861      	ldr	r1, [r4, #4]
 800b062:	4638      	mov	r0, r7
 800b064:	3101      	adds	r1, #1
 800b066:	f7ff ff77 	bl	800af58 <_Balloc>
 800b06a:	4605      	mov	r5, r0
 800b06c:	b928      	cbnz	r0, 800b07a <__multadd+0x5e>
 800b06e:	4602      	mov	r2, r0
 800b070:	4b0d      	ldr	r3, [pc, #52]	; (800b0a8 <__multadd+0x8c>)
 800b072:	480e      	ldr	r0, [pc, #56]	; (800b0ac <__multadd+0x90>)
 800b074:	21b5      	movs	r1, #181	; 0xb5
 800b076:	f000 fb83 	bl	800b780 <__assert_func>
 800b07a:	6922      	ldr	r2, [r4, #16]
 800b07c:	3202      	adds	r2, #2
 800b07e:	f104 010c 	add.w	r1, r4, #12
 800b082:	0092      	lsls	r2, r2, #2
 800b084:	300c      	adds	r0, #12
 800b086:	f001 f9c3 	bl	800c410 <memcpy>
 800b08a:	4621      	mov	r1, r4
 800b08c:	4638      	mov	r0, r7
 800b08e:	f7ff ffa3 	bl	800afd8 <_Bfree>
 800b092:	462c      	mov	r4, r5
 800b094:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b098:	3601      	adds	r6, #1
 800b09a:	f8c3 8014 	str.w	r8, [r3, #20]
 800b09e:	6126      	str	r6, [r4, #16]
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a6:	bf00      	nop
 800b0a8:	0800d417 	.word	0x0800d417
 800b0ac:	0800d3b7 	.word	0x0800d3b7

0800b0b0 <__hi0bits>:
 800b0b0:	0c03      	lsrs	r3, r0, #16
 800b0b2:	041b      	lsls	r3, r3, #16
 800b0b4:	b9d3      	cbnz	r3, 800b0ec <__hi0bits+0x3c>
 800b0b6:	0400      	lsls	r0, r0, #16
 800b0b8:	2310      	movs	r3, #16
 800b0ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b0be:	bf04      	itt	eq
 800b0c0:	0200      	lsleq	r0, r0, #8
 800b0c2:	3308      	addeq	r3, #8
 800b0c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b0c8:	bf04      	itt	eq
 800b0ca:	0100      	lsleq	r0, r0, #4
 800b0cc:	3304      	addeq	r3, #4
 800b0ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0d2:	bf04      	itt	eq
 800b0d4:	0080      	lsleq	r0, r0, #2
 800b0d6:	3302      	addeq	r3, #2
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	db05      	blt.n	800b0e8 <__hi0bits+0x38>
 800b0dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0e0:	f103 0301 	add.w	r3, r3, #1
 800b0e4:	bf08      	it	eq
 800b0e6:	2320      	moveq	r3, #32
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	4770      	bx	lr
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	e7e4      	b.n	800b0ba <__hi0bits+0xa>

0800b0f0 <__lo0bits>:
 800b0f0:	6803      	ldr	r3, [r0, #0]
 800b0f2:	f013 0207 	ands.w	r2, r3, #7
 800b0f6:	4601      	mov	r1, r0
 800b0f8:	d00b      	beq.n	800b112 <__lo0bits+0x22>
 800b0fa:	07da      	lsls	r2, r3, #31
 800b0fc:	d424      	bmi.n	800b148 <__lo0bits+0x58>
 800b0fe:	0798      	lsls	r0, r3, #30
 800b100:	bf49      	itett	mi
 800b102:	085b      	lsrmi	r3, r3, #1
 800b104:	089b      	lsrpl	r3, r3, #2
 800b106:	2001      	movmi	r0, #1
 800b108:	600b      	strmi	r3, [r1, #0]
 800b10a:	bf5c      	itt	pl
 800b10c:	600b      	strpl	r3, [r1, #0]
 800b10e:	2002      	movpl	r0, #2
 800b110:	4770      	bx	lr
 800b112:	b298      	uxth	r0, r3
 800b114:	b9b0      	cbnz	r0, 800b144 <__lo0bits+0x54>
 800b116:	0c1b      	lsrs	r3, r3, #16
 800b118:	2010      	movs	r0, #16
 800b11a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b11e:	bf04      	itt	eq
 800b120:	0a1b      	lsreq	r3, r3, #8
 800b122:	3008      	addeq	r0, #8
 800b124:	071a      	lsls	r2, r3, #28
 800b126:	bf04      	itt	eq
 800b128:	091b      	lsreq	r3, r3, #4
 800b12a:	3004      	addeq	r0, #4
 800b12c:	079a      	lsls	r2, r3, #30
 800b12e:	bf04      	itt	eq
 800b130:	089b      	lsreq	r3, r3, #2
 800b132:	3002      	addeq	r0, #2
 800b134:	07da      	lsls	r2, r3, #31
 800b136:	d403      	bmi.n	800b140 <__lo0bits+0x50>
 800b138:	085b      	lsrs	r3, r3, #1
 800b13a:	f100 0001 	add.w	r0, r0, #1
 800b13e:	d005      	beq.n	800b14c <__lo0bits+0x5c>
 800b140:	600b      	str	r3, [r1, #0]
 800b142:	4770      	bx	lr
 800b144:	4610      	mov	r0, r2
 800b146:	e7e8      	b.n	800b11a <__lo0bits+0x2a>
 800b148:	2000      	movs	r0, #0
 800b14a:	4770      	bx	lr
 800b14c:	2020      	movs	r0, #32
 800b14e:	4770      	bx	lr

0800b150 <__i2b>:
 800b150:	b510      	push	{r4, lr}
 800b152:	460c      	mov	r4, r1
 800b154:	2101      	movs	r1, #1
 800b156:	f7ff feff 	bl	800af58 <_Balloc>
 800b15a:	4602      	mov	r2, r0
 800b15c:	b928      	cbnz	r0, 800b16a <__i2b+0x1a>
 800b15e:	4b05      	ldr	r3, [pc, #20]	; (800b174 <__i2b+0x24>)
 800b160:	4805      	ldr	r0, [pc, #20]	; (800b178 <__i2b+0x28>)
 800b162:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b166:	f000 fb0b 	bl	800b780 <__assert_func>
 800b16a:	2301      	movs	r3, #1
 800b16c:	6144      	str	r4, [r0, #20]
 800b16e:	6103      	str	r3, [r0, #16]
 800b170:	bd10      	pop	{r4, pc}
 800b172:	bf00      	nop
 800b174:	0800d417 	.word	0x0800d417
 800b178:	0800d3b7 	.word	0x0800d3b7

0800b17c <__multiply>:
 800b17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b180:	4614      	mov	r4, r2
 800b182:	690a      	ldr	r2, [r1, #16]
 800b184:	6923      	ldr	r3, [r4, #16]
 800b186:	429a      	cmp	r2, r3
 800b188:	bfb8      	it	lt
 800b18a:	460b      	movlt	r3, r1
 800b18c:	460d      	mov	r5, r1
 800b18e:	bfbc      	itt	lt
 800b190:	4625      	movlt	r5, r4
 800b192:	461c      	movlt	r4, r3
 800b194:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b198:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b19c:	68ab      	ldr	r3, [r5, #8]
 800b19e:	6869      	ldr	r1, [r5, #4]
 800b1a0:	eb0a 0709 	add.w	r7, sl, r9
 800b1a4:	42bb      	cmp	r3, r7
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	bfb8      	it	lt
 800b1aa:	3101      	addlt	r1, #1
 800b1ac:	f7ff fed4 	bl	800af58 <_Balloc>
 800b1b0:	b930      	cbnz	r0, 800b1c0 <__multiply+0x44>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	4b42      	ldr	r3, [pc, #264]	; (800b2c0 <__multiply+0x144>)
 800b1b6:	4843      	ldr	r0, [pc, #268]	; (800b2c4 <__multiply+0x148>)
 800b1b8:	f240 115d 	movw	r1, #349	; 0x15d
 800b1bc:	f000 fae0 	bl	800b780 <__assert_func>
 800b1c0:	f100 0614 	add.w	r6, r0, #20
 800b1c4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b1c8:	4633      	mov	r3, r6
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	4543      	cmp	r3, r8
 800b1ce:	d31e      	bcc.n	800b20e <__multiply+0x92>
 800b1d0:	f105 0c14 	add.w	ip, r5, #20
 800b1d4:	f104 0314 	add.w	r3, r4, #20
 800b1d8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b1dc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b1e0:	9202      	str	r2, [sp, #8]
 800b1e2:	ebac 0205 	sub.w	r2, ip, r5
 800b1e6:	3a15      	subs	r2, #21
 800b1e8:	f022 0203 	bic.w	r2, r2, #3
 800b1ec:	3204      	adds	r2, #4
 800b1ee:	f105 0115 	add.w	r1, r5, #21
 800b1f2:	458c      	cmp	ip, r1
 800b1f4:	bf38      	it	cc
 800b1f6:	2204      	movcc	r2, #4
 800b1f8:	9201      	str	r2, [sp, #4]
 800b1fa:	9a02      	ldr	r2, [sp, #8]
 800b1fc:	9303      	str	r3, [sp, #12]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d808      	bhi.n	800b214 <__multiply+0x98>
 800b202:	2f00      	cmp	r7, #0
 800b204:	dc55      	bgt.n	800b2b2 <__multiply+0x136>
 800b206:	6107      	str	r7, [r0, #16]
 800b208:	b005      	add	sp, #20
 800b20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b20e:	f843 2b04 	str.w	r2, [r3], #4
 800b212:	e7db      	b.n	800b1cc <__multiply+0x50>
 800b214:	f8b3 a000 	ldrh.w	sl, [r3]
 800b218:	f1ba 0f00 	cmp.w	sl, #0
 800b21c:	d020      	beq.n	800b260 <__multiply+0xe4>
 800b21e:	f105 0e14 	add.w	lr, r5, #20
 800b222:	46b1      	mov	r9, r6
 800b224:	2200      	movs	r2, #0
 800b226:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b22a:	f8d9 b000 	ldr.w	fp, [r9]
 800b22e:	b2a1      	uxth	r1, r4
 800b230:	fa1f fb8b 	uxth.w	fp, fp
 800b234:	fb0a b101 	mla	r1, sl, r1, fp
 800b238:	4411      	add	r1, r2
 800b23a:	f8d9 2000 	ldr.w	r2, [r9]
 800b23e:	0c24      	lsrs	r4, r4, #16
 800b240:	0c12      	lsrs	r2, r2, #16
 800b242:	fb0a 2404 	mla	r4, sl, r4, r2
 800b246:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b24a:	b289      	uxth	r1, r1
 800b24c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b250:	45f4      	cmp	ip, lr
 800b252:	f849 1b04 	str.w	r1, [r9], #4
 800b256:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b25a:	d8e4      	bhi.n	800b226 <__multiply+0xaa>
 800b25c:	9901      	ldr	r1, [sp, #4]
 800b25e:	5072      	str	r2, [r6, r1]
 800b260:	9a03      	ldr	r2, [sp, #12]
 800b262:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b266:	3304      	adds	r3, #4
 800b268:	f1b9 0f00 	cmp.w	r9, #0
 800b26c:	d01f      	beq.n	800b2ae <__multiply+0x132>
 800b26e:	6834      	ldr	r4, [r6, #0]
 800b270:	f105 0114 	add.w	r1, r5, #20
 800b274:	46b6      	mov	lr, r6
 800b276:	f04f 0a00 	mov.w	sl, #0
 800b27a:	880a      	ldrh	r2, [r1, #0]
 800b27c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b280:	fb09 b202 	mla	r2, r9, r2, fp
 800b284:	4492      	add	sl, r2
 800b286:	b2a4      	uxth	r4, r4
 800b288:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b28c:	f84e 4b04 	str.w	r4, [lr], #4
 800b290:	f851 4b04 	ldr.w	r4, [r1], #4
 800b294:	f8be 2000 	ldrh.w	r2, [lr]
 800b298:	0c24      	lsrs	r4, r4, #16
 800b29a:	fb09 2404 	mla	r4, r9, r4, r2
 800b29e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b2a2:	458c      	cmp	ip, r1
 800b2a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b2a8:	d8e7      	bhi.n	800b27a <__multiply+0xfe>
 800b2aa:	9a01      	ldr	r2, [sp, #4]
 800b2ac:	50b4      	str	r4, [r6, r2]
 800b2ae:	3604      	adds	r6, #4
 800b2b0:	e7a3      	b.n	800b1fa <__multiply+0x7e>
 800b2b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1a5      	bne.n	800b206 <__multiply+0x8a>
 800b2ba:	3f01      	subs	r7, #1
 800b2bc:	e7a1      	b.n	800b202 <__multiply+0x86>
 800b2be:	bf00      	nop
 800b2c0:	0800d417 	.word	0x0800d417
 800b2c4:	0800d3b7 	.word	0x0800d3b7

0800b2c8 <__pow5mult>:
 800b2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2cc:	4615      	mov	r5, r2
 800b2ce:	f012 0203 	ands.w	r2, r2, #3
 800b2d2:	4606      	mov	r6, r0
 800b2d4:	460f      	mov	r7, r1
 800b2d6:	d007      	beq.n	800b2e8 <__pow5mult+0x20>
 800b2d8:	4c25      	ldr	r4, [pc, #148]	; (800b370 <__pow5mult+0xa8>)
 800b2da:	3a01      	subs	r2, #1
 800b2dc:	2300      	movs	r3, #0
 800b2de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2e2:	f7ff fe9b 	bl	800b01c <__multadd>
 800b2e6:	4607      	mov	r7, r0
 800b2e8:	10ad      	asrs	r5, r5, #2
 800b2ea:	d03d      	beq.n	800b368 <__pow5mult+0xa0>
 800b2ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2ee:	b97c      	cbnz	r4, 800b310 <__pow5mult+0x48>
 800b2f0:	2010      	movs	r0, #16
 800b2f2:	f001 f885 	bl	800c400 <malloc>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	6270      	str	r0, [r6, #36]	; 0x24
 800b2fa:	b928      	cbnz	r0, 800b308 <__pow5mult+0x40>
 800b2fc:	4b1d      	ldr	r3, [pc, #116]	; (800b374 <__pow5mult+0xac>)
 800b2fe:	481e      	ldr	r0, [pc, #120]	; (800b378 <__pow5mult+0xb0>)
 800b300:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b304:	f000 fa3c 	bl	800b780 <__assert_func>
 800b308:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b30c:	6004      	str	r4, [r0, #0]
 800b30e:	60c4      	str	r4, [r0, #12]
 800b310:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b314:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b318:	b94c      	cbnz	r4, 800b32e <__pow5mult+0x66>
 800b31a:	f240 2171 	movw	r1, #625	; 0x271
 800b31e:	4630      	mov	r0, r6
 800b320:	f7ff ff16 	bl	800b150 <__i2b>
 800b324:	2300      	movs	r3, #0
 800b326:	f8c8 0008 	str.w	r0, [r8, #8]
 800b32a:	4604      	mov	r4, r0
 800b32c:	6003      	str	r3, [r0, #0]
 800b32e:	f04f 0900 	mov.w	r9, #0
 800b332:	07eb      	lsls	r3, r5, #31
 800b334:	d50a      	bpl.n	800b34c <__pow5mult+0x84>
 800b336:	4639      	mov	r1, r7
 800b338:	4622      	mov	r2, r4
 800b33a:	4630      	mov	r0, r6
 800b33c:	f7ff ff1e 	bl	800b17c <__multiply>
 800b340:	4639      	mov	r1, r7
 800b342:	4680      	mov	r8, r0
 800b344:	4630      	mov	r0, r6
 800b346:	f7ff fe47 	bl	800afd8 <_Bfree>
 800b34a:	4647      	mov	r7, r8
 800b34c:	106d      	asrs	r5, r5, #1
 800b34e:	d00b      	beq.n	800b368 <__pow5mult+0xa0>
 800b350:	6820      	ldr	r0, [r4, #0]
 800b352:	b938      	cbnz	r0, 800b364 <__pow5mult+0x9c>
 800b354:	4622      	mov	r2, r4
 800b356:	4621      	mov	r1, r4
 800b358:	4630      	mov	r0, r6
 800b35a:	f7ff ff0f 	bl	800b17c <__multiply>
 800b35e:	6020      	str	r0, [r4, #0]
 800b360:	f8c0 9000 	str.w	r9, [r0]
 800b364:	4604      	mov	r4, r0
 800b366:	e7e4      	b.n	800b332 <__pow5mult+0x6a>
 800b368:	4638      	mov	r0, r7
 800b36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b36e:	bf00      	nop
 800b370:	0800d518 	.word	0x0800d518
 800b374:	0800d3a0 	.word	0x0800d3a0
 800b378:	0800d3b7 	.word	0x0800d3b7

0800b37c <__lshift>:
 800b37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b380:	460c      	mov	r4, r1
 800b382:	6849      	ldr	r1, [r1, #4]
 800b384:	6923      	ldr	r3, [r4, #16]
 800b386:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b38a:	68a3      	ldr	r3, [r4, #8]
 800b38c:	4607      	mov	r7, r0
 800b38e:	4691      	mov	r9, r2
 800b390:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b394:	f108 0601 	add.w	r6, r8, #1
 800b398:	42b3      	cmp	r3, r6
 800b39a:	db0b      	blt.n	800b3b4 <__lshift+0x38>
 800b39c:	4638      	mov	r0, r7
 800b39e:	f7ff fddb 	bl	800af58 <_Balloc>
 800b3a2:	4605      	mov	r5, r0
 800b3a4:	b948      	cbnz	r0, 800b3ba <__lshift+0x3e>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	4b28      	ldr	r3, [pc, #160]	; (800b44c <__lshift+0xd0>)
 800b3aa:	4829      	ldr	r0, [pc, #164]	; (800b450 <__lshift+0xd4>)
 800b3ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b3b0:	f000 f9e6 	bl	800b780 <__assert_func>
 800b3b4:	3101      	adds	r1, #1
 800b3b6:	005b      	lsls	r3, r3, #1
 800b3b8:	e7ee      	b.n	800b398 <__lshift+0x1c>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	f100 0114 	add.w	r1, r0, #20
 800b3c0:	f100 0210 	add.w	r2, r0, #16
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	4553      	cmp	r3, sl
 800b3c8:	db33      	blt.n	800b432 <__lshift+0xb6>
 800b3ca:	6920      	ldr	r0, [r4, #16]
 800b3cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3d0:	f104 0314 	add.w	r3, r4, #20
 800b3d4:	f019 091f 	ands.w	r9, r9, #31
 800b3d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3e0:	d02b      	beq.n	800b43a <__lshift+0xbe>
 800b3e2:	f1c9 0e20 	rsb	lr, r9, #32
 800b3e6:	468a      	mov	sl, r1
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	6818      	ldr	r0, [r3, #0]
 800b3ec:	fa00 f009 	lsl.w	r0, r0, r9
 800b3f0:	4302      	orrs	r2, r0
 800b3f2:	f84a 2b04 	str.w	r2, [sl], #4
 800b3f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3fa:	459c      	cmp	ip, r3
 800b3fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b400:	d8f3      	bhi.n	800b3ea <__lshift+0x6e>
 800b402:	ebac 0304 	sub.w	r3, ip, r4
 800b406:	3b15      	subs	r3, #21
 800b408:	f023 0303 	bic.w	r3, r3, #3
 800b40c:	3304      	adds	r3, #4
 800b40e:	f104 0015 	add.w	r0, r4, #21
 800b412:	4584      	cmp	ip, r0
 800b414:	bf38      	it	cc
 800b416:	2304      	movcc	r3, #4
 800b418:	50ca      	str	r2, [r1, r3]
 800b41a:	b10a      	cbz	r2, 800b420 <__lshift+0xa4>
 800b41c:	f108 0602 	add.w	r6, r8, #2
 800b420:	3e01      	subs	r6, #1
 800b422:	4638      	mov	r0, r7
 800b424:	612e      	str	r6, [r5, #16]
 800b426:	4621      	mov	r1, r4
 800b428:	f7ff fdd6 	bl	800afd8 <_Bfree>
 800b42c:	4628      	mov	r0, r5
 800b42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b432:	f842 0f04 	str.w	r0, [r2, #4]!
 800b436:	3301      	adds	r3, #1
 800b438:	e7c5      	b.n	800b3c6 <__lshift+0x4a>
 800b43a:	3904      	subs	r1, #4
 800b43c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b440:	f841 2f04 	str.w	r2, [r1, #4]!
 800b444:	459c      	cmp	ip, r3
 800b446:	d8f9      	bhi.n	800b43c <__lshift+0xc0>
 800b448:	e7ea      	b.n	800b420 <__lshift+0xa4>
 800b44a:	bf00      	nop
 800b44c:	0800d417 	.word	0x0800d417
 800b450:	0800d3b7 	.word	0x0800d3b7

0800b454 <__mcmp>:
 800b454:	b530      	push	{r4, r5, lr}
 800b456:	6902      	ldr	r2, [r0, #16]
 800b458:	690c      	ldr	r4, [r1, #16]
 800b45a:	1b12      	subs	r2, r2, r4
 800b45c:	d10e      	bne.n	800b47c <__mcmp+0x28>
 800b45e:	f100 0314 	add.w	r3, r0, #20
 800b462:	3114      	adds	r1, #20
 800b464:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b468:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b46c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b470:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b474:	42a5      	cmp	r5, r4
 800b476:	d003      	beq.n	800b480 <__mcmp+0x2c>
 800b478:	d305      	bcc.n	800b486 <__mcmp+0x32>
 800b47a:	2201      	movs	r2, #1
 800b47c:	4610      	mov	r0, r2
 800b47e:	bd30      	pop	{r4, r5, pc}
 800b480:	4283      	cmp	r3, r0
 800b482:	d3f3      	bcc.n	800b46c <__mcmp+0x18>
 800b484:	e7fa      	b.n	800b47c <__mcmp+0x28>
 800b486:	f04f 32ff 	mov.w	r2, #4294967295
 800b48a:	e7f7      	b.n	800b47c <__mcmp+0x28>

0800b48c <__mdiff>:
 800b48c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b490:	460c      	mov	r4, r1
 800b492:	4606      	mov	r6, r0
 800b494:	4611      	mov	r1, r2
 800b496:	4620      	mov	r0, r4
 800b498:	4617      	mov	r7, r2
 800b49a:	f7ff ffdb 	bl	800b454 <__mcmp>
 800b49e:	1e05      	subs	r5, r0, #0
 800b4a0:	d110      	bne.n	800b4c4 <__mdiff+0x38>
 800b4a2:	4629      	mov	r1, r5
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	f7ff fd57 	bl	800af58 <_Balloc>
 800b4aa:	b930      	cbnz	r0, 800b4ba <__mdiff+0x2e>
 800b4ac:	4b39      	ldr	r3, [pc, #228]	; (800b594 <__mdiff+0x108>)
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	f240 2132 	movw	r1, #562	; 0x232
 800b4b4:	4838      	ldr	r0, [pc, #224]	; (800b598 <__mdiff+0x10c>)
 800b4b6:	f000 f963 	bl	800b780 <__assert_func>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c4:	bfa4      	itt	ge
 800b4c6:	463b      	movge	r3, r7
 800b4c8:	4627      	movge	r7, r4
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	6879      	ldr	r1, [r7, #4]
 800b4ce:	bfa6      	itte	ge
 800b4d0:	461c      	movge	r4, r3
 800b4d2:	2500      	movge	r5, #0
 800b4d4:	2501      	movlt	r5, #1
 800b4d6:	f7ff fd3f 	bl	800af58 <_Balloc>
 800b4da:	b920      	cbnz	r0, 800b4e6 <__mdiff+0x5a>
 800b4dc:	4b2d      	ldr	r3, [pc, #180]	; (800b594 <__mdiff+0x108>)
 800b4de:	4602      	mov	r2, r0
 800b4e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b4e4:	e7e6      	b.n	800b4b4 <__mdiff+0x28>
 800b4e6:	693e      	ldr	r6, [r7, #16]
 800b4e8:	60c5      	str	r5, [r0, #12]
 800b4ea:	6925      	ldr	r5, [r4, #16]
 800b4ec:	f107 0114 	add.w	r1, r7, #20
 800b4f0:	f104 0914 	add.w	r9, r4, #20
 800b4f4:	f100 0e14 	add.w	lr, r0, #20
 800b4f8:	f107 0210 	add.w	r2, r7, #16
 800b4fc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b500:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b504:	46f2      	mov	sl, lr
 800b506:	2700      	movs	r7, #0
 800b508:	f859 3b04 	ldr.w	r3, [r9], #4
 800b50c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b510:	fa1f f883 	uxth.w	r8, r3
 800b514:	fa17 f78b 	uxtah	r7, r7, fp
 800b518:	0c1b      	lsrs	r3, r3, #16
 800b51a:	eba7 0808 	sub.w	r8, r7, r8
 800b51e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b522:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b526:	fa1f f888 	uxth.w	r8, r8
 800b52a:	141f      	asrs	r7, r3, #16
 800b52c:	454d      	cmp	r5, r9
 800b52e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b532:	f84a 3b04 	str.w	r3, [sl], #4
 800b536:	d8e7      	bhi.n	800b508 <__mdiff+0x7c>
 800b538:	1b2b      	subs	r3, r5, r4
 800b53a:	3b15      	subs	r3, #21
 800b53c:	f023 0303 	bic.w	r3, r3, #3
 800b540:	3304      	adds	r3, #4
 800b542:	3415      	adds	r4, #21
 800b544:	42a5      	cmp	r5, r4
 800b546:	bf38      	it	cc
 800b548:	2304      	movcc	r3, #4
 800b54a:	4419      	add	r1, r3
 800b54c:	4473      	add	r3, lr
 800b54e:	469e      	mov	lr, r3
 800b550:	460d      	mov	r5, r1
 800b552:	4565      	cmp	r5, ip
 800b554:	d30e      	bcc.n	800b574 <__mdiff+0xe8>
 800b556:	f10c 0203 	add.w	r2, ip, #3
 800b55a:	1a52      	subs	r2, r2, r1
 800b55c:	f022 0203 	bic.w	r2, r2, #3
 800b560:	3903      	subs	r1, #3
 800b562:	458c      	cmp	ip, r1
 800b564:	bf38      	it	cc
 800b566:	2200      	movcc	r2, #0
 800b568:	441a      	add	r2, r3
 800b56a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b56e:	b17b      	cbz	r3, 800b590 <__mdiff+0x104>
 800b570:	6106      	str	r6, [r0, #16]
 800b572:	e7a5      	b.n	800b4c0 <__mdiff+0x34>
 800b574:	f855 8b04 	ldr.w	r8, [r5], #4
 800b578:	fa17 f488 	uxtah	r4, r7, r8
 800b57c:	1422      	asrs	r2, r4, #16
 800b57e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b582:	b2a4      	uxth	r4, r4
 800b584:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b588:	f84e 4b04 	str.w	r4, [lr], #4
 800b58c:	1417      	asrs	r7, r2, #16
 800b58e:	e7e0      	b.n	800b552 <__mdiff+0xc6>
 800b590:	3e01      	subs	r6, #1
 800b592:	e7ea      	b.n	800b56a <__mdiff+0xde>
 800b594:	0800d417 	.word	0x0800d417
 800b598:	0800d3b7 	.word	0x0800d3b7

0800b59c <__d2b>:
 800b59c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5a0:	4689      	mov	r9, r1
 800b5a2:	2101      	movs	r1, #1
 800b5a4:	ec57 6b10 	vmov	r6, r7, d0
 800b5a8:	4690      	mov	r8, r2
 800b5aa:	f7ff fcd5 	bl	800af58 <_Balloc>
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	b930      	cbnz	r0, 800b5c0 <__d2b+0x24>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	4b25      	ldr	r3, [pc, #148]	; (800b64c <__d2b+0xb0>)
 800b5b6:	4826      	ldr	r0, [pc, #152]	; (800b650 <__d2b+0xb4>)
 800b5b8:	f240 310a 	movw	r1, #778	; 0x30a
 800b5bc:	f000 f8e0 	bl	800b780 <__assert_func>
 800b5c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b5c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b5c8:	bb35      	cbnz	r5, 800b618 <__d2b+0x7c>
 800b5ca:	2e00      	cmp	r6, #0
 800b5cc:	9301      	str	r3, [sp, #4]
 800b5ce:	d028      	beq.n	800b622 <__d2b+0x86>
 800b5d0:	4668      	mov	r0, sp
 800b5d2:	9600      	str	r6, [sp, #0]
 800b5d4:	f7ff fd8c 	bl	800b0f0 <__lo0bits>
 800b5d8:	9900      	ldr	r1, [sp, #0]
 800b5da:	b300      	cbz	r0, 800b61e <__d2b+0x82>
 800b5dc:	9a01      	ldr	r2, [sp, #4]
 800b5de:	f1c0 0320 	rsb	r3, r0, #32
 800b5e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b5e6:	430b      	orrs	r3, r1
 800b5e8:	40c2      	lsrs	r2, r0
 800b5ea:	6163      	str	r3, [r4, #20]
 800b5ec:	9201      	str	r2, [sp, #4]
 800b5ee:	9b01      	ldr	r3, [sp, #4]
 800b5f0:	61a3      	str	r3, [r4, #24]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	bf14      	ite	ne
 800b5f6:	2202      	movne	r2, #2
 800b5f8:	2201      	moveq	r2, #1
 800b5fa:	6122      	str	r2, [r4, #16]
 800b5fc:	b1d5      	cbz	r5, 800b634 <__d2b+0x98>
 800b5fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b602:	4405      	add	r5, r0
 800b604:	f8c9 5000 	str.w	r5, [r9]
 800b608:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b60c:	f8c8 0000 	str.w	r0, [r8]
 800b610:	4620      	mov	r0, r4
 800b612:	b003      	add	sp, #12
 800b614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b61c:	e7d5      	b.n	800b5ca <__d2b+0x2e>
 800b61e:	6161      	str	r1, [r4, #20]
 800b620:	e7e5      	b.n	800b5ee <__d2b+0x52>
 800b622:	a801      	add	r0, sp, #4
 800b624:	f7ff fd64 	bl	800b0f0 <__lo0bits>
 800b628:	9b01      	ldr	r3, [sp, #4]
 800b62a:	6163      	str	r3, [r4, #20]
 800b62c:	2201      	movs	r2, #1
 800b62e:	6122      	str	r2, [r4, #16]
 800b630:	3020      	adds	r0, #32
 800b632:	e7e3      	b.n	800b5fc <__d2b+0x60>
 800b634:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b638:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b63c:	f8c9 0000 	str.w	r0, [r9]
 800b640:	6918      	ldr	r0, [r3, #16]
 800b642:	f7ff fd35 	bl	800b0b0 <__hi0bits>
 800b646:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b64a:	e7df      	b.n	800b60c <__d2b+0x70>
 800b64c:	0800d417 	.word	0x0800d417
 800b650:	0800d3b7 	.word	0x0800d3b7

0800b654 <_mprec_log10>:
 800b654:	2817      	cmp	r0, #23
 800b656:	dc05      	bgt.n	800b664 <_mprec_log10+0x10>
 800b658:	4b07      	ldr	r3, [pc, #28]	; (800b678 <_mprec_log10+0x24>)
 800b65a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800b65e:	ed90 0b00 	vldr	d0, [r0]
 800b662:	4770      	bx	lr
 800b664:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b668:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 800b66c:	3801      	subs	r0, #1
 800b66e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b672:	d1fb      	bne.n	800b66c <_mprec_log10+0x18>
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	0800d450 	.word	0x0800d450

0800b67c <_calloc_r>:
 800b67c:	b513      	push	{r0, r1, r4, lr}
 800b67e:	434a      	muls	r2, r1
 800b680:	4611      	mov	r1, r2
 800b682:	9201      	str	r2, [sp, #4]
 800b684:	f000 f80a 	bl	800b69c <_malloc_r>
 800b688:	4604      	mov	r4, r0
 800b68a:	b118      	cbz	r0, 800b694 <_calloc_r+0x18>
 800b68c:	9a01      	ldr	r2, [sp, #4]
 800b68e:	2100      	movs	r1, #0
 800b690:	f7ff fb2c 	bl	800acec <memset>
 800b694:	4620      	mov	r0, r4
 800b696:	b002      	add	sp, #8
 800b698:	bd10      	pop	{r4, pc}
	...

0800b69c <_malloc_r>:
 800b69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69e:	1ccd      	adds	r5, r1, #3
 800b6a0:	f025 0503 	bic.w	r5, r5, #3
 800b6a4:	3508      	adds	r5, #8
 800b6a6:	2d0c      	cmp	r5, #12
 800b6a8:	bf38      	it	cc
 800b6aa:	250c      	movcc	r5, #12
 800b6ac:	2d00      	cmp	r5, #0
 800b6ae:	4606      	mov	r6, r0
 800b6b0:	db01      	blt.n	800b6b6 <_malloc_r+0x1a>
 800b6b2:	42a9      	cmp	r1, r5
 800b6b4:	d903      	bls.n	800b6be <_malloc_r+0x22>
 800b6b6:	230c      	movs	r3, #12
 800b6b8:	6033      	str	r3, [r6, #0]
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6be:	f000 feb5 	bl	800c42c <__malloc_lock>
 800b6c2:	4921      	ldr	r1, [pc, #132]	; (800b748 <_malloc_r+0xac>)
 800b6c4:	680a      	ldr	r2, [r1, #0]
 800b6c6:	4614      	mov	r4, r2
 800b6c8:	b99c      	cbnz	r4, 800b6f2 <_malloc_r+0x56>
 800b6ca:	4f20      	ldr	r7, [pc, #128]	; (800b74c <_malloc_r+0xb0>)
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	b923      	cbnz	r3, 800b6da <_malloc_r+0x3e>
 800b6d0:	4621      	mov	r1, r4
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	f000 f83c 	bl	800b750 <_sbrk_r>
 800b6d8:	6038      	str	r0, [r7, #0]
 800b6da:	4629      	mov	r1, r5
 800b6dc:	4630      	mov	r0, r6
 800b6de:	f000 f837 	bl	800b750 <_sbrk_r>
 800b6e2:	1c43      	adds	r3, r0, #1
 800b6e4:	d123      	bne.n	800b72e <_malloc_r+0x92>
 800b6e6:	230c      	movs	r3, #12
 800b6e8:	6033      	str	r3, [r6, #0]
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	f000 fea4 	bl	800c438 <__malloc_unlock>
 800b6f0:	e7e3      	b.n	800b6ba <_malloc_r+0x1e>
 800b6f2:	6823      	ldr	r3, [r4, #0]
 800b6f4:	1b5b      	subs	r3, r3, r5
 800b6f6:	d417      	bmi.n	800b728 <_malloc_r+0x8c>
 800b6f8:	2b0b      	cmp	r3, #11
 800b6fa:	d903      	bls.n	800b704 <_malloc_r+0x68>
 800b6fc:	6023      	str	r3, [r4, #0]
 800b6fe:	441c      	add	r4, r3
 800b700:	6025      	str	r5, [r4, #0]
 800b702:	e004      	b.n	800b70e <_malloc_r+0x72>
 800b704:	6863      	ldr	r3, [r4, #4]
 800b706:	42a2      	cmp	r2, r4
 800b708:	bf0c      	ite	eq
 800b70a:	600b      	streq	r3, [r1, #0]
 800b70c:	6053      	strne	r3, [r2, #4]
 800b70e:	4630      	mov	r0, r6
 800b710:	f000 fe92 	bl	800c438 <__malloc_unlock>
 800b714:	f104 000b 	add.w	r0, r4, #11
 800b718:	1d23      	adds	r3, r4, #4
 800b71a:	f020 0007 	bic.w	r0, r0, #7
 800b71e:	1ac2      	subs	r2, r0, r3
 800b720:	d0cc      	beq.n	800b6bc <_malloc_r+0x20>
 800b722:	1a1b      	subs	r3, r3, r0
 800b724:	50a3      	str	r3, [r4, r2]
 800b726:	e7c9      	b.n	800b6bc <_malloc_r+0x20>
 800b728:	4622      	mov	r2, r4
 800b72a:	6864      	ldr	r4, [r4, #4]
 800b72c:	e7cc      	b.n	800b6c8 <_malloc_r+0x2c>
 800b72e:	1cc4      	adds	r4, r0, #3
 800b730:	f024 0403 	bic.w	r4, r4, #3
 800b734:	42a0      	cmp	r0, r4
 800b736:	d0e3      	beq.n	800b700 <_malloc_r+0x64>
 800b738:	1a21      	subs	r1, r4, r0
 800b73a:	4630      	mov	r0, r6
 800b73c:	f000 f808 	bl	800b750 <_sbrk_r>
 800b740:	3001      	adds	r0, #1
 800b742:	d1dd      	bne.n	800b700 <_malloc_r+0x64>
 800b744:	e7cf      	b.n	800b6e6 <_malloc_r+0x4a>
 800b746:	bf00      	nop
 800b748:	240011a4 	.word	0x240011a4
 800b74c:	240011a8 	.word	0x240011a8

0800b750 <_sbrk_r>:
 800b750:	b538      	push	{r3, r4, r5, lr}
 800b752:	4d06      	ldr	r5, [pc, #24]	; (800b76c <_sbrk_r+0x1c>)
 800b754:	2300      	movs	r3, #0
 800b756:	4604      	mov	r4, r0
 800b758:	4608      	mov	r0, r1
 800b75a:	602b      	str	r3, [r5, #0]
 800b75c:	f7f5 fc86 	bl	800106c <_sbrk>
 800b760:	1c43      	adds	r3, r0, #1
 800b762:	d102      	bne.n	800b76a <_sbrk_r+0x1a>
 800b764:	682b      	ldr	r3, [r5, #0]
 800b766:	b103      	cbz	r3, 800b76a <_sbrk_r+0x1a>
 800b768:	6023      	str	r3, [r4, #0]
 800b76a:	bd38      	pop	{r3, r4, r5, pc}
 800b76c:	240016f8 	.word	0x240016f8

0800b770 <strcpy>:
 800b770:	4603      	mov	r3, r0
 800b772:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b776:	f803 2b01 	strb.w	r2, [r3], #1
 800b77a:	2a00      	cmp	r2, #0
 800b77c:	d1f9      	bne.n	800b772 <strcpy+0x2>
 800b77e:	4770      	bx	lr

0800b780 <__assert_func>:
 800b780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b782:	4614      	mov	r4, r2
 800b784:	461a      	mov	r2, r3
 800b786:	4b09      	ldr	r3, [pc, #36]	; (800b7ac <__assert_func+0x2c>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4605      	mov	r5, r0
 800b78c:	68d8      	ldr	r0, [r3, #12]
 800b78e:	b14c      	cbz	r4, 800b7a4 <__assert_func+0x24>
 800b790:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <__assert_func+0x30>)
 800b792:	9100      	str	r1, [sp, #0]
 800b794:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b798:	4906      	ldr	r1, [pc, #24]	; (800b7b4 <__assert_func+0x34>)
 800b79a:	462b      	mov	r3, r5
 800b79c:	f000 fe1e 	bl	800c3dc <fiprintf>
 800b7a0:	f001 fa4e 	bl	800cc40 <abort>
 800b7a4:	4b04      	ldr	r3, [pc, #16]	; (800b7b8 <__assert_func+0x38>)
 800b7a6:	461c      	mov	r4, r3
 800b7a8:	e7f3      	b.n	800b792 <__assert_func+0x12>
 800b7aa:	bf00      	nop
 800b7ac:	240010a4 	.word	0x240010a4
 800b7b0:	0800d524 	.word	0x0800d524
 800b7b4:	0800d531 	.word	0x0800d531
 800b7b8:	0800d55f 	.word	0x0800d55f

0800b7bc <quorem>:
 800b7bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c0:	6903      	ldr	r3, [r0, #16]
 800b7c2:	690c      	ldr	r4, [r1, #16]
 800b7c4:	42a3      	cmp	r3, r4
 800b7c6:	4607      	mov	r7, r0
 800b7c8:	f2c0 8081 	blt.w	800b8ce <quorem+0x112>
 800b7cc:	3c01      	subs	r4, #1
 800b7ce:	f101 0814 	add.w	r8, r1, #20
 800b7d2:	f100 0514 	add.w	r5, r0, #20
 800b7d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7da:	9301      	str	r3, [sp, #4]
 800b7dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b7ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7f0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7f4:	d331      	bcc.n	800b85a <quorem+0x9e>
 800b7f6:	f04f 0e00 	mov.w	lr, #0
 800b7fa:	4640      	mov	r0, r8
 800b7fc:	46ac      	mov	ip, r5
 800b7fe:	46f2      	mov	sl, lr
 800b800:	f850 2b04 	ldr.w	r2, [r0], #4
 800b804:	b293      	uxth	r3, r2
 800b806:	fb06 e303 	mla	r3, r6, r3, lr
 800b80a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b80e:	b29b      	uxth	r3, r3
 800b810:	ebaa 0303 	sub.w	r3, sl, r3
 800b814:	0c12      	lsrs	r2, r2, #16
 800b816:	f8dc a000 	ldr.w	sl, [ip]
 800b81a:	fb06 e202 	mla	r2, r6, r2, lr
 800b81e:	fa13 f38a 	uxtah	r3, r3, sl
 800b822:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b826:	fa1f fa82 	uxth.w	sl, r2
 800b82a:	f8dc 2000 	ldr.w	r2, [ip]
 800b82e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b832:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b836:	b29b      	uxth	r3, r3
 800b838:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b83c:	4581      	cmp	r9, r0
 800b83e:	f84c 3b04 	str.w	r3, [ip], #4
 800b842:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b846:	d2db      	bcs.n	800b800 <quorem+0x44>
 800b848:	f855 300b 	ldr.w	r3, [r5, fp]
 800b84c:	b92b      	cbnz	r3, 800b85a <quorem+0x9e>
 800b84e:	9b01      	ldr	r3, [sp, #4]
 800b850:	3b04      	subs	r3, #4
 800b852:	429d      	cmp	r5, r3
 800b854:	461a      	mov	r2, r3
 800b856:	d32e      	bcc.n	800b8b6 <quorem+0xfa>
 800b858:	613c      	str	r4, [r7, #16]
 800b85a:	4638      	mov	r0, r7
 800b85c:	f7ff fdfa 	bl	800b454 <__mcmp>
 800b860:	2800      	cmp	r0, #0
 800b862:	db24      	blt.n	800b8ae <quorem+0xf2>
 800b864:	3601      	adds	r6, #1
 800b866:	4628      	mov	r0, r5
 800b868:	f04f 0c00 	mov.w	ip, #0
 800b86c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b870:	f8d0 e000 	ldr.w	lr, [r0]
 800b874:	b293      	uxth	r3, r2
 800b876:	ebac 0303 	sub.w	r3, ip, r3
 800b87a:	0c12      	lsrs	r2, r2, #16
 800b87c:	fa13 f38e 	uxtah	r3, r3, lr
 800b880:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b884:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b888:	b29b      	uxth	r3, r3
 800b88a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b88e:	45c1      	cmp	r9, r8
 800b890:	f840 3b04 	str.w	r3, [r0], #4
 800b894:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b898:	d2e8      	bcs.n	800b86c <quorem+0xb0>
 800b89a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b89e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8a2:	b922      	cbnz	r2, 800b8ae <quorem+0xf2>
 800b8a4:	3b04      	subs	r3, #4
 800b8a6:	429d      	cmp	r5, r3
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	d30a      	bcc.n	800b8c2 <quorem+0x106>
 800b8ac:	613c      	str	r4, [r7, #16]
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	b003      	add	sp, #12
 800b8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b6:	6812      	ldr	r2, [r2, #0]
 800b8b8:	3b04      	subs	r3, #4
 800b8ba:	2a00      	cmp	r2, #0
 800b8bc:	d1cc      	bne.n	800b858 <quorem+0x9c>
 800b8be:	3c01      	subs	r4, #1
 800b8c0:	e7c7      	b.n	800b852 <quorem+0x96>
 800b8c2:	6812      	ldr	r2, [r2, #0]
 800b8c4:	3b04      	subs	r3, #4
 800b8c6:	2a00      	cmp	r2, #0
 800b8c8:	d1f0      	bne.n	800b8ac <quorem+0xf0>
 800b8ca:	3c01      	subs	r4, #1
 800b8cc:	e7eb      	b.n	800b8a6 <quorem+0xea>
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	e7ee      	b.n	800b8b0 <quorem+0xf4>
 800b8d2:	0000      	movs	r0, r0
 800b8d4:	0000      	movs	r0, r0
	...

0800b8d8 <_dtoa_r>:
 800b8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8dc:	ec59 8b10 	vmov	r8, r9, d0
 800b8e0:	b095      	sub	sp, #84	; 0x54
 800b8e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b8e4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800b8e6:	9107      	str	r1, [sp, #28]
 800b8e8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b8ec:	4606      	mov	r6, r0
 800b8ee:	9209      	str	r2, [sp, #36]	; 0x24
 800b8f0:	9310      	str	r3, [sp, #64]	; 0x40
 800b8f2:	b975      	cbnz	r5, 800b912 <_dtoa_r+0x3a>
 800b8f4:	2010      	movs	r0, #16
 800b8f6:	f000 fd83 	bl	800c400 <malloc>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	6270      	str	r0, [r6, #36]	; 0x24
 800b8fe:	b920      	cbnz	r0, 800b90a <_dtoa_r+0x32>
 800b900:	4bab      	ldr	r3, [pc, #684]	; (800bbb0 <_dtoa_r+0x2d8>)
 800b902:	21ea      	movs	r1, #234	; 0xea
 800b904:	48ab      	ldr	r0, [pc, #684]	; (800bbb4 <_dtoa_r+0x2dc>)
 800b906:	f7ff ff3b 	bl	800b780 <__assert_func>
 800b90a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b90e:	6005      	str	r5, [r0, #0]
 800b910:	60c5      	str	r5, [r0, #12]
 800b912:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b914:	6819      	ldr	r1, [r3, #0]
 800b916:	b151      	cbz	r1, 800b92e <_dtoa_r+0x56>
 800b918:	685a      	ldr	r2, [r3, #4]
 800b91a:	604a      	str	r2, [r1, #4]
 800b91c:	2301      	movs	r3, #1
 800b91e:	4093      	lsls	r3, r2
 800b920:	608b      	str	r3, [r1, #8]
 800b922:	4630      	mov	r0, r6
 800b924:	f7ff fb58 	bl	800afd8 <_Bfree>
 800b928:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b92a:	2200      	movs	r2, #0
 800b92c:	601a      	str	r2, [r3, #0]
 800b92e:	f1b9 0300 	subs.w	r3, r9, #0
 800b932:	bfbb      	ittet	lt
 800b934:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b938:	9303      	strlt	r3, [sp, #12]
 800b93a:	2300      	movge	r3, #0
 800b93c:	2201      	movlt	r2, #1
 800b93e:	bfac      	ite	ge
 800b940:	6023      	strge	r3, [r4, #0]
 800b942:	6022      	strlt	r2, [r4, #0]
 800b944:	4b9c      	ldr	r3, [pc, #624]	; (800bbb8 <_dtoa_r+0x2e0>)
 800b946:	9c03      	ldr	r4, [sp, #12]
 800b948:	43a3      	bics	r3, r4
 800b94a:	d11a      	bne.n	800b982 <_dtoa_r+0xaa>
 800b94c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b94e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b952:	6013      	str	r3, [r2, #0]
 800b954:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b958:	ea53 0308 	orrs.w	r3, r3, r8
 800b95c:	f000 8512 	beq.w	800c384 <_dtoa_r+0xaac>
 800b960:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b962:	b953      	cbnz	r3, 800b97a <_dtoa_r+0xa2>
 800b964:	4b95      	ldr	r3, [pc, #596]	; (800bbbc <_dtoa_r+0x2e4>)
 800b966:	e01f      	b.n	800b9a8 <_dtoa_r+0xd0>
 800b968:	4b95      	ldr	r3, [pc, #596]	; (800bbc0 <_dtoa_r+0x2e8>)
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	3308      	adds	r3, #8
 800b96e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b970:	6013      	str	r3, [r2, #0]
 800b972:	9800      	ldr	r0, [sp, #0]
 800b974:	b015      	add	sp, #84	; 0x54
 800b976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b97a:	4b90      	ldr	r3, [pc, #576]	; (800bbbc <_dtoa_r+0x2e4>)
 800b97c:	9300      	str	r3, [sp, #0]
 800b97e:	3303      	adds	r3, #3
 800b980:	e7f5      	b.n	800b96e <_dtoa_r+0x96>
 800b982:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b986:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b98e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b992:	d10b      	bne.n	800b9ac <_dtoa_r+0xd4>
 800b994:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b996:	2301      	movs	r3, #1
 800b998:	6013      	str	r3, [r2, #0]
 800b99a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	f000 84ee 	beq.w	800c37e <_dtoa_r+0xaa6>
 800b9a2:	4888      	ldr	r0, [pc, #544]	; (800bbc4 <_dtoa_r+0x2ec>)
 800b9a4:	6018      	str	r0, [r3, #0]
 800b9a6:	1e43      	subs	r3, r0, #1
 800b9a8:	9300      	str	r3, [sp, #0]
 800b9aa:	e7e2      	b.n	800b972 <_dtoa_r+0x9a>
 800b9ac:	a913      	add	r1, sp, #76	; 0x4c
 800b9ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b9b2:	aa12      	add	r2, sp, #72	; 0x48
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	f7ff fdf1 	bl	800b59c <__d2b>
 800b9ba:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800b9be:	4605      	mov	r5, r0
 800b9c0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b9c2:	2900      	cmp	r1, #0
 800b9c4:	d047      	beq.n	800ba56 <_dtoa_r+0x17e>
 800b9c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b9c8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b9cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b9d0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800b9d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b9d8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b9dc:	2400      	movs	r4, #0
 800b9de:	ec43 2b16 	vmov	d6, r2, r3
 800b9e2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b9e6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800bb98 <_dtoa_r+0x2c0>
 800b9ea:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b9ee:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800bba0 <_dtoa_r+0x2c8>
 800b9f2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b9f6:	eeb0 7b46 	vmov.f64	d7, d6
 800b9fa:	ee06 1a90 	vmov	s13, r1
 800b9fe:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800ba02:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800bba8 <_dtoa_r+0x2d0>
 800ba06:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ba0a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ba0e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ba12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba16:	ee16 ba90 	vmov	fp, s13
 800ba1a:	9411      	str	r4, [sp, #68]	; 0x44
 800ba1c:	d508      	bpl.n	800ba30 <_dtoa_r+0x158>
 800ba1e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ba22:	eeb4 6b47 	vcmp.f64	d6, d7
 800ba26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba2a:	bf18      	it	ne
 800ba2c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800ba30:	f1bb 0f16 	cmp.w	fp, #22
 800ba34:	d832      	bhi.n	800ba9c <_dtoa_r+0x1c4>
 800ba36:	4b64      	ldr	r3, [pc, #400]	; (800bbc8 <_dtoa_r+0x2f0>)
 800ba38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ba3c:	ed93 7b00 	vldr	d7, [r3]
 800ba40:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800ba44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ba48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4c:	d501      	bpl.n	800ba52 <_dtoa_r+0x17a>
 800ba4e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ba52:	2300      	movs	r3, #0
 800ba54:	e023      	b.n	800ba9e <_dtoa_r+0x1c6>
 800ba56:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ba58:	4401      	add	r1, r0
 800ba5a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800ba5e:	2b20      	cmp	r3, #32
 800ba60:	bfc3      	ittte	gt
 800ba62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba66:	fa04 f303 	lslgt.w	r3, r4, r3
 800ba6a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800ba6e:	f1c3 0320 	rsble	r3, r3, #32
 800ba72:	bfc6      	itte	gt
 800ba74:	fa28 f804 	lsrgt.w	r8, r8, r4
 800ba78:	ea43 0308 	orrgt.w	r3, r3, r8
 800ba7c:	fa08 f303 	lslle.w	r3, r8, r3
 800ba80:	ee07 3a90 	vmov	s15, r3
 800ba84:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ba88:	3901      	subs	r1, #1
 800ba8a:	ed8d 7b00 	vstr	d7, [sp]
 800ba8e:	9c01      	ldr	r4, [sp, #4]
 800ba90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba94:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800ba98:	2401      	movs	r4, #1
 800ba9a:	e7a0      	b.n	800b9de <_dtoa_r+0x106>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800baa0:	1a43      	subs	r3, r0, r1
 800baa2:	1e5a      	subs	r2, r3, #1
 800baa4:	bf45      	ittet	mi
 800baa6:	f1c3 0301 	rsbmi	r3, r3, #1
 800baaa:	9305      	strmi	r3, [sp, #20]
 800baac:	2300      	movpl	r3, #0
 800baae:	2300      	movmi	r3, #0
 800bab0:	9206      	str	r2, [sp, #24]
 800bab2:	bf54      	ite	pl
 800bab4:	9305      	strpl	r3, [sp, #20]
 800bab6:	9306      	strmi	r3, [sp, #24]
 800bab8:	f1bb 0f00 	cmp.w	fp, #0
 800babc:	db18      	blt.n	800baf0 <_dtoa_r+0x218>
 800babe:	9b06      	ldr	r3, [sp, #24]
 800bac0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800bac4:	445b      	add	r3, fp
 800bac6:	9306      	str	r3, [sp, #24]
 800bac8:	2300      	movs	r3, #0
 800baca:	9a07      	ldr	r2, [sp, #28]
 800bacc:	2a09      	cmp	r2, #9
 800bace:	d849      	bhi.n	800bb64 <_dtoa_r+0x28c>
 800bad0:	2a05      	cmp	r2, #5
 800bad2:	bfc4      	itt	gt
 800bad4:	3a04      	subgt	r2, #4
 800bad6:	9207      	strgt	r2, [sp, #28]
 800bad8:	9a07      	ldr	r2, [sp, #28]
 800bada:	f1a2 0202 	sub.w	r2, r2, #2
 800bade:	bfcc      	ite	gt
 800bae0:	2400      	movgt	r4, #0
 800bae2:	2401      	movle	r4, #1
 800bae4:	2a03      	cmp	r2, #3
 800bae6:	d848      	bhi.n	800bb7a <_dtoa_r+0x2a2>
 800bae8:	e8df f002 	tbb	[pc, r2]
 800baec:	3a2c2e0b 	.word	0x3a2c2e0b
 800baf0:	9b05      	ldr	r3, [sp, #20]
 800baf2:	2200      	movs	r2, #0
 800baf4:	eba3 030b 	sub.w	r3, r3, fp
 800baf8:	9305      	str	r3, [sp, #20]
 800bafa:	920e      	str	r2, [sp, #56]	; 0x38
 800bafc:	f1cb 0300 	rsb	r3, fp, #0
 800bb00:	e7e3      	b.n	800baca <_dtoa_r+0x1f2>
 800bb02:	2200      	movs	r2, #0
 800bb04:	9208      	str	r2, [sp, #32]
 800bb06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb08:	2a00      	cmp	r2, #0
 800bb0a:	dc39      	bgt.n	800bb80 <_dtoa_r+0x2a8>
 800bb0c:	f04f 0a01 	mov.w	sl, #1
 800bb10:	46d1      	mov	r9, sl
 800bb12:	4652      	mov	r2, sl
 800bb14:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bb18:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	6079      	str	r1, [r7, #4]
 800bb1e:	2004      	movs	r0, #4
 800bb20:	f100 0c14 	add.w	ip, r0, #20
 800bb24:	4594      	cmp	ip, r2
 800bb26:	6879      	ldr	r1, [r7, #4]
 800bb28:	d92f      	bls.n	800bb8a <_dtoa_r+0x2b2>
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	930c      	str	r3, [sp, #48]	; 0x30
 800bb2e:	f7ff fa13 	bl	800af58 <_Balloc>
 800bb32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb34:	9000      	str	r0, [sp, #0]
 800bb36:	4602      	mov	r2, r0
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	d149      	bne.n	800bbd0 <_dtoa_r+0x2f8>
 800bb3c:	4b23      	ldr	r3, [pc, #140]	; (800bbcc <_dtoa_r+0x2f4>)
 800bb3e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bb42:	e6df      	b.n	800b904 <_dtoa_r+0x2c>
 800bb44:	2201      	movs	r2, #1
 800bb46:	e7dd      	b.n	800bb04 <_dtoa_r+0x22c>
 800bb48:	2200      	movs	r2, #0
 800bb4a:	9208      	str	r2, [sp, #32]
 800bb4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb4e:	eb0b 0a02 	add.w	sl, fp, r2
 800bb52:	f10a 0901 	add.w	r9, sl, #1
 800bb56:	464a      	mov	r2, r9
 800bb58:	2a01      	cmp	r2, #1
 800bb5a:	bfb8      	it	lt
 800bb5c:	2201      	movlt	r2, #1
 800bb5e:	e7db      	b.n	800bb18 <_dtoa_r+0x240>
 800bb60:	2201      	movs	r2, #1
 800bb62:	e7f2      	b.n	800bb4a <_dtoa_r+0x272>
 800bb64:	2401      	movs	r4, #1
 800bb66:	2200      	movs	r2, #0
 800bb68:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800bb6c:	f04f 3aff 	mov.w	sl, #4294967295
 800bb70:	2100      	movs	r1, #0
 800bb72:	46d1      	mov	r9, sl
 800bb74:	2212      	movs	r2, #18
 800bb76:	9109      	str	r1, [sp, #36]	; 0x24
 800bb78:	e7ce      	b.n	800bb18 <_dtoa_r+0x240>
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	9208      	str	r2, [sp, #32]
 800bb7e:	e7f5      	b.n	800bb6c <_dtoa_r+0x294>
 800bb80:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800bb84:	46d1      	mov	r9, sl
 800bb86:	4652      	mov	r2, sl
 800bb88:	e7c6      	b.n	800bb18 <_dtoa_r+0x240>
 800bb8a:	3101      	adds	r1, #1
 800bb8c:	6079      	str	r1, [r7, #4]
 800bb8e:	0040      	lsls	r0, r0, #1
 800bb90:	e7c6      	b.n	800bb20 <_dtoa_r+0x248>
 800bb92:	bf00      	nop
 800bb94:	f3af 8000 	nop.w
 800bb98:	636f4361 	.word	0x636f4361
 800bb9c:	3fd287a7 	.word	0x3fd287a7
 800bba0:	8b60c8b3 	.word	0x8b60c8b3
 800bba4:	3fc68a28 	.word	0x3fc68a28
 800bba8:	509f79fb 	.word	0x509f79fb
 800bbac:	3fd34413 	.word	0x3fd34413
 800bbb0:	0800d3a0 	.word	0x0800d3a0
 800bbb4:	0800d56f 	.word	0x0800d56f
 800bbb8:	7ff00000 	.word	0x7ff00000
 800bbbc:	0800d569 	.word	0x0800d569
 800bbc0:	0800d560 	.word	0x0800d560
 800bbc4:	0800d56e 	.word	0x0800d56e
 800bbc8:	0800d450 	.word	0x0800d450
 800bbcc:	0800d417 	.word	0x0800d417
 800bbd0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800bbd2:	9900      	ldr	r1, [sp, #0]
 800bbd4:	6011      	str	r1, [r2, #0]
 800bbd6:	f1b9 0f0e 	cmp.w	r9, #14
 800bbda:	d872      	bhi.n	800bcc2 <_dtoa_r+0x3ea>
 800bbdc:	2c00      	cmp	r4, #0
 800bbde:	d070      	beq.n	800bcc2 <_dtoa_r+0x3ea>
 800bbe0:	f1bb 0f00 	cmp.w	fp, #0
 800bbe4:	f340 80a6 	ble.w	800bd34 <_dtoa_r+0x45c>
 800bbe8:	49ca      	ldr	r1, [pc, #808]	; (800bf14 <_dtoa_r+0x63c>)
 800bbea:	f00b 020f 	and.w	r2, fp, #15
 800bbee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800bbf2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bbf6:	ed92 7b00 	vldr	d7, [r2]
 800bbfa:	ea4f 112b 	mov.w	r1, fp, asr #4
 800bbfe:	f000 808d 	beq.w	800bd1c <_dtoa_r+0x444>
 800bc02:	4ac5      	ldr	r2, [pc, #788]	; (800bf18 <_dtoa_r+0x640>)
 800bc04:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800bc08:	ed92 6b08 	vldr	d6, [r2, #32]
 800bc0c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800bc10:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bc14:	f001 010f 	and.w	r1, r1, #15
 800bc18:	2203      	movs	r2, #3
 800bc1a:	48bf      	ldr	r0, [pc, #764]	; (800bf18 <_dtoa_r+0x640>)
 800bc1c:	2900      	cmp	r1, #0
 800bc1e:	d17f      	bne.n	800bd20 <_dtoa_r+0x448>
 800bc20:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bc24:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bc28:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bc2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bc2e:	2900      	cmp	r1, #0
 800bc30:	f000 80b2 	beq.w	800bd98 <_dtoa_r+0x4c0>
 800bc34:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bc38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bc40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc44:	f140 80a8 	bpl.w	800bd98 <_dtoa_r+0x4c0>
 800bc48:	f1b9 0f00 	cmp.w	r9, #0
 800bc4c:	f000 80a4 	beq.w	800bd98 <_dtoa_r+0x4c0>
 800bc50:	f1ba 0f00 	cmp.w	sl, #0
 800bc54:	dd31      	ble.n	800bcba <_dtoa_r+0x3e2>
 800bc56:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800bc5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bc5e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bc62:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bc66:	3201      	adds	r2, #1
 800bc68:	4650      	mov	r0, sl
 800bc6a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bc6e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800bc72:	ee07 2a90 	vmov	s15, r2
 800bc76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bc7a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bc7e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800bc82:	9c03      	ldr	r4, [sp, #12]
 800bc84:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800bc88:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	f040 8086 	bne.w	800bd9e <_dtoa_r+0x4c6>
 800bc92:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bc96:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bc9a:	ec42 1b17 	vmov	d7, r1, r2
 800bc9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bca6:	f300 8272 	bgt.w	800c18e <_dtoa_r+0x8b6>
 800bcaa:	eeb1 7b47 	vneg.f64	d7, d7
 800bcae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bcb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcb6:	f100 8267 	bmi.w	800c188 <_dtoa_r+0x8b0>
 800bcba:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800bcbe:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bcc2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bcc4:	2a00      	cmp	r2, #0
 800bcc6:	f2c0 8129 	blt.w	800bf1c <_dtoa_r+0x644>
 800bcca:	f1bb 0f0e 	cmp.w	fp, #14
 800bcce:	f300 8125 	bgt.w	800bf1c <_dtoa_r+0x644>
 800bcd2:	4b90      	ldr	r3, [pc, #576]	; (800bf14 <_dtoa_r+0x63c>)
 800bcd4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bcd8:	ed93 6b00 	vldr	d6, [r3]
 800bcdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	f280 80c3 	bge.w	800be6a <_dtoa_r+0x592>
 800bce4:	f1b9 0f00 	cmp.w	r9, #0
 800bce8:	f300 80bf 	bgt.w	800be6a <_dtoa_r+0x592>
 800bcec:	f040 824c 	bne.w	800c188 <_dtoa_r+0x8b0>
 800bcf0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bcf4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bcf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bcfc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd04:	464c      	mov	r4, r9
 800bd06:	464f      	mov	r7, r9
 800bd08:	f280 8222 	bge.w	800c150 <_dtoa_r+0x878>
 800bd0c:	f8dd 8000 	ldr.w	r8, [sp]
 800bd10:	2331      	movs	r3, #49	; 0x31
 800bd12:	f808 3b01 	strb.w	r3, [r8], #1
 800bd16:	f10b 0b01 	add.w	fp, fp, #1
 800bd1a:	e21e      	b.n	800c15a <_dtoa_r+0x882>
 800bd1c:	2202      	movs	r2, #2
 800bd1e:	e77c      	b.n	800bc1a <_dtoa_r+0x342>
 800bd20:	07cc      	lsls	r4, r1, #31
 800bd22:	d504      	bpl.n	800bd2e <_dtoa_r+0x456>
 800bd24:	ed90 6b00 	vldr	d6, [r0]
 800bd28:	3201      	adds	r2, #1
 800bd2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bd2e:	1049      	asrs	r1, r1, #1
 800bd30:	3008      	adds	r0, #8
 800bd32:	e773      	b.n	800bc1c <_dtoa_r+0x344>
 800bd34:	d02e      	beq.n	800bd94 <_dtoa_r+0x4bc>
 800bd36:	f1cb 0100 	rsb	r1, fp, #0
 800bd3a:	4a76      	ldr	r2, [pc, #472]	; (800bf14 <_dtoa_r+0x63c>)
 800bd3c:	f001 000f 	and.w	r0, r1, #15
 800bd40:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bd44:	ed92 7b00 	vldr	d7, [r2]
 800bd48:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800bd4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bd50:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800bd54:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800bd58:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800bd5c:	486e      	ldr	r0, [pc, #440]	; (800bf18 <_dtoa_r+0x640>)
 800bd5e:	1109      	asrs	r1, r1, #4
 800bd60:	2400      	movs	r4, #0
 800bd62:	2202      	movs	r2, #2
 800bd64:	b939      	cbnz	r1, 800bd76 <_dtoa_r+0x49e>
 800bd66:	2c00      	cmp	r4, #0
 800bd68:	f43f af60 	beq.w	800bc2c <_dtoa_r+0x354>
 800bd6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd74:	e75a      	b.n	800bc2c <_dtoa_r+0x354>
 800bd76:	07cf      	lsls	r7, r1, #31
 800bd78:	d509      	bpl.n	800bd8e <_dtoa_r+0x4b6>
 800bd7a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800bd7e:	ed90 7b00 	vldr	d7, [r0]
 800bd82:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bd86:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800bd8a:	3201      	adds	r2, #1
 800bd8c:	2401      	movs	r4, #1
 800bd8e:	1049      	asrs	r1, r1, #1
 800bd90:	3008      	adds	r0, #8
 800bd92:	e7e7      	b.n	800bd64 <_dtoa_r+0x48c>
 800bd94:	2202      	movs	r2, #2
 800bd96:	e749      	b.n	800bc2c <_dtoa_r+0x354>
 800bd98:	465f      	mov	r7, fp
 800bd9a:	4648      	mov	r0, r9
 800bd9c:	e765      	b.n	800bc6a <_dtoa_r+0x392>
 800bd9e:	ec42 1b17 	vmov	d7, r1, r2
 800bda2:	4a5c      	ldr	r2, [pc, #368]	; (800bf14 <_dtoa_r+0x63c>)
 800bda4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bda8:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bdac:	9a00      	ldr	r2, [sp, #0]
 800bdae:	1814      	adds	r4, r2, r0
 800bdb0:	9a08      	ldr	r2, [sp, #32]
 800bdb2:	b352      	cbz	r2, 800be0a <_dtoa_r+0x532>
 800bdb4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800bdb8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800bdbc:	f8dd 8000 	ldr.w	r8, [sp]
 800bdc0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bdc4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bdc8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bdcc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bdd0:	ee14 2a90 	vmov	r2, s9
 800bdd4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bdd8:	3230      	adds	r2, #48	; 0x30
 800bdda:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bdde:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bde2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bde6:	f808 2b01 	strb.w	r2, [r8], #1
 800bdea:	d439      	bmi.n	800be60 <_dtoa_r+0x588>
 800bdec:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bdf0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bdf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdf8:	d472      	bmi.n	800bee0 <_dtoa_r+0x608>
 800bdfa:	45a0      	cmp	r8, r4
 800bdfc:	f43f af5d 	beq.w	800bcba <_dtoa_r+0x3e2>
 800be00:	ee27 7b03 	vmul.f64	d7, d7, d3
 800be04:	ee26 6b03 	vmul.f64	d6, d6, d3
 800be08:	e7e0      	b.n	800bdcc <_dtoa_r+0x4f4>
 800be0a:	f8dd 8000 	ldr.w	r8, [sp]
 800be0e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800be12:	4621      	mov	r1, r4
 800be14:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800be18:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800be1c:	ee14 2a90 	vmov	r2, s9
 800be20:	3230      	adds	r2, #48	; 0x30
 800be22:	f808 2b01 	strb.w	r2, [r8], #1
 800be26:	45a0      	cmp	r8, r4
 800be28:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800be2c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800be30:	d118      	bne.n	800be64 <_dtoa_r+0x58c>
 800be32:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800be36:	ee37 4b05 	vadd.f64	d4, d7, d5
 800be3a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800be3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be42:	dc4d      	bgt.n	800bee0 <_dtoa_r+0x608>
 800be44:	ee35 7b47 	vsub.f64	d7, d5, d7
 800be48:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800be4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be50:	f57f af33 	bpl.w	800bcba <_dtoa_r+0x3e2>
 800be54:	4688      	mov	r8, r1
 800be56:	3901      	subs	r1, #1
 800be58:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800be5c:	2b30      	cmp	r3, #48	; 0x30
 800be5e:	d0f9      	beq.n	800be54 <_dtoa_r+0x57c>
 800be60:	46bb      	mov	fp, r7
 800be62:	e02a      	b.n	800beba <_dtoa_r+0x5e2>
 800be64:	ee26 6b03 	vmul.f64	d6, d6, d3
 800be68:	e7d6      	b.n	800be18 <_dtoa_r+0x540>
 800be6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be6e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800be72:	f8dd 8000 	ldr.w	r8, [sp]
 800be76:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800be7a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800be7e:	ee15 3a10 	vmov	r3, s10
 800be82:	3330      	adds	r3, #48	; 0x30
 800be84:	f808 3b01 	strb.w	r3, [r8], #1
 800be88:	9b00      	ldr	r3, [sp, #0]
 800be8a:	eba8 0303 	sub.w	r3, r8, r3
 800be8e:	4599      	cmp	r9, r3
 800be90:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800be94:	eea3 7b46 	vfms.f64	d7, d3, d6
 800be98:	d133      	bne.n	800bf02 <_dtoa_r+0x62a>
 800be9a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800be9e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bea6:	dc1a      	bgt.n	800bede <_dtoa_r+0x606>
 800bea8:	eeb4 7b46 	vcmp.f64	d7, d6
 800beac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beb0:	d103      	bne.n	800beba <_dtoa_r+0x5e2>
 800beb2:	ee15 3a10 	vmov	r3, s10
 800beb6:	07d9      	lsls	r1, r3, #31
 800beb8:	d411      	bmi.n	800bede <_dtoa_r+0x606>
 800beba:	4629      	mov	r1, r5
 800bebc:	4630      	mov	r0, r6
 800bebe:	f7ff f88b 	bl	800afd8 <_Bfree>
 800bec2:	2300      	movs	r3, #0
 800bec4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bec6:	f888 3000 	strb.w	r3, [r8]
 800beca:	f10b 0301 	add.w	r3, fp, #1
 800bece:	6013      	str	r3, [r2, #0]
 800bed0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	f43f ad4d 	beq.w	800b972 <_dtoa_r+0x9a>
 800bed8:	f8c3 8000 	str.w	r8, [r3]
 800bedc:	e549      	b.n	800b972 <_dtoa_r+0x9a>
 800bede:	465f      	mov	r7, fp
 800bee0:	4643      	mov	r3, r8
 800bee2:	4698      	mov	r8, r3
 800bee4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bee8:	2a39      	cmp	r2, #57	; 0x39
 800beea:	d106      	bne.n	800befa <_dtoa_r+0x622>
 800beec:	9a00      	ldr	r2, [sp, #0]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d1f7      	bne.n	800bee2 <_dtoa_r+0x60a>
 800bef2:	9900      	ldr	r1, [sp, #0]
 800bef4:	2230      	movs	r2, #48	; 0x30
 800bef6:	3701      	adds	r7, #1
 800bef8:	700a      	strb	r2, [r1, #0]
 800befa:	781a      	ldrb	r2, [r3, #0]
 800befc:	3201      	adds	r2, #1
 800befe:	701a      	strb	r2, [r3, #0]
 800bf00:	e7ae      	b.n	800be60 <_dtoa_r+0x588>
 800bf02:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bf06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bf0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf0e:	d1b2      	bne.n	800be76 <_dtoa_r+0x59e>
 800bf10:	e7d3      	b.n	800beba <_dtoa_r+0x5e2>
 800bf12:	bf00      	nop
 800bf14:	0800d450 	.word	0x0800d450
 800bf18:	0800d428 	.word	0x0800d428
 800bf1c:	9908      	ldr	r1, [sp, #32]
 800bf1e:	2900      	cmp	r1, #0
 800bf20:	f000 80d1 	beq.w	800c0c6 <_dtoa_r+0x7ee>
 800bf24:	9907      	ldr	r1, [sp, #28]
 800bf26:	2901      	cmp	r1, #1
 800bf28:	f300 80b4 	bgt.w	800c094 <_dtoa_r+0x7bc>
 800bf2c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bf2e:	2900      	cmp	r1, #0
 800bf30:	f000 80ac 	beq.w	800c08c <_dtoa_r+0x7b4>
 800bf34:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bf38:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800bf3c:	461c      	mov	r4, r3
 800bf3e:	930a      	str	r3, [sp, #40]	; 0x28
 800bf40:	9b05      	ldr	r3, [sp, #20]
 800bf42:	4413      	add	r3, r2
 800bf44:	9305      	str	r3, [sp, #20]
 800bf46:	9b06      	ldr	r3, [sp, #24]
 800bf48:	2101      	movs	r1, #1
 800bf4a:	4413      	add	r3, r2
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	9306      	str	r3, [sp, #24]
 800bf50:	f7ff f8fe 	bl	800b150 <__i2b>
 800bf54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf56:	4607      	mov	r7, r0
 800bf58:	f1b8 0f00 	cmp.w	r8, #0
 800bf5c:	dd0d      	ble.n	800bf7a <_dtoa_r+0x6a2>
 800bf5e:	9a06      	ldr	r2, [sp, #24]
 800bf60:	2a00      	cmp	r2, #0
 800bf62:	dd0a      	ble.n	800bf7a <_dtoa_r+0x6a2>
 800bf64:	4542      	cmp	r2, r8
 800bf66:	9905      	ldr	r1, [sp, #20]
 800bf68:	bfa8      	it	ge
 800bf6a:	4642      	movge	r2, r8
 800bf6c:	1a89      	subs	r1, r1, r2
 800bf6e:	9105      	str	r1, [sp, #20]
 800bf70:	9906      	ldr	r1, [sp, #24]
 800bf72:	eba8 0802 	sub.w	r8, r8, r2
 800bf76:	1a8a      	subs	r2, r1, r2
 800bf78:	9206      	str	r2, [sp, #24]
 800bf7a:	b303      	cbz	r3, 800bfbe <_dtoa_r+0x6e6>
 800bf7c:	9a08      	ldr	r2, [sp, #32]
 800bf7e:	2a00      	cmp	r2, #0
 800bf80:	f000 80a6 	beq.w	800c0d0 <_dtoa_r+0x7f8>
 800bf84:	2c00      	cmp	r4, #0
 800bf86:	dd13      	ble.n	800bfb0 <_dtoa_r+0x6d8>
 800bf88:	4639      	mov	r1, r7
 800bf8a:	4622      	mov	r2, r4
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	930c      	str	r3, [sp, #48]	; 0x30
 800bf90:	f7ff f99a 	bl	800b2c8 <__pow5mult>
 800bf94:	462a      	mov	r2, r5
 800bf96:	4601      	mov	r1, r0
 800bf98:	4607      	mov	r7, r0
 800bf9a:	4630      	mov	r0, r6
 800bf9c:	f7ff f8ee 	bl	800b17c <__multiply>
 800bfa0:	4629      	mov	r1, r5
 800bfa2:	900a      	str	r0, [sp, #40]	; 0x28
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	f7ff f817 	bl	800afd8 <_Bfree>
 800bfaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfae:	4615      	mov	r5, r2
 800bfb0:	1b1a      	subs	r2, r3, r4
 800bfb2:	d004      	beq.n	800bfbe <_dtoa_r+0x6e6>
 800bfb4:	4629      	mov	r1, r5
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	f7ff f986 	bl	800b2c8 <__pow5mult>
 800bfbc:	4605      	mov	r5, r0
 800bfbe:	2101      	movs	r1, #1
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	f7ff f8c5 	bl	800b150 <__i2b>
 800bfc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	4604      	mov	r4, r0
 800bfcc:	f340 8082 	ble.w	800c0d4 <_dtoa_r+0x7fc>
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	4601      	mov	r1, r0
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	f7ff f977 	bl	800b2c8 <__pow5mult>
 800bfda:	9b07      	ldr	r3, [sp, #28]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	4604      	mov	r4, r0
 800bfe0:	dd7b      	ble.n	800c0da <_dtoa_r+0x802>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	930a      	str	r3, [sp, #40]	; 0x28
 800bfe6:	6922      	ldr	r2, [r4, #16]
 800bfe8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bfec:	6910      	ldr	r0, [r2, #16]
 800bfee:	f7ff f85f 	bl	800b0b0 <__hi0bits>
 800bff2:	f1c0 0020 	rsb	r0, r0, #32
 800bff6:	9b06      	ldr	r3, [sp, #24]
 800bff8:	4418      	add	r0, r3
 800bffa:	f010 001f 	ands.w	r0, r0, #31
 800bffe:	f000 808d 	beq.w	800c11c <_dtoa_r+0x844>
 800c002:	f1c0 0220 	rsb	r2, r0, #32
 800c006:	2a04      	cmp	r2, #4
 800c008:	f340 8086 	ble.w	800c118 <_dtoa_r+0x840>
 800c00c:	f1c0 001c 	rsb	r0, r0, #28
 800c010:	9b05      	ldr	r3, [sp, #20]
 800c012:	4403      	add	r3, r0
 800c014:	9305      	str	r3, [sp, #20]
 800c016:	9b06      	ldr	r3, [sp, #24]
 800c018:	4403      	add	r3, r0
 800c01a:	4480      	add	r8, r0
 800c01c:	9306      	str	r3, [sp, #24]
 800c01e:	9b05      	ldr	r3, [sp, #20]
 800c020:	2b00      	cmp	r3, #0
 800c022:	dd05      	ble.n	800c030 <_dtoa_r+0x758>
 800c024:	4629      	mov	r1, r5
 800c026:	461a      	mov	r2, r3
 800c028:	4630      	mov	r0, r6
 800c02a:	f7ff f9a7 	bl	800b37c <__lshift>
 800c02e:	4605      	mov	r5, r0
 800c030:	9b06      	ldr	r3, [sp, #24]
 800c032:	2b00      	cmp	r3, #0
 800c034:	dd05      	ble.n	800c042 <_dtoa_r+0x76a>
 800c036:	4621      	mov	r1, r4
 800c038:	461a      	mov	r2, r3
 800c03a:	4630      	mov	r0, r6
 800c03c:	f7ff f99e 	bl	800b37c <__lshift>
 800c040:	4604      	mov	r4, r0
 800c042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c044:	2b00      	cmp	r3, #0
 800c046:	d06b      	beq.n	800c120 <_dtoa_r+0x848>
 800c048:	4621      	mov	r1, r4
 800c04a:	4628      	mov	r0, r5
 800c04c:	f7ff fa02 	bl	800b454 <__mcmp>
 800c050:	2800      	cmp	r0, #0
 800c052:	da65      	bge.n	800c120 <_dtoa_r+0x848>
 800c054:	2300      	movs	r3, #0
 800c056:	4629      	mov	r1, r5
 800c058:	220a      	movs	r2, #10
 800c05a:	4630      	mov	r0, r6
 800c05c:	f7fe ffde 	bl	800b01c <__multadd>
 800c060:	9b08      	ldr	r3, [sp, #32]
 800c062:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c066:	4605      	mov	r5, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f000 8192 	beq.w	800c392 <_dtoa_r+0xaba>
 800c06e:	4639      	mov	r1, r7
 800c070:	2300      	movs	r3, #0
 800c072:	220a      	movs	r2, #10
 800c074:	4630      	mov	r0, r6
 800c076:	f7fe ffd1 	bl	800b01c <__multadd>
 800c07a:	f1ba 0f00 	cmp.w	sl, #0
 800c07e:	4607      	mov	r7, r0
 800c080:	f300 808e 	bgt.w	800c1a0 <_dtoa_r+0x8c8>
 800c084:	9b07      	ldr	r3, [sp, #28]
 800c086:	2b02      	cmp	r3, #2
 800c088:	dc51      	bgt.n	800c12e <_dtoa_r+0x856>
 800c08a:	e089      	b.n	800c1a0 <_dtoa_r+0x8c8>
 800c08c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c08e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c092:	e751      	b.n	800bf38 <_dtoa_r+0x660>
 800c094:	f109 34ff 	add.w	r4, r9, #4294967295
 800c098:	42a3      	cmp	r3, r4
 800c09a:	bfbf      	itttt	lt
 800c09c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800c09e:	1ae3      	sublt	r3, r4, r3
 800c0a0:	18d2      	addlt	r2, r2, r3
 800c0a2:	4613      	movlt	r3, r2
 800c0a4:	bfb7      	itett	lt
 800c0a6:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c0a8:	1b1c      	subge	r4, r3, r4
 800c0aa:	4623      	movlt	r3, r4
 800c0ac:	2400      	movlt	r4, #0
 800c0ae:	f1b9 0f00 	cmp.w	r9, #0
 800c0b2:	bfb5      	itete	lt
 800c0b4:	9a05      	ldrlt	r2, [sp, #20]
 800c0b6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800c0ba:	eba2 0809 	sublt.w	r8, r2, r9
 800c0be:	464a      	movge	r2, r9
 800c0c0:	bfb8      	it	lt
 800c0c2:	2200      	movlt	r2, #0
 800c0c4:	e73b      	b.n	800bf3e <_dtoa_r+0x666>
 800c0c6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c0ca:	9f08      	ldr	r7, [sp, #32]
 800c0cc:	461c      	mov	r4, r3
 800c0ce:	e743      	b.n	800bf58 <_dtoa_r+0x680>
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	e76f      	b.n	800bfb4 <_dtoa_r+0x6dc>
 800c0d4:	9b07      	ldr	r3, [sp, #28]
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	dc18      	bgt.n	800c10c <_dtoa_r+0x834>
 800c0da:	9b02      	ldr	r3, [sp, #8]
 800c0dc:	b9b3      	cbnz	r3, 800c10c <_dtoa_r+0x834>
 800c0de:	9b03      	ldr	r3, [sp, #12]
 800c0e0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c0e4:	b9a2      	cbnz	r2, 800c110 <_dtoa_r+0x838>
 800c0e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c0ea:	0d12      	lsrs	r2, r2, #20
 800c0ec:	0512      	lsls	r2, r2, #20
 800c0ee:	b18a      	cbz	r2, 800c114 <_dtoa_r+0x83c>
 800c0f0:	9b05      	ldr	r3, [sp, #20]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	9305      	str	r3, [sp, #20]
 800c0f6:	9b06      	ldr	r3, [sp, #24]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	9306      	str	r3, [sp, #24]
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	930a      	str	r3, [sp, #40]	; 0x28
 800c100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c102:	2b00      	cmp	r3, #0
 800c104:	f47f af6f 	bne.w	800bfe6 <_dtoa_r+0x70e>
 800c108:	2001      	movs	r0, #1
 800c10a:	e774      	b.n	800bff6 <_dtoa_r+0x71e>
 800c10c:	2300      	movs	r3, #0
 800c10e:	e7f6      	b.n	800c0fe <_dtoa_r+0x826>
 800c110:	9b02      	ldr	r3, [sp, #8]
 800c112:	e7f4      	b.n	800c0fe <_dtoa_r+0x826>
 800c114:	920a      	str	r2, [sp, #40]	; 0x28
 800c116:	e7f3      	b.n	800c100 <_dtoa_r+0x828>
 800c118:	d081      	beq.n	800c01e <_dtoa_r+0x746>
 800c11a:	4610      	mov	r0, r2
 800c11c:	301c      	adds	r0, #28
 800c11e:	e777      	b.n	800c010 <_dtoa_r+0x738>
 800c120:	f1b9 0f00 	cmp.w	r9, #0
 800c124:	dc37      	bgt.n	800c196 <_dtoa_r+0x8be>
 800c126:	9b07      	ldr	r3, [sp, #28]
 800c128:	2b02      	cmp	r3, #2
 800c12a:	dd34      	ble.n	800c196 <_dtoa_r+0x8be>
 800c12c:	46ca      	mov	sl, r9
 800c12e:	f1ba 0f00 	cmp.w	sl, #0
 800c132:	d10d      	bne.n	800c150 <_dtoa_r+0x878>
 800c134:	4621      	mov	r1, r4
 800c136:	4653      	mov	r3, sl
 800c138:	2205      	movs	r2, #5
 800c13a:	4630      	mov	r0, r6
 800c13c:	f7fe ff6e 	bl	800b01c <__multadd>
 800c140:	4601      	mov	r1, r0
 800c142:	4604      	mov	r4, r0
 800c144:	4628      	mov	r0, r5
 800c146:	f7ff f985 	bl	800b454 <__mcmp>
 800c14a:	2800      	cmp	r0, #0
 800c14c:	f73f adde 	bgt.w	800bd0c <_dtoa_r+0x434>
 800c150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c152:	f8dd 8000 	ldr.w	r8, [sp]
 800c156:	ea6f 0b03 	mvn.w	fp, r3
 800c15a:	f04f 0900 	mov.w	r9, #0
 800c15e:	4621      	mov	r1, r4
 800c160:	4630      	mov	r0, r6
 800c162:	f7fe ff39 	bl	800afd8 <_Bfree>
 800c166:	2f00      	cmp	r7, #0
 800c168:	f43f aea7 	beq.w	800beba <_dtoa_r+0x5e2>
 800c16c:	f1b9 0f00 	cmp.w	r9, #0
 800c170:	d005      	beq.n	800c17e <_dtoa_r+0x8a6>
 800c172:	45b9      	cmp	r9, r7
 800c174:	d003      	beq.n	800c17e <_dtoa_r+0x8a6>
 800c176:	4649      	mov	r1, r9
 800c178:	4630      	mov	r0, r6
 800c17a:	f7fe ff2d 	bl	800afd8 <_Bfree>
 800c17e:	4639      	mov	r1, r7
 800c180:	4630      	mov	r0, r6
 800c182:	f7fe ff29 	bl	800afd8 <_Bfree>
 800c186:	e698      	b.n	800beba <_dtoa_r+0x5e2>
 800c188:	2400      	movs	r4, #0
 800c18a:	4627      	mov	r7, r4
 800c18c:	e7e0      	b.n	800c150 <_dtoa_r+0x878>
 800c18e:	46bb      	mov	fp, r7
 800c190:	4604      	mov	r4, r0
 800c192:	4607      	mov	r7, r0
 800c194:	e5ba      	b.n	800bd0c <_dtoa_r+0x434>
 800c196:	9b08      	ldr	r3, [sp, #32]
 800c198:	46ca      	mov	sl, r9
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	f000 8100 	beq.w	800c3a0 <_dtoa_r+0xac8>
 800c1a0:	f1b8 0f00 	cmp.w	r8, #0
 800c1a4:	dd05      	ble.n	800c1b2 <_dtoa_r+0x8da>
 800c1a6:	4639      	mov	r1, r7
 800c1a8:	4642      	mov	r2, r8
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	f7ff f8e6 	bl	800b37c <__lshift>
 800c1b0:	4607      	mov	r7, r0
 800c1b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d05d      	beq.n	800c274 <_dtoa_r+0x99c>
 800c1b8:	6879      	ldr	r1, [r7, #4]
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	f7fe fecc 	bl	800af58 <_Balloc>
 800c1c0:	4680      	mov	r8, r0
 800c1c2:	b928      	cbnz	r0, 800c1d0 <_dtoa_r+0x8f8>
 800c1c4:	4b82      	ldr	r3, [pc, #520]	; (800c3d0 <_dtoa_r+0xaf8>)
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c1cc:	f7ff bb9a 	b.w	800b904 <_dtoa_r+0x2c>
 800c1d0:	693a      	ldr	r2, [r7, #16]
 800c1d2:	3202      	adds	r2, #2
 800c1d4:	0092      	lsls	r2, r2, #2
 800c1d6:	f107 010c 	add.w	r1, r7, #12
 800c1da:	300c      	adds	r0, #12
 800c1dc:	f000 f918 	bl	800c410 <memcpy>
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	4641      	mov	r1, r8
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	f7ff f8c9 	bl	800b37c <__lshift>
 800c1ea:	9b00      	ldr	r3, [sp, #0]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	9305      	str	r3, [sp, #20]
 800c1f0:	9b00      	ldr	r3, [sp, #0]
 800c1f2:	4453      	add	r3, sl
 800c1f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1f6:	9b02      	ldr	r3, [sp, #8]
 800c1f8:	f003 0301 	and.w	r3, r3, #1
 800c1fc:	46b9      	mov	r9, r7
 800c1fe:	9308      	str	r3, [sp, #32]
 800c200:	4607      	mov	r7, r0
 800c202:	9b05      	ldr	r3, [sp, #20]
 800c204:	4621      	mov	r1, r4
 800c206:	3b01      	subs	r3, #1
 800c208:	4628      	mov	r0, r5
 800c20a:	9302      	str	r3, [sp, #8]
 800c20c:	f7ff fad6 	bl	800b7bc <quorem>
 800c210:	4603      	mov	r3, r0
 800c212:	3330      	adds	r3, #48	; 0x30
 800c214:	9006      	str	r0, [sp, #24]
 800c216:	4649      	mov	r1, r9
 800c218:	4628      	mov	r0, r5
 800c21a:	930a      	str	r3, [sp, #40]	; 0x28
 800c21c:	f7ff f91a 	bl	800b454 <__mcmp>
 800c220:	463a      	mov	r2, r7
 800c222:	4682      	mov	sl, r0
 800c224:	4621      	mov	r1, r4
 800c226:	4630      	mov	r0, r6
 800c228:	f7ff f930 	bl	800b48c <__mdiff>
 800c22c:	68c2      	ldr	r2, [r0, #12]
 800c22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c230:	4680      	mov	r8, r0
 800c232:	bb0a      	cbnz	r2, 800c278 <_dtoa_r+0x9a0>
 800c234:	4601      	mov	r1, r0
 800c236:	4628      	mov	r0, r5
 800c238:	f7ff f90c 	bl	800b454 <__mcmp>
 800c23c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c23e:	4602      	mov	r2, r0
 800c240:	4641      	mov	r1, r8
 800c242:	4630      	mov	r0, r6
 800c244:	920e      	str	r2, [sp, #56]	; 0x38
 800c246:	930a      	str	r3, [sp, #40]	; 0x28
 800c248:	f7fe fec6 	bl	800afd8 <_Bfree>
 800c24c:	9b07      	ldr	r3, [sp, #28]
 800c24e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c250:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c254:	ea43 0102 	orr.w	r1, r3, r2
 800c258:	9b08      	ldr	r3, [sp, #32]
 800c25a:	430b      	orrs	r3, r1
 800c25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c25e:	d10d      	bne.n	800c27c <_dtoa_r+0x9a4>
 800c260:	2b39      	cmp	r3, #57	; 0x39
 800c262:	d029      	beq.n	800c2b8 <_dtoa_r+0x9e0>
 800c264:	f1ba 0f00 	cmp.w	sl, #0
 800c268:	dd01      	ble.n	800c26e <_dtoa_r+0x996>
 800c26a:	9b06      	ldr	r3, [sp, #24]
 800c26c:	3331      	adds	r3, #49	; 0x31
 800c26e:	9a02      	ldr	r2, [sp, #8]
 800c270:	7013      	strb	r3, [r2, #0]
 800c272:	e774      	b.n	800c15e <_dtoa_r+0x886>
 800c274:	4638      	mov	r0, r7
 800c276:	e7b8      	b.n	800c1ea <_dtoa_r+0x912>
 800c278:	2201      	movs	r2, #1
 800c27a:	e7e1      	b.n	800c240 <_dtoa_r+0x968>
 800c27c:	f1ba 0f00 	cmp.w	sl, #0
 800c280:	db06      	blt.n	800c290 <_dtoa_r+0x9b8>
 800c282:	9907      	ldr	r1, [sp, #28]
 800c284:	ea41 0a0a 	orr.w	sl, r1, sl
 800c288:	9908      	ldr	r1, [sp, #32]
 800c28a:	ea5a 0101 	orrs.w	r1, sl, r1
 800c28e:	d120      	bne.n	800c2d2 <_dtoa_r+0x9fa>
 800c290:	2a00      	cmp	r2, #0
 800c292:	ddec      	ble.n	800c26e <_dtoa_r+0x996>
 800c294:	4629      	mov	r1, r5
 800c296:	2201      	movs	r2, #1
 800c298:	4630      	mov	r0, r6
 800c29a:	9305      	str	r3, [sp, #20]
 800c29c:	f7ff f86e 	bl	800b37c <__lshift>
 800c2a0:	4621      	mov	r1, r4
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	f7ff f8d6 	bl	800b454 <__mcmp>
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	9b05      	ldr	r3, [sp, #20]
 800c2ac:	dc02      	bgt.n	800c2b4 <_dtoa_r+0x9dc>
 800c2ae:	d1de      	bne.n	800c26e <_dtoa_r+0x996>
 800c2b0:	07da      	lsls	r2, r3, #31
 800c2b2:	d5dc      	bpl.n	800c26e <_dtoa_r+0x996>
 800c2b4:	2b39      	cmp	r3, #57	; 0x39
 800c2b6:	d1d8      	bne.n	800c26a <_dtoa_r+0x992>
 800c2b8:	9a02      	ldr	r2, [sp, #8]
 800c2ba:	2339      	movs	r3, #57	; 0x39
 800c2bc:	7013      	strb	r3, [r2, #0]
 800c2be:	4643      	mov	r3, r8
 800c2c0:	4698      	mov	r8, r3
 800c2c2:	3b01      	subs	r3, #1
 800c2c4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c2c8:	2a39      	cmp	r2, #57	; 0x39
 800c2ca:	d051      	beq.n	800c370 <_dtoa_r+0xa98>
 800c2cc:	3201      	adds	r2, #1
 800c2ce:	701a      	strb	r2, [r3, #0]
 800c2d0:	e745      	b.n	800c15e <_dtoa_r+0x886>
 800c2d2:	2a00      	cmp	r2, #0
 800c2d4:	dd03      	ble.n	800c2de <_dtoa_r+0xa06>
 800c2d6:	2b39      	cmp	r3, #57	; 0x39
 800c2d8:	d0ee      	beq.n	800c2b8 <_dtoa_r+0x9e0>
 800c2da:	3301      	adds	r3, #1
 800c2dc:	e7c7      	b.n	800c26e <_dtoa_r+0x996>
 800c2de:	9a05      	ldr	r2, [sp, #20]
 800c2e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2e2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c2e6:	428a      	cmp	r2, r1
 800c2e8:	d02b      	beq.n	800c342 <_dtoa_r+0xa6a>
 800c2ea:	4629      	mov	r1, r5
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	220a      	movs	r2, #10
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	f7fe fe93 	bl	800b01c <__multadd>
 800c2f6:	45b9      	cmp	r9, r7
 800c2f8:	4605      	mov	r5, r0
 800c2fa:	f04f 0300 	mov.w	r3, #0
 800c2fe:	f04f 020a 	mov.w	r2, #10
 800c302:	4649      	mov	r1, r9
 800c304:	4630      	mov	r0, r6
 800c306:	d107      	bne.n	800c318 <_dtoa_r+0xa40>
 800c308:	f7fe fe88 	bl	800b01c <__multadd>
 800c30c:	4681      	mov	r9, r0
 800c30e:	4607      	mov	r7, r0
 800c310:	9b05      	ldr	r3, [sp, #20]
 800c312:	3301      	adds	r3, #1
 800c314:	9305      	str	r3, [sp, #20]
 800c316:	e774      	b.n	800c202 <_dtoa_r+0x92a>
 800c318:	f7fe fe80 	bl	800b01c <__multadd>
 800c31c:	4639      	mov	r1, r7
 800c31e:	4681      	mov	r9, r0
 800c320:	2300      	movs	r3, #0
 800c322:	220a      	movs	r2, #10
 800c324:	4630      	mov	r0, r6
 800c326:	f7fe fe79 	bl	800b01c <__multadd>
 800c32a:	4607      	mov	r7, r0
 800c32c:	e7f0      	b.n	800c310 <_dtoa_r+0xa38>
 800c32e:	f1ba 0f00 	cmp.w	sl, #0
 800c332:	9a00      	ldr	r2, [sp, #0]
 800c334:	bfcc      	ite	gt
 800c336:	46d0      	movgt	r8, sl
 800c338:	f04f 0801 	movle.w	r8, #1
 800c33c:	4490      	add	r8, r2
 800c33e:	f04f 0900 	mov.w	r9, #0
 800c342:	4629      	mov	r1, r5
 800c344:	2201      	movs	r2, #1
 800c346:	4630      	mov	r0, r6
 800c348:	9302      	str	r3, [sp, #8]
 800c34a:	f7ff f817 	bl	800b37c <__lshift>
 800c34e:	4621      	mov	r1, r4
 800c350:	4605      	mov	r5, r0
 800c352:	f7ff f87f 	bl	800b454 <__mcmp>
 800c356:	2800      	cmp	r0, #0
 800c358:	dcb1      	bgt.n	800c2be <_dtoa_r+0x9e6>
 800c35a:	d102      	bne.n	800c362 <_dtoa_r+0xa8a>
 800c35c:	9b02      	ldr	r3, [sp, #8]
 800c35e:	07db      	lsls	r3, r3, #31
 800c360:	d4ad      	bmi.n	800c2be <_dtoa_r+0x9e6>
 800c362:	4643      	mov	r3, r8
 800c364:	4698      	mov	r8, r3
 800c366:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c36a:	2a30      	cmp	r2, #48	; 0x30
 800c36c:	d0fa      	beq.n	800c364 <_dtoa_r+0xa8c>
 800c36e:	e6f6      	b.n	800c15e <_dtoa_r+0x886>
 800c370:	9a00      	ldr	r2, [sp, #0]
 800c372:	429a      	cmp	r2, r3
 800c374:	d1a4      	bne.n	800c2c0 <_dtoa_r+0x9e8>
 800c376:	f10b 0b01 	add.w	fp, fp, #1
 800c37a:	2331      	movs	r3, #49	; 0x31
 800c37c:	e778      	b.n	800c270 <_dtoa_r+0x998>
 800c37e:	4b15      	ldr	r3, [pc, #84]	; (800c3d4 <_dtoa_r+0xafc>)
 800c380:	f7ff bb12 	b.w	800b9a8 <_dtoa_r+0xd0>
 800c384:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c386:	2b00      	cmp	r3, #0
 800c388:	f47f aaee 	bne.w	800b968 <_dtoa_r+0x90>
 800c38c:	4b12      	ldr	r3, [pc, #72]	; (800c3d8 <_dtoa_r+0xb00>)
 800c38e:	f7ff bb0b 	b.w	800b9a8 <_dtoa_r+0xd0>
 800c392:	f1ba 0f00 	cmp.w	sl, #0
 800c396:	dc03      	bgt.n	800c3a0 <_dtoa_r+0xac8>
 800c398:	9b07      	ldr	r3, [sp, #28]
 800c39a:	2b02      	cmp	r3, #2
 800c39c:	f73f aec7 	bgt.w	800c12e <_dtoa_r+0x856>
 800c3a0:	f8dd 8000 	ldr.w	r8, [sp]
 800c3a4:	4621      	mov	r1, r4
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	f7ff fa08 	bl	800b7bc <quorem>
 800c3ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c3b0:	f808 3b01 	strb.w	r3, [r8], #1
 800c3b4:	9a00      	ldr	r2, [sp, #0]
 800c3b6:	eba8 0202 	sub.w	r2, r8, r2
 800c3ba:	4592      	cmp	sl, r2
 800c3bc:	ddb7      	ble.n	800c32e <_dtoa_r+0xa56>
 800c3be:	4629      	mov	r1, r5
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	220a      	movs	r2, #10
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	f7fe fe29 	bl	800b01c <__multadd>
 800c3ca:	4605      	mov	r5, r0
 800c3cc:	e7ea      	b.n	800c3a4 <_dtoa_r+0xacc>
 800c3ce:	bf00      	nop
 800c3d0:	0800d417 	.word	0x0800d417
 800c3d4:	0800d56d 	.word	0x0800d56d
 800c3d8:	0800d560 	.word	0x0800d560

0800c3dc <fiprintf>:
 800c3dc:	b40e      	push	{r1, r2, r3}
 800c3de:	b503      	push	{r0, r1, lr}
 800c3e0:	4601      	mov	r1, r0
 800c3e2:	ab03      	add	r3, sp, #12
 800c3e4:	4805      	ldr	r0, [pc, #20]	; (800c3fc <fiprintf+0x20>)
 800c3e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3ea:	6800      	ldr	r0, [r0, #0]
 800c3ec:	9301      	str	r3, [sp, #4]
 800c3ee:	f000 f8a3 	bl	800c538 <_vfiprintf_r>
 800c3f2:	b002      	add	sp, #8
 800c3f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3f8:	b003      	add	sp, #12
 800c3fa:	4770      	bx	lr
 800c3fc:	240010a4 	.word	0x240010a4

0800c400 <malloc>:
 800c400:	4b02      	ldr	r3, [pc, #8]	; (800c40c <malloc+0xc>)
 800c402:	4601      	mov	r1, r0
 800c404:	6818      	ldr	r0, [r3, #0]
 800c406:	f7ff b949 	b.w	800b69c <_malloc_r>
 800c40a:	bf00      	nop
 800c40c:	240010a4 	.word	0x240010a4

0800c410 <memcpy>:
 800c410:	440a      	add	r2, r1
 800c412:	4291      	cmp	r1, r2
 800c414:	f100 33ff 	add.w	r3, r0, #4294967295
 800c418:	d100      	bne.n	800c41c <memcpy+0xc>
 800c41a:	4770      	bx	lr
 800c41c:	b510      	push	{r4, lr}
 800c41e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c422:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c426:	4291      	cmp	r1, r2
 800c428:	d1f9      	bne.n	800c41e <memcpy+0xe>
 800c42a:	bd10      	pop	{r4, pc}

0800c42c <__malloc_lock>:
 800c42c:	4801      	ldr	r0, [pc, #4]	; (800c434 <__malloc_lock+0x8>)
 800c42e:	f000 bdc7 	b.w	800cfc0 <__retarget_lock_acquire_recursive>
 800c432:	bf00      	nop
 800c434:	24001700 	.word	0x24001700

0800c438 <__malloc_unlock>:
 800c438:	4801      	ldr	r0, [pc, #4]	; (800c440 <__malloc_unlock+0x8>)
 800c43a:	f000 bdc2 	b.w	800cfc2 <__retarget_lock_release_recursive>
 800c43e:	bf00      	nop
 800c440:	24001700 	.word	0x24001700

0800c444 <_free_r>:
 800c444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c446:	2900      	cmp	r1, #0
 800c448:	d048      	beq.n	800c4dc <_free_r+0x98>
 800c44a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c44e:	9001      	str	r0, [sp, #4]
 800c450:	2b00      	cmp	r3, #0
 800c452:	f1a1 0404 	sub.w	r4, r1, #4
 800c456:	bfb8      	it	lt
 800c458:	18e4      	addlt	r4, r4, r3
 800c45a:	f7ff ffe7 	bl	800c42c <__malloc_lock>
 800c45e:	4a20      	ldr	r2, [pc, #128]	; (800c4e0 <_free_r+0x9c>)
 800c460:	9801      	ldr	r0, [sp, #4]
 800c462:	6813      	ldr	r3, [r2, #0]
 800c464:	4615      	mov	r5, r2
 800c466:	b933      	cbnz	r3, 800c476 <_free_r+0x32>
 800c468:	6063      	str	r3, [r4, #4]
 800c46a:	6014      	str	r4, [r2, #0]
 800c46c:	b003      	add	sp, #12
 800c46e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c472:	f7ff bfe1 	b.w	800c438 <__malloc_unlock>
 800c476:	42a3      	cmp	r3, r4
 800c478:	d90b      	bls.n	800c492 <_free_r+0x4e>
 800c47a:	6821      	ldr	r1, [r4, #0]
 800c47c:	1862      	adds	r2, r4, r1
 800c47e:	4293      	cmp	r3, r2
 800c480:	bf04      	itt	eq
 800c482:	681a      	ldreq	r2, [r3, #0]
 800c484:	685b      	ldreq	r3, [r3, #4]
 800c486:	6063      	str	r3, [r4, #4]
 800c488:	bf04      	itt	eq
 800c48a:	1852      	addeq	r2, r2, r1
 800c48c:	6022      	streq	r2, [r4, #0]
 800c48e:	602c      	str	r4, [r5, #0]
 800c490:	e7ec      	b.n	800c46c <_free_r+0x28>
 800c492:	461a      	mov	r2, r3
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	b10b      	cbz	r3, 800c49c <_free_r+0x58>
 800c498:	42a3      	cmp	r3, r4
 800c49a:	d9fa      	bls.n	800c492 <_free_r+0x4e>
 800c49c:	6811      	ldr	r1, [r2, #0]
 800c49e:	1855      	adds	r5, r2, r1
 800c4a0:	42a5      	cmp	r5, r4
 800c4a2:	d10b      	bne.n	800c4bc <_free_r+0x78>
 800c4a4:	6824      	ldr	r4, [r4, #0]
 800c4a6:	4421      	add	r1, r4
 800c4a8:	1854      	adds	r4, r2, r1
 800c4aa:	42a3      	cmp	r3, r4
 800c4ac:	6011      	str	r1, [r2, #0]
 800c4ae:	d1dd      	bne.n	800c46c <_free_r+0x28>
 800c4b0:	681c      	ldr	r4, [r3, #0]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	6053      	str	r3, [r2, #4]
 800c4b6:	4421      	add	r1, r4
 800c4b8:	6011      	str	r1, [r2, #0]
 800c4ba:	e7d7      	b.n	800c46c <_free_r+0x28>
 800c4bc:	d902      	bls.n	800c4c4 <_free_r+0x80>
 800c4be:	230c      	movs	r3, #12
 800c4c0:	6003      	str	r3, [r0, #0]
 800c4c2:	e7d3      	b.n	800c46c <_free_r+0x28>
 800c4c4:	6825      	ldr	r5, [r4, #0]
 800c4c6:	1961      	adds	r1, r4, r5
 800c4c8:	428b      	cmp	r3, r1
 800c4ca:	bf04      	itt	eq
 800c4cc:	6819      	ldreq	r1, [r3, #0]
 800c4ce:	685b      	ldreq	r3, [r3, #4]
 800c4d0:	6063      	str	r3, [r4, #4]
 800c4d2:	bf04      	itt	eq
 800c4d4:	1949      	addeq	r1, r1, r5
 800c4d6:	6021      	streq	r1, [r4, #0]
 800c4d8:	6054      	str	r4, [r2, #4]
 800c4da:	e7c7      	b.n	800c46c <_free_r+0x28>
 800c4dc:	b003      	add	sp, #12
 800c4de:	bd30      	pop	{r4, r5, pc}
 800c4e0:	240011a4 	.word	0x240011a4

0800c4e4 <__sfputc_r>:
 800c4e4:	6893      	ldr	r3, [r2, #8]
 800c4e6:	3b01      	subs	r3, #1
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	b410      	push	{r4}
 800c4ec:	6093      	str	r3, [r2, #8]
 800c4ee:	da08      	bge.n	800c502 <__sfputc_r+0x1e>
 800c4f0:	6994      	ldr	r4, [r2, #24]
 800c4f2:	42a3      	cmp	r3, r4
 800c4f4:	db01      	blt.n	800c4fa <__sfputc_r+0x16>
 800c4f6:	290a      	cmp	r1, #10
 800c4f8:	d103      	bne.n	800c502 <__sfputc_r+0x1e>
 800c4fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4fe:	f000 badf 	b.w	800cac0 <__swbuf_r>
 800c502:	6813      	ldr	r3, [r2, #0]
 800c504:	1c58      	adds	r0, r3, #1
 800c506:	6010      	str	r0, [r2, #0]
 800c508:	7019      	strb	r1, [r3, #0]
 800c50a:	4608      	mov	r0, r1
 800c50c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c510:	4770      	bx	lr

0800c512 <__sfputs_r>:
 800c512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c514:	4606      	mov	r6, r0
 800c516:	460f      	mov	r7, r1
 800c518:	4614      	mov	r4, r2
 800c51a:	18d5      	adds	r5, r2, r3
 800c51c:	42ac      	cmp	r4, r5
 800c51e:	d101      	bne.n	800c524 <__sfputs_r+0x12>
 800c520:	2000      	movs	r0, #0
 800c522:	e007      	b.n	800c534 <__sfputs_r+0x22>
 800c524:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c528:	463a      	mov	r2, r7
 800c52a:	4630      	mov	r0, r6
 800c52c:	f7ff ffda 	bl	800c4e4 <__sfputc_r>
 800c530:	1c43      	adds	r3, r0, #1
 800c532:	d1f3      	bne.n	800c51c <__sfputs_r+0xa>
 800c534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c538 <_vfiprintf_r>:
 800c538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c53c:	460d      	mov	r5, r1
 800c53e:	b09d      	sub	sp, #116	; 0x74
 800c540:	4614      	mov	r4, r2
 800c542:	4698      	mov	r8, r3
 800c544:	4606      	mov	r6, r0
 800c546:	b118      	cbz	r0, 800c550 <_vfiprintf_r+0x18>
 800c548:	6983      	ldr	r3, [r0, #24]
 800c54a:	b90b      	cbnz	r3, 800c550 <_vfiprintf_r+0x18>
 800c54c:	f000 fc9a 	bl	800ce84 <__sinit>
 800c550:	4b89      	ldr	r3, [pc, #548]	; (800c778 <_vfiprintf_r+0x240>)
 800c552:	429d      	cmp	r5, r3
 800c554:	d11b      	bne.n	800c58e <_vfiprintf_r+0x56>
 800c556:	6875      	ldr	r5, [r6, #4]
 800c558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c55a:	07d9      	lsls	r1, r3, #31
 800c55c:	d405      	bmi.n	800c56a <_vfiprintf_r+0x32>
 800c55e:	89ab      	ldrh	r3, [r5, #12]
 800c560:	059a      	lsls	r2, r3, #22
 800c562:	d402      	bmi.n	800c56a <_vfiprintf_r+0x32>
 800c564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c566:	f000 fd2b 	bl	800cfc0 <__retarget_lock_acquire_recursive>
 800c56a:	89ab      	ldrh	r3, [r5, #12]
 800c56c:	071b      	lsls	r3, r3, #28
 800c56e:	d501      	bpl.n	800c574 <_vfiprintf_r+0x3c>
 800c570:	692b      	ldr	r3, [r5, #16]
 800c572:	b9eb      	cbnz	r3, 800c5b0 <_vfiprintf_r+0x78>
 800c574:	4629      	mov	r1, r5
 800c576:	4630      	mov	r0, r6
 800c578:	f000 faf4 	bl	800cb64 <__swsetup_r>
 800c57c:	b1c0      	cbz	r0, 800c5b0 <_vfiprintf_r+0x78>
 800c57e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c580:	07dc      	lsls	r4, r3, #31
 800c582:	d50e      	bpl.n	800c5a2 <_vfiprintf_r+0x6a>
 800c584:	f04f 30ff 	mov.w	r0, #4294967295
 800c588:	b01d      	add	sp, #116	; 0x74
 800c58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c58e:	4b7b      	ldr	r3, [pc, #492]	; (800c77c <_vfiprintf_r+0x244>)
 800c590:	429d      	cmp	r5, r3
 800c592:	d101      	bne.n	800c598 <_vfiprintf_r+0x60>
 800c594:	68b5      	ldr	r5, [r6, #8]
 800c596:	e7df      	b.n	800c558 <_vfiprintf_r+0x20>
 800c598:	4b79      	ldr	r3, [pc, #484]	; (800c780 <_vfiprintf_r+0x248>)
 800c59a:	429d      	cmp	r5, r3
 800c59c:	bf08      	it	eq
 800c59e:	68f5      	ldreq	r5, [r6, #12]
 800c5a0:	e7da      	b.n	800c558 <_vfiprintf_r+0x20>
 800c5a2:	89ab      	ldrh	r3, [r5, #12]
 800c5a4:	0598      	lsls	r0, r3, #22
 800c5a6:	d4ed      	bmi.n	800c584 <_vfiprintf_r+0x4c>
 800c5a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5aa:	f000 fd0a 	bl	800cfc2 <__retarget_lock_release_recursive>
 800c5ae:	e7e9      	b.n	800c584 <_vfiprintf_r+0x4c>
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5b4:	2320      	movs	r3, #32
 800c5b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5be:	2330      	movs	r3, #48	; 0x30
 800c5c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c784 <_vfiprintf_r+0x24c>
 800c5c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5c8:	f04f 0901 	mov.w	r9, #1
 800c5cc:	4623      	mov	r3, r4
 800c5ce:	469a      	mov	sl, r3
 800c5d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5d4:	b10a      	cbz	r2, 800c5da <_vfiprintf_r+0xa2>
 800c5d6:	2a25      	cmp	r2, #37	; 0x25
 800c5d8:	d1f9      	bne.n	800c5ce <_vfiprintf_r+0x96>
 800c5da:	ebba 0b04 	subs.w	fp, sl, r4
 800c5de:	d00b      	beq.n	800c5f8 <_vfiprintf_r+0xc0>
 800c5e0:	465b      	mov	r3, fp
 800c5e2:	4622      	mov	r2, r4
 800c5e4:	4629      	mov	r1, r5
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	f7ff ff93 	bl	800c512 <__sfputs_r>
 800c5ec:	3001      	adds	r0, #1
 800c5ee:	f000 80aa 	beq.w	800c746 <_vfiprintf_r+0x20e>
 800c5f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5f4:	445a      	add	r2, fp
 800c5f6:	9209      	str	r2, [sp, #36]	; 0x24
 800c5f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f000 80a2 	beq.w	800c746 <_vfiprintf_r+0x20e>
 800c602:	2300      	movs	r3, #0
 800c604:	f04f 32ff 	mov.w	r2, #4294967295
 800c608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c60c:	f10a 0a01 	add.w	sl, sl, #1
 800c610:	9304      	str	r3, [sp, #16]
 800c612:	9307      	str	r3, [sp, #28]
 800c614:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c618:	931a      	str	r3, [sp, #104]	; 0x68
 800c61a:	4654      	mov	r4, sl
 800c61c:	2205      	movs	r2, #5
 800c61e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c622:	4858      	ldr	r0, [pc, #352]	; (800c784 <_vfiprintf_r+0x24c>)
 800c624:	f7f3 fe5c 	bl	80002e0 <memchr>
 800c628:	9a04      	ldr	r2, [sp, #16]
 800c62a:	b9d8      	cbnz	r0, 800c664 <_vfiprintf_r+0x12c>
 800c62c:	06d1      	lsls	r1, r2, #27
 800c62e:	bf44      	itt	mi
 800c630:	2320      	movmi	r3, #32
 800c632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c636:	0713      	lsls	r3, r2, #28
 800c638:	bf44      	itt	mi
 800c63a:	232b      	movmi	r3, #43	; 0x2b
 800c63c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c640:	f89a 3000 	ldrb.w	r3, [sl]
 800c644:	2b2a      	cmp	r3, #42	; 0x2a
 800c646:	d015      	beq.n	800c674 <_vfiprintf_r+0x13c>
 800c648:	9a07      	ldr	r2, [sp, #28]
 800c64a:	4654      	mov	r4, sl
 800c64c:	2000      	movs	r0, #0
 800c64e:	f04f 0c0a 	mov.w	ip, #10
 800c652:	4621      	mov	r1, r4
 800c654:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c658:	3b30      	subs	r3, #48	; 0x30
 800c65a:	2b09      	cmp	r3, #9
 800c65c:	d94e      	bls.n	800c6fc <_vfiprintf_r+0x1c4>
 800c65e:	b1b0      	cbz	r0, 800c68e <_vfiprintf_r+0x156>
 800c660:	9207      	str	r2, [sp, #28]
 800c662:	e014      	b.n	800c68e <_vfiprintf_r+0x156>
 800c664:	eba0 0308 	sub.w	r3, r0, r8
 800c668:	fa09 f303 	lsl.w	r3, r9, r3
 800c66c:	4313      	orrs	r3, r2
 800c66e:	9304      	str	r3, [sp, #16]
 800c670:	46a2      	mov	sl, r4
 800c672:	e7d2      	b.n	800c61a <_vfiprintf_r+0xe2>
 800c674:	9b03      	ldr	r3, [sp, #12]
 800c676:	1d19      	adds	r1, r3, #4
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	9103      	str	r1, [sp, #12]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	bfbb      	ittet	lt
 800c680:	425b      	neglt	r3, r3
 800c682:	f042 0202 	orrlt.w	r2, r2, #2
 800c686:	9307      	strge	r3, [sp, #28]
 800c688:	9307      	strlt	r3, [sp, #28]
 800c68a:	bfb8      	it	lt
 800c68c:	9204      	strlt	r2, [sp, #16]
 800c68e:	7823      	ldrb	r3, [r4, #0]
 800c690:	2b2e      	cmp	r3, #46	; 0x2e
 800c692:	d10c      	bne.n	800c6ae <_vfiprintf_r+0x176>
 800c694:	7863      	ldrb	r3, [r4, #1]
 800c696:	2b2a      	cmp	r3, #42	; 0x2a
 800c698:	d135      	bne.n	800c706 <_vfiprintf_r+0x1ce>
 800c69a:	9b03      	ldr	r3, [sp, #12]
 800c69c:	1d1a      	adds	r2, r3, #4
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	9203      	str	r2, [sp, #12]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	bfb8      	it	lt
 800c6a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6aa:	3402      	adds	r4, #2
 800c6ac:	9305      	str	r3, [sp, #20]
 800c6ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c794 <_vfiprintf_r+0x25c>
 800c6b2:	7821      	ldrb	r1, [r4, #0]
 800c6b4:	2203      	movs	r2, #3
 800c6b6:	4650      	mov	r0, sl
 800c6b8:	f7f3 fe12 	bl	80002e0 <memchr>
 800c6bc:	b140      	cbz	r0, 800c6d0 <_vfiprintf_r+0x198>
 800c6be:	2340      	movs	r3, #64	; 0x40
 800c6c0:	eba0 000a 	sub.w	r0, r0, sl
 800c6c4:	fa03 f000 	lsl.w	r0, r3, r0
 800c6c8:	9b04      	ldr	r3, [sp, #16]
 800c6ca:	4303      	orrs	r3, r0
 800c6cc:	3401      	adds	r4, #1
 800c6ce:	9304      	str	r3, [sp, #16]
 800c6d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6d4:	482c      	ldr	r0, [pc, #176]	; (800c788 <_vfiprintf_r+0x250>)
 800c6d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6da:	2206      	movs	r2, #6
 800c6dc:	f7f3 fe00 	bl	80002e0 <memchr>
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	d03f      	beq.n	800c764 <_vfiprintf_r+0x22c>
 800c6e4:	4b29      	ldr	r3, [pc, #164]	; (800c78c <_vfiprintf_r+0x254>)
 800c6e6:	bb1b      	cbnz	r3, 800c730 <_vfiprintf_r+0x1f8>
 800c6e8:	9b03      	ldr	r3, [sp, #12]
 800c6ea:	3307      	adds	r3, #7
 800c6ec:	f023 0307 	bic.w	r3, r3, #7
 800c6f0:	3308      	adds	r3, #8
 800c6f2:	9303      	str	r3, [sp, #12]
 800c6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6f6:	443b      	add	r3, r7
 800c6f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c6fa:	e767      	b.n	800c5cc <_vfiprintf_r+0x94>
 800c6fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c700:	460c      	mov	r4, r1
 800c702:	2001      	movs	r0, #1
 800c704:	e7a5      	b.n	800c652 <_vfiprintf_r+0x11a>
 800c706:	2300      	movs	r3, #0
 800c708:	3401      	adds	r4, #1
 800c70a:	9305      	str	r3, [sp, #20]
 800c70c:	4619      	mov	r1, r3
 800c70e:	f04f 0c0a 	mov.w	ip, #10
 800c712:	4620      	mov	r0, r4
 800c714:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c718:	3a30      	subs	r2, #48	; 0x30
 800c71a:	2a09      	cmp	r2, #9
 800c71c:	d903      	bls.n	800c726 <_vfiprintf_r+0x1ee>
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d0c5      	beq.n	800c6ae <_vfiprintf_r+0x176>
 800c722:	9105      	str	r1, [sp, #20]
 800c724:	e7c3      	b.n	800c6ae <_vfiprintf_r+0x176>
 800c726:	fb0c 2101 	mla	r1, ip, r1, r2
 800c72a:	4604      	mov	r4, r0
 800c72c:	2301      	movs	r3, #1
 800c72e:	e7f0      	b.n	800c712 <_vfiprintf_r+0x1da>
 800c730:	ab03      	add	r3, sp, #12
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	462a      	mov	r2, r5
 800c736:	4b16      	ldr	r3, [pc, #88]	; (800c790 <_vfiprintf_r+0x258>)
 800c738:	a904      	add	r1, sp, #16
 800c73a:	4630      	mov	r0, r6
 800c73c:	f3af 8000 	nop.w
 800c740:	4607      	mov	r7, r0
 800c742:	1c78      	adds	r0, r7, #1
 800c744:	d1d6      	bne.n	800c6f4 <_vfiprintf_r+0x1bc>
 800c746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c748:	07d9      	lsls	r1, r3, #31
 800c74a:	d405      	bmi.n	800c758 <_vfiprintf_r+0x220>
 800c74c:	89ab      	ldrh	r3, [r5, #12]
 800c74e:	059a      	lsls	r2, r3, #22
 800c750:	d402      	bmi.n	800c758 <_vfiprintf_r+0x220>
 800c752:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c754:	f000 fc35 	bl	800cfc2 <__retarget_lock_release_recursive>
 800c758:	89ab      	ldrh	r3, [r5, #12]
 800c75a:	065b      	lsls	r3, r3, #25
 800c75c:	f53f af12 	bmi.w	800c584 <_vfiprintf_r+0x4c>
 800c760:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c762:	e711      	b.n	800c588 <_vfiprintf_r+0x50>
 800c764:	ab03      	add	r3, sp, #12
 800c766:	9300      	str	r3, [sp, #0]
 800c768:	462a      	mov	r2, r5
 800c76a:	4b09      	ldr	r3, [pc, #36]	; (800c790 <_vfiprintf_r+0x258>)
 800c76c:	a904      	add	r1, sp, #16
 800c76e:	4630      	mov	r0, r6
 800c770:	f000 f880 	bl	800c874 <_printf_i>
 800c774:	e7e4      	b.n	800c740 <_vfiprintf_r+0x208>
 800c776:	bf00      	nop
 800c778:	0800d624 	.word	0x0800d624
 800c77c:	0800d644 	.word	0x0800d644
 800c780:	0800d604 	.word	0x0800d604
 800c784:	0800d5ce 	.word	0x0800d5ce
 800c788:	0800d5d8 	.word	0x0800d5d8
 800c78c:	00000000 	.word	0x00000000
 800c790:	0800c513 	.word	0x0800c513
 800c794:	0800d5d4 	.word	0x0800d5d4

0800c798 <_printf_common>:
 800c798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c79c:	4616      	mov	r6, r2
 800c79e:	4699      	mov	r9, r3
 800c7a0:	688a      	ldr	r2, [r1, #8]
 800c7a2:	690b      	ldr	r3, [r1, #16]
 800c7a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	bfb8      	it	lt
 800c7ac:	4613      	movlt	r3, r2
 800c7ae:	6033      	str	r3, [r6, #0]
 800c7b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c7b4:	4607      	mov	r7, r0
 800c7b6:	460c      	mov	r4, r1
 800c7b8:	b10a      	cbz	r2, 800c7be <_printf_common+0x26>
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	6033      	str	r3, [r6, #0]
 800c7be:	6823      	ldr	r3, [r4, #0]
 800c7c0:	0699      	lsls	r1, r3, #26
 800c7c2:	bf42      	ittt	mi
 800c7c4:	6833      	ldrmi	r3, [r6, #0]
 800c7c6:	3302      	addmi	r3, #2
 800c7c8:	6033      	strmi	r3, [r6, #0]
 800c7ca:	6825      	ldr	r5, [r4, #0]
 800c7cc:	f015 0506 	ands.w	r5, r5, #6
 800c7d0:	d106      	bne.n	800c7e0 <_printf_common+0x48>
 800c7d2:	f104 0a19 	add.w	sl, r4, #25
 800c7d6:	68e3      	ldr	r3, [r4, #12]
 800c7d8:	6832      	ldr	r2, [r6, #0]
 800c7da:	1a9b      	subs	r3, r3, r2
 800c7dc:	42ab      	cmp	r3, r5
 800c7de:	dc26      	bgt.n	800c82e <_printf_common+0x96>
 800c7e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c7e4:	1e13      	subs	r3, r2, #0
 800c7e6:	6822      	ldr	r2, [r4, #0]
 800c7e8:	bf18      	it	ne
 800c7ea:	2301      	movne	r3, #1
 800c7ec:	0692      	lsls	r2, r2, #26
 800c7ee:	d42b      	bmi.n	800c848 <_printf_common+0xb0>
 800c7f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7f4:	4649      	mov	r1, r9
 800c7f6:	4638      	mov	r0, r7
 800c7f8:	47c0      	blx	r8
 800c7fa:	3001      	adds	r0, #1
 800c7fc:	d01e      	beq.n	800c83c <_printf_common+0xa4>
 800c7fe:	6823      	ldr	r3, [r4, #0]
 800c800:	68e5      	ldr	r5, [r4, #12]
 800c802:	6832      	ldr	r2, [r6, #0]
 800c804:	f003 0306 	and.w	r3, r3, #6
 800c808:	2b04      	cmp	r3, #4
 800c80a:	bf08      	it	eq
 800c80c:	1aad      	subeq	r5, r5, r2
 800c80e:	68a3      	ldr	r3, [r4, #8]
 800c810:	6922      	ldr	r2, [r4, #16]
 800c812:	bf0c      	ite	eq
 800c814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c818:	2500      	movne	r5, #0
 800c81a:	4293      	cmp	r3, r2
 800c81c:	bfc4      	itt	gt
 800c81e:	1a9b      	subgt	r3, r3, r2
 800c820:	18ed      	addgt	r5, r5, r3
 800c822:	2600      	movs	r6, #0
 800c824:	341a      	adds	r4, #26
 800c826:	42b5      	cmp	r5, r6
 800c828:	d11a      	bne.n	800c860 <_printf_common+0xc8>
 800c82a:	2000      	movs	r0, #0
 800c82c:	e008      	b.n	800c840 <_printf_common+0xa8>
 800c82e:	2301      	movs	r3, #1
 800c830:	4652      	mov	r2, sl
 800c832:	4649      	mov	r1, r9
 800c834:	4638      	mov	r0, r7
 800c836:	47c0      	blx	r8
 800c838:	3001      	adds	r0, #1
 800c83a:	d103      	bne.n	800c844 <_printf_common+0xac>
 800c83c:	f04f 30ff 	mov.w	r0, #4294967295
 800c840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c844:	3501      	adds	r5, #1
 800c846:	e7c6      	b.n	800c7d6 <_printf_common+0x3e>
 800c848:	18e1      	adds	r1, r4, r3
 800c84a:	1c5a      	adds	r2, r3, #1
 800c84c:	2030      	movs	r0, #48	; 0x30
 800c84e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c852:	4422      	add	r2, r4
 800c854:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c858:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c85c:	3302      	adds	r3, #2
 800c85e:	e7c7      	b.n	800c7f0 <_printf_common+0x58>
 800c860:	2301      	movs	r3, #1
 800c862:	4622      	mov	r2, r4
 800c864:	4649      	mov	r1, r9
 800c866:	4638      	mov	r0, r7
 800c868:	47c0      	blx	r8
 800c86a:	3001      	adds	r0, #1
 800c86c:	d0e6      	beq.n	800c83c <_printf_common+0xa4>
 800c86e:	3601      	adds	r6, #1
 800c870:	e7d9      	b.n	800c826 <_printf_common+0x8e>
	...

0800c874 <_printf_i>:
 800c874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c878:	460c      	mov	r4, r1
 800c87a:	4691      	mov	r9, r2
 800c87c:	7e27      	ldrb	r7, [r4, #24]
 800c87e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c880:	2f78      	cmp	r7, #120	; 0x78
 800c882:	4680      	mov	r8, r0
 800c884:	469a      	mov	sl, r3
 800c886:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c88a:	d807      	bhi.n	800c89c <_printf_i+0x28>
 800c88c:	2f62      	cmp	r7, #98	; 0x62
 800c88e:	d80a      	bhi.n	800c8a6 <_printf_i+0x32>
 800c890:	2f00      	cmp	r7, #0
 800c892:	f000 80d8 	beq.w	800ca46 <_printf_i+0x1d2>
 800c896:	2f58      	cmp	r7, #88	; 0x58
 800c898:	f000 80a3 	beq.w	800c9e2 <_printf_i+0x16e>
 800c89c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c8a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c8a4:	e03a      	b.n	800c91c <_printf_i+0xa8>
 800c8a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c8aa:	2b15      	cmp	r3, #21
 800c8ac:	d8f6      	bhi.n	800c89c <_printf_i+0x28>
 800c8ae:	a001      	add	r0, pc, #4	; (adr r0, 800c8b4 <_printf_i+0x40>)
 800c8b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c8b4:	0800c90d 	.word	0x0800c90d
 800c8b8:	0800c921 	.word	0x0800c921
 800c8bc:	0800c89d 	.word	0x0800c89d
 800c8c0:	0800c89d 	.word	0x0800c89d
 800c8c4:	0800c89d 	.word	0x0800c89d
 800c8c8:	0800c89d 	.word	0x0800c89d
 800c8cc:	0800c921 	.word	0x0800c921
 800c8d0:	0800c89d 	.word	0x0800c89d
 800c8d4:	0800c89d 	.word	0x0800c89d
 800c8d8:	0800c89d 	.word	0x0800c89d
 800c8dc:	0800c89d 	.word	0x0800c89d
 800c8e0:	0800ca2d 	.word	0x0800ca2d
 800c8e4:	0800c951 	.word	0x0800c951
 800c8e8:	0800ca0f 	.word	0x0800ca0f
 800c8ec:	0800c89d 	.word	0x0800c89d
 800c8f0:	0800c89d 	.word	0x0800c89d
 800c8f4:	0800ca4f 	.word	0x0800ca4f
 800c8f8:	0800c89d 	.word	0x0800c89d
 800c8fc:	0800c951 	.word	0x0800c951
 800c900:	0800c89d 	.word	0x0800c89d
 800c904:	0800c89d 	.word	0x0800c89d
 800c908:	0800ca17 	.word	0x0800ca17
 800c90c:	680b      	ldr	r3, [r1, #0]
 800c90e:	1d1a      	adds	r2, r3, #4
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	600a      	str	r2, [r1, #0]
 800c914:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c91c:	2301      	movs	r3, #1
 800c91e:	e0a3      	b.n	800ca68 <_printf_i+0x1f4>
 800c920:	6825      	ldr	r5, [r4, #0]
 800c922:	6808      	ldr	r0, [r1, #0]
 800c924:	062e      	lsls	r6, r5, #24
 800c926:	f100 0304 	add.w	r3, r0, #4
 800c92a:	d50a      	bpl.n	800c942 <_printf_i+0xce>
 800c92c:	6805      	ldr	r5, [r0, #0]
 800c92e:	600b      	str	r3, [r1, #0]
 800c930:	2d00      	cmp	r5, #0
 800c932:	da03      	bge.n	800c93c <_printf_i+0xc8>
 800c934:	232d      	movs	r3, #45	; 0x2d
 800c936:	426d      	negs	r5, r5
 800c938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c93c:	485e      	ldr	r0, [pc, #376]	; (800cab8 <_printf_i+0x244>)
 800c93e:	230a      	movs	r3, #10
 800c940:	e019      	b.n	800c976 <_printf_i+0x102>
 800c942:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c946:	6805      	ldr	r5, [r0, #0]
 800c948:	600b      	str	r3, [r1, #0]
 800c94a:	bf18      	it	ne
 800c94c:	b22d      	sxthne	r5, r5
 800c94e:	e7ef      	b.n	800c930 <_printf_i+0xbc>
 800c950:	680b      	ldr	r3, [r1, #0]
 800c952:	6825      	ldr	r5, [r4, #0]
 800c954:	1d18      	adds	r0, r3, #4
 800c956:	6008      	str	r0, [r1, #0]
 800c958:	0628      	lsls	r0, r5, #24
 800c95a:	d501      	bpl.n	800c960 <_printf_i+0xec>
 800c95c:	681d      	ldr	r5, [r3, #0]
 800c95e:	e002      	b.n	800c966 <_printf_i+0xf2>
 800c960:	0669      	lsls	r1, r5, #25
 800c962:	d5fb      	bpl.n	800c95c <_printf_i+0xe8>
 800c964:	881d      	ldrh	r5, [r3, #0]
 800c966:	4854      	ldr	r0, [pc, #336]	; (800cab8 <_printf_i+0x244>)
 800c968:	2f6f      	cmp	r7, #111	; 0x6f
 800c96a:	bf0c      	ite	eq
 800c96c:	2308      	moveq	r3, #8
 800c96e:	230a      	movne	r3, #10
 800c970:	2100      	movs	r1, #0
 800c972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c976:	6866      	ldr	r6, [r4, #4]
 800c978:	60a6      	str	r6, [r4, #8]
 800c97a:	2e00      	cmp	r6, #0
 800c97c:	bfa2      	ittt	ge
 800c97e:	6821      	ldrge	r1, [r4, #0]
 800c980:	f021 0104 	bicge.w	r1, r1, #4
 800c984:	6021      	strge	r1, [r4, #0]
 800c986:	b90d      	cbnz	r5, 800c98c <_printf_i+0x118>
 800c988:	2e00      	cmp	r6, #0
 800c98a:	d04d      	beq.n	800ca28 <_printf_i+0x1b4>
 800c98c:	4616      	mov	r6, r2
 800c98e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c992:	fb03 5711 	mls	r7, r3, r1, r5
 800c996:	5dc7      	ldrb	r7, [r0, r7]
 800c998:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c99c:	462f      	mov	r7, r5
 800c99e:	42bb      	cmp	r3, r7
 800c9a0:	460d      	mov	r5, r1
 800c9a2:	d9f4      	bls.n	800c98e <_printf_i+0x11a>
 800c9a4:	2b08      	cmp	r3, #8
 800c9a6:	d10b      	bne.n	800c9c0 <_printf_i+0x14c>
 800c9a8:	6823      	ldr	r3, [r4, #0]
 800c9aa:	07df      	lsls	r7, r3, #31
 800c9ac:	d508      	bpl.n	800c9c0 <_printf_i+0x14c>
 800c9ae:	6923      	ldr	r3, [r4, #16]
 800c9b0:	6861      	ldr	r1, [r4, #4]
 800c9b2:	4299      	cmp	r1, r3
 800c9b4:	bfde      	ittt	le
 800c9b6:	2330      	movle	r3, #48	; 0x30
 800c9b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c9bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c9c0:	1b92      	subs	r2, r2, r6
 800c9c2:	6122      	str	r2, [r4, #16]
 800c9c4:	f8cd a000 	str.w	sl, [sp]
 800c9c8:	464b      	mov	r3, r9
 800c9ca:	aa03      	add	r2, sp, #12
 800c9cc:	4621      	mov	r1, r4
 800c9ce:	4640      	mov	r0, r8
 800c9d0:	f7ff fee2 	bl	800c798 <_printf_common>
 800c9d4:	3001      	adds	r0, #1
 800c9d6:	d14c      	bne.n	800ca72 <_printf_i+0x1fe>
 800c9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9dc:	b004      	add	sp, #16
 800c9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9e2:	4835      	ldr	r0, [pc, #212]	; (800cab8 <_printf_i+0x244>)
 800c9e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c9e8:	6823      	ldr	r3, [r4, #0]
 800c9ea:	680e      	ldr	r6, [r1, #0]
 800c9ec:	061f      	lsls	r7, r3, #24
 800c9ee:	f856 5b04 	ldr.w	r5, [r6], #4
 800c9f2:	600e      	str	r6, [r1, #0]
 800c9f4:	d514      	bpl.n	800ca20 <_printf_i+0x1ac>
 800c9f6:	07d9      	lsls	r1, r3, #31
 800c9f8:	bf44      	itt	mi
 800c9fa:	f043 0320 	orrmi.w	r3, r3, #32
 800c9fe:	6023      	strmi	r3, [r4, #0]
 800ca00:	b91d      	cbnz	r5, 800ca0a <_printf_i+0x196>
 800ca02:	6823      	ldr	r3, [r4, #0]
 800ca04:	f023 0320 	bic.w	r3, r3, #32
 800ca08:	6023      	str	r3, [r4, #0]
 800ca0a:	2310      	movs	r3, #16
 800ca0c:	e7b0      	b.n	800c970 <_printf_i+0xfc>
 800ca0e:	6823      	ldr	r3, [r4, #0]
 800ca10:	f043 0320 	orr.w	r3, r3, #32
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	2378      	movs	r3, #120	; 0x78
 800ca18:	4828      	ldr	r0, [pc, #160]	; (800cabc <_printf_i+0x248>)
 800ca1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca1e:	e7e3      	b.n	800c9e8 <_printf_i+0x174>
 800ca20:	065e      	lsls	r6, r3, #25
 800ca22:	bf48      	it	mi
 800ca24:	b2ad      	uxthmi	r5, r5
 800ca26:	e7e6      	b.n	800c9f6 <_printf_i+0x182>
 800ca28:	4616      	mov	r6, r2
 800ca2a:	e7bb      	b.n	800c9a4 <_printf_i+0x130>
 800ca2c:	680b      	ldr	r3, [r1, #0]
 800ca2e:	6826      	ldr	r6, [r4, #0]
 800ca30:	6960      	ldr	r0, [r4, #20]
 800ca32:	1d1d      	adds	r5, r3, #4
 800ca34:	600d      	str	r5, [r1, #0]
 800ca36:	0635      	lsls	r5, r6, #24
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	d501      	bpl.n	800ca40 <_printf_i+0x1cc>
 800ca3c:	6018      	str	r0, [r3, #0]
 800ca3e:	e002      	b.n	800ca46 <_printf_i+0x1d2>
 800ca40:	0671      	lsls	r1, r6, #25
 800ca42:	d5fb      	bpl.n	800ca3c <_printf_i+0x1c8>
 800ca44:	8018      	strh	r0, [r3, #0]
 800ca46:	2300      	movs	r3, #0
 800ca48:	6123      	str	r3, [r4, #16]
 800ca4a:	4616      	mov	r6, r2
 800ca4c:	e7ba      	b.n	800c9c4 <_printf_i+0x150>
 800ca4e:	680b      	ldr	r3, [r1, #0]
 800ca50:	1d1a      	adds	r2, r3, #4
 800ca52:	600a      	str	r2, [r1, #0]
 800ca54:	681e      	ldr	r6, [r3, #0]
 800ca56:	6862      	ldr	r2, [r4, #4]
 800ca58:	2100      	movs	r1, #0
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	f7f3 fc40 	bl	80002e0 <memchr>
 800ca60:	b108      	cbz	r0, 800ca66 <_printf_i+0x1f2>
 800ca62:	1b80      	subs	r0, r0, r6
 800ca64:	6060      	str	r0, [r4, #4]
 800ca66:	6863      	ldr	r3, [r4, #4]
 800ca68:	6123      	str	r3, [r4, #16]
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca70:	e7a8      	b.n	800c9c4 <_printf_i+0x150>
 800ca72:	6923      	ldr	r3, [r4, #16]
 800ca74:	4632      	mov	r2, r6
 800ca76:	4649      	mov	r1, r9
 800ca78:	4640      	mov	r0, r8
 800ca7a:	47d0      	blx	sl
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	d0ab      	beq.n	800c9d8 <_printf_i+0x164>
 800ca80:	6823      	ldr	r3, [r4, #0]
 800ca82:	079b      	lsls	r3, r3, #30
 800ca84:	d413      	bmi.n	800caae <_printf_i+0x23a>
 800ca86:	68e0      	ldr	r0, [r4, #12]
 800ca88:	9b03      	ldr	r3, [sp, #12]
 800ca8a:	4298      	cmp	r0, r3
 800ca8c:	bfb8      	it	lt
 800ca8e:	4618      	movlt	r0, r3
 800ca90:	e7a4      	b.n	800c9dc <_printf_i+0x168>
 800ca92:	2301      	movs	r3, #1
 800ca94:	4632      	mov	r2, r6
 800ca96:	4649      	mov	r1, r9
 800ca98:	4640      	mov	r0, r8
 800ca9a:	47d0      	blx	sl
 800ca9c:	3001      	adds	r0, #1
 800ca9e:	d09b      	beq.n	800c9d8 <_printf_i+0x164>
 800caa0:	3501      	adds	r5, #1
 800caa2:	68e3      	ldr	r3, [r4, #12]
 800caa4:	9903      	ldr	r1, [sp, #12]
 800caa6:	1a5b      	subs	r3, r3, r1
 800caa8:	42ab      	cmp	r3, r5
 800caaa:	dcf2      	bgt.n	800ca92 <_printf_i+0x21e>
 800caac:	e7eb      	b.n	800ca86 <_printf_i+0x212>
 800caae:	2500      	movs	r5, #0
 800cab0:	f104 0619 	add.w	r6, r4, #25
 800cab4:	e7f5      	b.n	800caa2 <_printf_i+0x22e>
 800cab6:	bf00      	nop
 800cab8:	0800d5df 	.word	0x0800d5df
 800cabc:	0800d5f0 	.word	0x0800d5f0

0800cac0 <__swbuf_r>:
 800cac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac2:	460e      	mov	r6, r1
 800cac4:	4614      	mov	r4, r2
 800cac6:	4605      	mov	r5, r0
 800cac8:	b118      	cbz	r0, 800cad2 <__swbuf_r+0x12>
 800caca:	6983      	ldr	r3, [r0, #24]
 800cacc:	b90b      	cbnz	r3, 800cad2 <__swbuf_r+0x12>
 800cace:	f000 f9d9 	bl	800ce84 <__sinit>
 800cad2:	4b21      	ldr	r3, [pc, #132]	; (800cb58 <__swbuf_r+0x98>)
 800cad4:	429c      	cmp	r4, r3
 800cad6:	d12b      	bne.n	800cb30 <__swbuf_r+0x70>
 800cad8:	686c      	ldr	r4, [r5, #4]
 800cada:	69a3      	ldr	r3, [r4, #24]
 800cadc:	60a3      	str	r3, [r4, #8]
 800cade:	89a3      	ldrh	r3, [r4, #12]
 800cae0:	071a      	lsls	r2, r3, #28
 800cae2:	d52f      	bpl.n	800cb44 <__swbuf_r+0x84>
 800cae4:	6923      	ldr	r3, [r4, #16]
 800cae6:	b36b      	cbz	r3, 800cb44 <__swbuf_r+0x84>
 800cae8:	6923      	ldr	r3, [r4, #16]
 800caea:	6820      	ldr	r0, [r4, #0]
 800caec:	1ac0      	subs	r0, r0, r3
 800caee:	6963      	ldr	r3, [r4, #20]
 800caf0:	b2f6      	uxtb	r6, r6
 800caf2:	4283      	cmp	r3, r0
 800caf4:	4637      	mov	r7, r6
 800caf6:	dc04      	bgt.n	800cb02 <__swbuf_r+0x42>
 800caf8:	4621      	mov	r1, r4
 800cafa:	4628      	mov	r0, r5
 800cafc:	f000 f92e 	bl	800cd5c <_fflush_r>
 800cb00:	bb30      	cbnz	r0, 800cb50 <__swbuf_r+0x90>
 800cb02:	68a3      	ldr	r3, [r4, #8]
 800cb04:	3b01      	subs	r3, #1
 800cb06:	60a3      	str	r3, [r4, #8]
 800cb08:	6823      	ldr	r3, [r4, #0]
 800cb0a:	1c5a      	adds	r2, r3, #1
 800cb0c:	6022      	str	r2, [r4, #0]
 800cb0e:	701e      	strb	r6, [r3, #0]
 800cb10:	6963      	ldr	r3, [r4, #20]
 800cb12:	3001      	adds	r0, #1
 800cb14:	4283      	cmp	r3, r0
 800cb16:	d004      	beq.n	800cb22 <__swbuf_r+0x62>
 800cb18:	89a3      	ldrh	r3, [r4, #12]
 800cb1a:	07db      	lsls	r3, r3, #31
 800cb1c:	d506      	bpl.n	800cb2c <__swbuf_r+0x6c>
 800cb1e:	2e0a      	cmp	r6, #10
 800cb20:	d104      	bne.n	800cb2c <__swbuf_r+0x6c>
 800cb22:	4621      	mov	r1, r4
 800cb24:	4628      	mov	r0, r5
 800cb26:	f000 f919 	bl	800cd5c <_fflush_r>
 800cb2a:	b988      	cbnz	r0, 800cb50 <__swbuf_r+0x90>
 800cb2c:	4638      	mov	r0, r7
 800cb2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb30:	4b0a      	ldr	r3, [pc, #40]	; (800cb5c <__swbuf_r+0x9c>)
 800cb32:	429c      	cmp	r4, r3
 800cb34:	d101      	bne.n	800cb3a <__swbuf_r+0x7a>
 800cb36:	68ac      	ldr	r4, [r5, #8]
 800cb38:	e7cf      	b.n	800cada <__swbuf_r+0x1a>
 800cb3a:	4b09      	ldr	r3, [pc, #36]	; (800cb60 <__swbuf_r+0xa0>)
 800cb3c:	429c      	cmp	r4, r3
 800cb3e:	bf08      	it	eq
 800cb40:	68ec      	ldreq	r4, [r5, #12]
 800cb42:	e7ca      	b.n	800cada <__swbuf_r+0x1a>
 800cb44:	4621      	mov	r1, r4
 800cb46:	4628      	mov	r0, r5
 800cb48:	f000 f80c 	bl	800cb64 <__swsetup_r>
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	d0cb      	beq.n	800cae8 <__swbuf_r+0x28>
 800cb50:	f04f 37ff 	mov.w	r7, #4294967295
 800cb54:	e7ea      	b.n	800cb2c <__swbuf_r+0x6c>
 800cb56:	bf00      	nop
 800cb58:	0800d624 	.word	0x0800d624
 800cb5c:	0800d644 	.word	0x0800d644
 800cb60:	0800d604 	.word	0x0800d604

0800cb64 <__swsetup_r>:
 800cb64:	4b32      	ldr	r3, [pc, #200]	; (800cc30 <__swsetup_r+0xcc>)
 800cb66:	b570      	push	{r4, r5, r6, lr}
 800cb68:	681d      	ldr	r5, [r3, #0]
 800cb6a:	4606      	mov	r6, r0
 800cb6c:	460c      	mov	r4, r1
 800cb6e:	b125      	cbz	r5, 800cb7a <__swsetup_r+0x16>
 800cb70:	69ab      	ldr	r3, [r5, #24]
 800cb72:	b913      	cbnz	r3, 800cb7a <__swsetup_r+0x16>
 800cb74:	4628      	mov	r0, r5
 800cb76:	f000 f985 	bl	800ce84 <__sinit>
 800cb7a:	4b2e      	ldr	r3, [pc, #184]	; (800cc34 <__swsetup_r+0xd0>)
 800cb7c:	429c      	cmp	r4, r3
 800cb7e:	d10f      	bne.n	800cba0 <__swsetup_r+0x3c>
 800cb80:	686c      	ldr	r4, [r5, #4]
 800cb82:	89a3      	ldrh	r3, [r4, #12]
 800cb84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb88:	0719      	lsls	r1, r3, #28
 800cb8a:	d42c      	bmi.n	800cbe6 <__swsetup_r+0x82>
 800cb8c:	06dd      	lsls	r5, r3, #27
 800cb8e:	d411      	bmi.n	800cbb4 <__swsetup_r+0x50>
 800cb90:	2309      	movs	r3, #9
 800cb92:	6033      	str	r3, [r6, #0]
 800cb94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb98:	81a3      	strh	r3, [r4, #12]
 800cb9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb9e:	e03e      	b.n	800cc1e <__swsetup_r+0xba>
 800cba0:	4b25      	ldr	r3, [pc, #148]	; (800cc38 <__swsetup_r+0xd4>)
 800cba2:	429c      	cmp	r4, r3
 800cba4:	d101      	bne.n	800cbaa <__swsetup_r+0x46>
 800cba6:	68ac      	ldr	r4, [r5, #8]
 800cba8:	e7eb      	b.n	800cb82 <__swsetup_r+0x1e>
 800cbaa:	4b24      	ldr	r3, [pc, #144]	; (800cc3c <__swsetup_r+0xd8>)
 800cbac:	429c      	cmp	r4, r3
 800cbae:	bf08      	it	eq
 800cbb0:	68ec      	ldreq	r4, [r5, #12]
 800cbb2:	e7e6      	b.n	800cb82 <__swsetup_r+0x1e>
 800cbb4:	0758      	lsls	r0, r3, #29
 800cbb6:	d512      	bpl.n	800cbde <__swsetup_r+0x7a>
 800cbb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbba:	b141      	cbz	r1, 800cbce <__swsetup_r+0x6a>
 800cbbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbc0:	4299      	cmp	r1, r3
 800cbc2:	d002      	beq.n	800cbca <__swsetup_r+0x66>
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	f7ff fc3d 	bl	800c444 <_free_r>
 800cbca:	2300      	movs	r3, #0
 800cbcc:	6363      	str	r3, [r4, #52]	; 0x34
 800cbce:	89a3      	ldrh	r3, [r4, #12]
 800cbd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cbd4:	81a3      	strh	r3, [r4, #12]
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	6063      	str	r3, [r4, #4]
 800cbda:	6923      	ldr	r3, [r4, #16]
 800cbdc:	6023      	str	r3, [r4, #0]
 800cbde:	89a3      	ldrh	r3, [r4, #12]
 800cbe0:	f043 0308 	orr.w	r3, r3, #8
 800cbe4:	81a3      	strh	r3, [r4, #12]
 800cbe6:	6923      	ldr	r3, [r4, #16]
 800cbe8:	b94b      	cbnz	r3, 800cbfe <__swsetup_r+0x9a>
 800cbea:	89a3      	ldrh	r3, [r4, #12]
 800cbec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cbf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbf4:	d003      	beq.n	800cbfe <__swsetup_r+0x9a>
 800cbf6:	4621      	mov	r1, r4
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	f000 fa07 	bl	800d00c <__smakebuf_r>
 800cbfe:	89a0      	ldrh	r0, [r4, #12]
 800cc00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc04:	f010 0301 	ands.w	r3, r0, #1
 800cc08:	d00a      	beq.n	800cc20 <__swsetup_r+0xbc>
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	60a3      	str	r3, [r4, #8]
 800cc0e:	6963      	ldr	r3, [r4, #20]
 800cc10:	425b      	negs	r3, r3
 800cc12:	61a3      	str	r3, [r4, #24]
 800cc14:	6923      	ldr	r3, [r4, #16]
 800cc16:	b943      	cbnz	r3, 800cc2a <__swsetup_r+0xc6>
 800cc18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc1c:	d1ba      	bne.n	800cb94 <__swsetup_r+0x30>
 800cc1e:	bd70      	pop	{r4, r5, r6, pc}
 800cc20:	0781      	lsls	r1, r0, #30
 800cc22:	bf58      	it	pl
 800cc24:	6963      	ldrpl	r3, [r4, #20]
 800cc26:	60a3      	str	r3, [r4, #8]
 800cc28:	e7f4      	b.n	800cc14 <__swsetup_r+0xb0>
 800cc2a:	2000      	movs	r0, #0
 800cc2c:	e7f7      	b.n	800cc1e <__swsetup_r+0xba>
 800cc2e:	bf00      	nop
 800cc30:	240010a4 	.word	0x240010a4
 800cc34:	0800d624 	.word	0x0800d624
 800cc38:	0800d644 	.word	0x0800d644
 800cc3c:	0800d604 	.word	0x0800d604

0800cc40 <abort>:
 800cc40:	b508      	push	{r3, lr}
 800cc42:	2006      	movs	r0, #6
 800cc44:	f000 fa4a 	bl	800d0dc <raise>
 800cc48:	2001      	movs	r0, #1
 800cc4a:	f7f4 f997 	bl	8000f7c <_exit>
	...

0800cc50 <__sflush_r>:
 800cc50:	898a      	ldrh	r2, [r1, #12]
 800cc52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc56:	4605      	mov	r5, r0
 800cc58:	0710      	lsls	r0, r2, #28
 800cc5a:	460c      	mov	r4, r1
 800cc5c:	d458      	bmi.n	800cd10 <__sflush_r+0xc0>
 800cc5e:	684b      	ldr	r3, [r1, #4]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	dc05      	bgt.n	800cc70 <__sflush_r+0x20>
 800cc64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	dc02      	bgt.n	800cc70 <__sflush_r+0x20>
 800cc6a:	2000      	movs	r0, #0
 800cc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc72:	2e00      	cmp	r6, #0
 800cc74:	d0f9      	beq.n	800cc6a <__sflush_r+0x1a>
 800cc76:	2300      	movs	r3, #0
 800cc78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc7c:	682f      	ldr	r7, [r5, #0]
 800cc7e:	602b      	str	r3, [r5, #0]
 800cc80:	d032      	beq.n	800cce8 <__sflush_r+0x98>
 800cc82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc84:	89a3      	ldrh	r3, [r4, #12]
 800cc86:	075a      	lsls	r2, r3, #29
 800cc88:	d505      	bpl.n	800cc96 <__sflush_r+0x46>
 800cc8a:	6863      	ldr	r3, [r4, #4]
 800cc8c:	1ac0      	subs	r0, r0, r3
 800cc8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc90:	b10b      	cbz	r3, 800cc96 <__sflush_r+0x46>
 800cc92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc94:	1ac0      	subs	r0, r0, r3
 800cc96:	2300      	movs	r3, #0
 800cc98:	4602      	mov	r2, r0
 800cc9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc9c:	6a21      	ldr	r1, [r4, #32]
 800cc9e:	4628      	mov	r0, r5
 800cca0:	47b0      	blx	r6
 800cca2:	1c43      	adds	r3, r0, #1
 800cca4:	89a3      	ldrh	r3, [r4, #12]
 800cca6:	d106      	bne.n	800ccb6 <__sflush_r+0x66>
 800cca8:	6829      	ldr	r1, [r5, #0]
 800ccaa:	291d      	cmp	r1, #29
 800ccac:	d82c      	bhi.n	800cd08 <__sflush_r+0xb8>
 800ccae:	4a2a      	ldr	r2, [pc, #168]	; (800cd58 <__sflush_r+0x108>)
 800ccb0:	40ca      	lsrs	r2, r1
 800ccb2:	07d6      	lsls	r6, r2, #31
 800ccb4:	d528      	bpl.n	800cd08 <__sflush_r+0xb8>
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	6062      	str	r2, [r4, #4]
 800ccba:	04d9      	lsls	r1, r3, #19
 800ccbc:	6922      	ldr	r2, [r4, #16]
 800ccbe:	6022      	str	r2, [r4, #0]
 800ccc0:	d504      	bpl.n	800cccc <__sflush_r+0x7c>
 800ccc2:	1c42      	adds	r2, r0, #1
 800ccc4:	d101      	bne.n	800ccca <__sflush_r+0x7a>
 800ccc6:	682b      	ldr	r3, [r5, #0]
 800ccc8:	b903      	cbnz	r3, 800cccc <__sflush_r+0x7c>
 800ccca:	6560      	str	r0, [r4, #84]	; 0x54
 800cccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccce:	602f      	str	r7, [r5, #0]
 800ccd0:	2900      	cmp	r1, #0
 800ccd2:	d0ca      	beq.n	800cc6a <__sflush_r+0x1a>
 800ccd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccd8:	4299      	cmp	r1, r3
 800ccda:	d002      	beq.n	800cce2 <__sflush_r+0x92>
 800ccdc:	4628      	mov	r0, r5
 800ccde:	f7ff fbb1 	bl	800c444 <_free_r>
 800cce2:	2000      	movs	r0, #0
 800cce4:	6360      	str	r0, [r4, #52]	; 0x34
 800cce6:	e7c1      	b.n	800cc6c <__sflush_r+0x1c>
 800cce8:	6a21      	ldr	r1, [r4, #32]
 800ccea:	2301      	movs	r3, #1
 800ccec:	4628      	mov	r0, r5
 800ccee:	47b0      	blx	r6
 800ccf0:	1c41      	adds	r1, r0, #1
 800ccf2:	d1c7      	bne.n	800cc84 <__sflush_r+0x34>
 800ccf4:	682b      	ldr	r3, [r5, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d0c4      	beq.n	800cc84 <__sflush_r+0x34>
 800ccfa:	2b1d      	cmp	r3, #29
 800ccfc:	d001      	beq.n	800cd02 <__sflush_r+0xb2>
 800ccfe:	2b16      	cmp	r3, #22
 800cd00:	d101      	bne.n	800cd06 <__sflush_r+0xb6>
 800cd02:	602f      	str	r7, [r5, #0]
 800cd04:	e7b1      	b.n	800cc6a <__sflush_r+0x1a>
 800cd06:	89a3      	ldrh	r3, [r4, #12]
 800cd08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd0c:	81a3      	strh	r3, [r4, #12]
 800cd0e:	e7ad      	b.n	800cc6c <__sflush_r+0x1c>
 800cd10:	690f      	ldr	r7, [r1, #16]
 800cd12:	2f00      	cmp	r7, #0
 800cd14:	d0a9      	beq.n	800cc6a <__sflush_r+0x1a>
 800cd16:	0793      	lsls	r3, r2, #30
 800cd18:	680e      	ldr	r6, [r1, #0]
 800cd1a:	bf08      	it	eq
 800cd1c:	694b      	ldreq	r3, [r1, #20]
 800cd1e:	600f      	str	r7, [r1, #0]
 800cd20:	bf18      	it	ne
 800cd22:	2300      	movne	r3, #0
 800cd24:	eba6 0807 	sub.w	r8, r6, r7
 800cd28:	608b      	str	r3, [r1, #8]
 800cd2a:	f1b8 0f00 	cmp.w	r8, #0
 800cd2e:	dd9c      	ble.n	800cc6a <__sflush_r+0x1a>
 800cd30:	6a21      	ldr	r1, [r4, #32]
 800cd32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd34:	4643      	mov	r3, r8
 800cd36:	463a      	mov	r2, r7
 800cd38:	4628      	mov	r0, r5
 800cd3a:	47b0      	blx	r6
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	dc06      	bgt.n	800cd4e <__sflush_r+0xfe>
 800cd40:	89a3      	ldrh	r3, [r4, #12]
 800cd42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd46:	81a3      	strh	r3, [r4, #12]
 800cd48:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4c:	e78e      	b.n	800cc6c <__sflush_r+0x1c>
 800cd4e:	4407      	add	r7, r0
 800cd50:	eba8 0800 	sub.w	r8, r8, r0
 800cd54:	e7e9      	b.n	800cd2a <__sflush_r+0xda>
 800cd56:	bf00      	nop
 800cd58:	20400001 	.word	0x20400001

0800cd5c <_fflush_r>:
 800cd5c:	b538      	push	{r3, r4, r5, lr}
 800cd5e:	690b      	ldr	r3, [r1, #16]
 800cd60:	4605      	mov	r5, r0
 800cd62:	460c      	mov	r4, r1
 800cd64:	b913      	cbnz	r3, 800cd6c <_fflush_r+0x10>
 800cd66:	2500      	movs	r5, #0
 800cd68:	4628      	mov	r0, r5
 800cd6a:	bd38      	pop	{r3, r4, r5, pc}
 800cd6c:	b118      	cbz	r0, 800cd76 <_fflush_r+0x1a>
 800cd6e:	6983      	ldr	r3, [r0, #24]
 800cd70:	b90b      	cbnz	r3, 800cd76 <_fflush_r+0x1a>
 800cd72:	f000 f887 	bl	800ce84 <__sinit>
 800cd76:	4b14      	ldr	r3, [pc, #80]	; (800cdc8 <_fflush_r+0x6c>)
 800cd78:	429c      	cmp	r4, r3
 800cd7a:	d11b      	bne.n	800cdb4 <_fflush_r+0x58>
 800cd7c:	686c      	ldr	r4, [r5, #4]
 800cd7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d0ef      	beq.n	800cd66 <_fflush_r+0xa>
 800cd86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd88:	07d0      	lsls	r0, r2, #31
 800cd8a:	d404      	bmi.n	800cd96 <_fflush_r+0x3a>
 800cd8c:	0599      	lsls	r1, r3, #22
 800cd8e:	d402      	bmi.n	800cd96 <_fflush_r+0x3a>
 800cd90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd92:	f000 f915 	bl	800cfc0 <__retarget_lock_acquire_recursive>
 800cd96:	4628      	mov	r0, r5
 800cd98:	4621      	mov	r1, r4
 800cd9a:	f7ff ff59 	bl	800cc50 <__sflush_r>
 800cd9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cda0:	07da      	lsls	r2, r3, #31
 800cda2:	4605      	mov	r5, r0
 800cda4:	d4e0      	bmi.n	800cd68 <_fflush_r+0xc>
 800cda6:	89a3      	ldrh	r3, [r4, #12]
 800cda8:	059b      	lsls	r3, r3, #22
 800cdaa:	d4dd      	bmi.n	800cd68 <_fflush_r+0xc>
 800cdac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdae:	f000 f908 	bl	800cfc2 <__retarget_lock_release_recursive>
 800cdb2:	e7d9      	b.n	800cd68 <_fflush_r+0xc>
 800cdb4:	4b05      	ldr	r3, [pc, #20]	; (800cdcc <_fflush_r+0x70>)
 800cdb6:	429c      	cmp	r4, r3
 800cdb8:	d101      	bne.n	800cdbe <_fflush_r+0x62>
 800cdba:	68ac      	ldr	r4, [r5, #8]
 800cdbc:	e7df      	b.n	800cd7e <_fflush_r+0x22>
 800cdbe:	4b04      	ldr	r3, [pc, #16]	; (800cdd0 <_fflush_r+0x74>)
 800cdc0:	429c      	cmp	r4, r3
 800cdc2:	bf08      	it	eq
 800cdc4:	68ec      	ldreq	r4, [r5, #12]
 800cdc6:	e7da      	b.n	800cd7e <_fflush_r+0x22>
 800cdc8:	0800d624 	.word	0x0800d624
 800cdcc:	0800d644 	.word	0x0800d644
 800cdd0:	0800d604 	.word	0x0800d604

0800cdd4 <std>:
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	b510      	push	{r4, lr}
 800cdd8:	4604      	mov	r4, r0
 800cdda:	e9c0 3300 	strd	r3, r3, [r0]
 800cdde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cde2:	6083      	str	r3, [r0, #8]
 800cde4:	8181      	strh	r1, [r0, #12]
 800cde6:	6643      	str	r3, [r0, #100]	; 0x64
 800cde8:	81c2      	strh	r2, [r0, #14]
 800cdea:	6183      	str	r3, [r0, #24]
 800cdec:	4619      	mov	r1, r3
 800cdee:	2208      	movs	r2, #8
 800cdf0:	305c      	adds	r0, #92	; 0x5c
 800cdf2:	f7fd ff7b 	bl	800acec <memset>
 800cdf6:	4b05      	ldr	r3, [pc, #20]	; (800ce0c <std+0x38>)
 800cdf8:	6263      	str	r3, [r4, #36]	; 0x24
 800cdfa:	4b05      	ldr	r3, [pc, #20]	; (800ce10 <std+0x3c>)
 800cdfc:	62a3      	str	r3, [r4, #40]	; 0x28
 800cdfe:	4b05      	ldr	r3, [pc, #20]	; (800ce14 <std+0x40>)
 800ce00:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce02:	4b05      	ldr	r3, [pc, #20]	; (800ce18 <std+0x44>)
 800ce04:	6224      	str	r4, [r4, #32]
 800ce06:	6323      	str	r3, [r4, #48]	; 0x30
 800ce08:	bd10      	pop	{r4, pc}
 800ce0a:	bf00      	nop
 800ce0c:	0800d115 	.word	0x0800d115
 800ce10:	0800d137 	.word	0x0800d137
 800ce14:	0800d16f 	.word	0x0800d16f
 800ce18:	0800d193 	.word	0x0800d193

0800ce1c <_cleanup_r>:
 800ce1c:	4901      	ldr	r1, [pc, #4]	; (800ce24 <_cleanup_r+0x8>)
 800ce1e:	f000 b8af 	b.w	800cf80 <_fwalk_reent>
 800ce22:	bf00      	nop
 800ce24:	0800cd5d 	.word	0x0800cd5d

0800ce28 <__sfmoreglue>:
 800ce28:	b570      	push	{r4, r5, r6, lr}
 800ce2a:	1e4a      	subs	r2, r1, #1
 800ce2c:	2568      	movs	r5, #104	; 0x68
 800ce2e:	4355      	muls	r5, r2
 800ce30:	460e      	mov	r6, r1
 800ce32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce36:	f7fe fc31 	bl	800b69c <_malloc_r>
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	b140      	cbz	r0, 800ce50 <__sfmoreglue+0x28>
 800ce3e:	2100      	movs	r1, #0
 800ce40:	e9c0 1600 	strd	r1, r6, [r0]
 800ce44:	300c      	adds	r0, #12
 800ce46:	60a0      	str	r0, [r4, #8]
 800ce48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce4c:	f7fd ff4e 	bl	800acec <memset>
 800ce50:	4620      	mov	r0, r4
 800ce52:	bd70      	pop	{r4, r5, r6, pc}

0800ce54 <__sfp_lock_acquire>:
 800ce54:	4801      	ldr	r0, [pc, #4]	; (800ce5c <__sfp_lock_acquire+0x8>)
 800ce56:	f000 b8b3 	b.w	800cfc0 <__retarget_lock_acquire_recursive>
 800ce5a:	bf00      	nop
 800ce5c:	24001704 	.word	0x24001704

0800ce60 <__sfp_lock_release>:
 800ce60:	4801      	ldr	r0, [pc, #4]	; (800ce68 <__sfp_lock_release+0x8>)
 800ce62:	f000 b8ae 	b.w	800cfc2 <__retarget_lock_release_recursive>
 800ce66:	bf00      	nop
 800ce68:	24001704 	.word	0x24001704

0800ce6c <__sinit_lock_acquire>:
 800ce6c:	4801      	ldr	r0, [pc, #4]	; (800ce74 <__sinit_lock_acquire+0x8>)
 800ce6e:	f000 b8a7 	b.w	800cfc0 <__retarget_lock_acquire_recursive>
 800ce72:	bf00      	nop
 800ce74:	240016ff 	.word	0x240016ff

0800ce78 <__sinit_lock_release>:
 800ce78:	4801      	ldr	r0, [pc, #4]	; (800ce80 <__sinit_lock_release+0x8>)
 800ce7a:	f000 b8a2 	b.w	800cfc2 <__retarget_lock_release_recursive>
 800ce7e:	bf00      	nop
 800ce80:	240016ff 	.word	0x240016ff

0800ce84 <__sinit>:
 800ce84:	b510      	push	{r4, lr}
 800ce86:	4604      	mov	r4, r0
 800ce88:	f7ff fff0 	bl	800ce6c <__sinit_lock_acquire>
 800ce8c:	69a3      	ldr	r3, [r4, #24]
 800ce8e:	b11b      	cbz	r3, 800ce98 <__sinit+0x14>
 800ce90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce94:	f7ff bff0 	b.w	800ce78 <__sinit_lock_release>
 800ce98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce9c:	6523      	str	r3, [r4, #80]	; 0x50
 800ce9e:	4b13      	ldr	r3, [pc, #76]	; (800ceec <__sinit+0x68>)
 800cea0:	4a13      	ldr	r2, [pc, #76]	; (800cef0 <__sinit+0x6c>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	62a2      	str	r2, [r4, #40]	; 0x28
 800cea6:	42a3      	cmp	r3, r4
 800cea8:	bf04      	itt	eq
 800ceaa:	2301      	moveq	r3, #1
 800ceac:	61a3      	streq	r3, [r4, #24]
 800ceae:	4620      	mov	r0, r4
 800ceb0:	f000 f820 	bl	800cef4 <__sfp>
 800ceb4:	6060      	str	r0, [r4, #4]
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	f000 f81c 	bl	800cef4 <__sfp>
 800cebc:	60a0      	str	r0, [r4, #8]
 800cebe:	4620      	mov	r0, r4
 800cec0:	f000 f818 	bl	800cef4 <__sfp>
 800cec4:	2200      	movs	r2, #0
 800cec6:	60e0      	str	r0, [r4, #12]
 800cec8:	2104      	movs	r1, #4
 800ceca:	6860      	ldr	r0, [r4, #4]
 800cecc:	f7ff ff82 	bl	800cdd4 <std>
 800ced0:	68a0      	ldr	r0, [r4, #8]
 800ced2:	2201      	movs	r2, #1
 800ced4:	2109      	movs	r1, #9
 800ced6:	f7ff ff7d 	bl	800cdd4 <std>
 800ceda:	68e0      	ldr	r0, [r4, #12]
 800cedc:	2202      	movs	r2, #2
 800cede:	2112      	movs	r1, #18
 800cee0:	f7ff ff78 	bl	800cdd4 <std>
 800cee4:	2301      	movs	r3, #1
 800cee6:	61a3      	str	r3, [r4, #24]
 800cee8:	e7d2      	b.n	800ce90 <__sinit+0xc>
 800ceea:	bf00      	nop
 800ceec:	0800d39c 	.word	0x0800d39c
 800cef0:	0800ce1d 	.word	0x0800ce1d

0800cef4 <__sfp>:
 800cef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef6:	4607      	mov	r7, r0
 800cef8:	f7ff ffac 	bl	800ce54 <__sfp_lock_acquire>
 800cefc:	4b1e      	ldr	r3, [pc, #120]	; (800cf78 <__sfp+0x84>)
 800cefe:	681e      	ldr	r6, [r3, #0]
 800cf00:	69b3      	ldr	r3, [r6, #24]
 800cf02:	b913      	cbnz	r3, 800cf0a <__sfp+0x16>
 800cf04:	4630      	mov	r0, r6
 800cf06:	f7ff ffbd 	bl	800ce84 <__sinit>
 800cf0a:	3648      	adds	r6, #72	; 0x48
 800cf0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cf10:	3b01      	subs	r3, #1
 800cf12:	d503      	bpl.n	800cf1c <__sfp+0x28>
 800cf14:	6833      	ldr	r3, [r6, #0]
 800cf16:	b30b      	cbz	r3, 800cf5c <__sfp+0x68>
 800cf18:	6836      	ldr	r6, [r6, #0]
 800cf1a:	e7f7      	b.n	800cf0c <__sfp+0x18>
 800cf1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf20:	b9d5      	cbnz	r5, 800cf58 <__sfp+0x64>
 800cf22:	4b16      	ldr	r3, [pc, #88]	; (800cf7c <__sfp+0x88>)
 800cf24:	60e3      	str	r3, [r4, #12]
 800cf26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf2a:	6665      	str	r5, [r4, #100]	; 0x64
 800cf2c:	f000 f847 	bl	800cfbe <__retarget_lock_init_recursive>
 800cf30:	f7ff ff96 	bl	800ce60 <__sfp_lock_release>
 800cf34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf3c:	6025      	str	r5, [r4, #0]
 800cf3e:	61a5      	str	r5, [r4, #24]
 800cf40:	2208      	movs	r2, #8
 800cf42:	4629      	mov	r1, r5
 800cf44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf48:	f7fd fed0 	bl	800acec <memset>
 800cf4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf54:	4620      	mov	r0, r4
 800cf56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf58:	3468      	adds	r4, #104	; 0x68
 800cf5a:	e7d9      	b.n	800cf10 <__sfp+0x1c>
 800cf5c:	2104      	movs	r1, #4
 800cf5e:	4638      	mov	r0, r7
 800cf60:	f7ff ff62 	bl	800ce28 <__sfmoreglue>
 800cf64:	4604      	mov	r4, r0
 800cf66:	6030      	str	r0, [r6, #0]
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d1d5      	bne.n	800cf18 <__sfp+0x24>
 800cf6c:	f7ff ff78 	bl	800ce60 <__sfp_lock_release>
 800cf70:	230c      	movs	r3, #12
 800cf72:	603b      	str	r3, [r7, #0]
 800cf74:	e7ee      	b.n	800cf54 <__sfp+0x60>
 800cf76:	bf00      	nop
 800cf78:	0800d39c 	.word	0x0800d39c
 800cf7c:	ffff0001 	.word	0xffff0001

0800cf80 <_fwalk_reent>:
 800cf80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf84:	4606      	mov	r6, r0
 800cf86:	4688      	mov	r8, r1
 800cf88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf8c:	2700      	movs	r7, #0
 800cf8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf92:	f1b9 0901 	subs.w	r9, r9, #1
 800cf96:	d505      	bpl.n	800cfa4 <_fwalk_reent+0x24>
 800cf98:	6824      	ldr	r4, [r4, #0]
 800cf9a:	2c00      	cmp	r4, #0
 800cf9c:	d1f7      	bne.n	800cf8e <_fwalk_reent+0xe>
 800cf9e:	4638      	mov	r0, r7
 800cfa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfa4:	89ab      	ldrh	r3, [r5, #12]
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	d907      	bls.n	800cfba <_fwalk_reent+0x3a>
 800cfaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	d003      	beq.n	800cfba <_fwalk_reent+0x3a>
 800cfb2:	4629      	mov	r1, r5
 800cfb4:	4630      	mov	r0, r6
 800cfb6:	47c0      	blx	r8
 800cfb8:	4307      	orrs	r7, r0
 800cfba:	3568      	adds	r5, #104	; 0x68
 800cfbc:	e7e9      	b.n	800cf92 <_fwalk_reent+0x12>

0800cfbe <__retarget_lock_init_recursive>:
 800cfbe:	4770      	bx	lr

0800cfc0 <__retarget_lock_acquire_recursive>:
 800cfc0:	4770      	bx	lr

0800cfc2 <__retarget_lock_release_recursive>:
 800cfc2:	4770      	bx	lr

0800cfc4 <__swhatbuf_r>:
 800cfc4:	b570      	push	{r4, r5, r6, lr}
 800cfc6:	460e      	mov	r6, r1
 800cfc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfcc:	2900      	cmp	r1, #0
 800cfce:	b096      	sub	sp, #88	; 0x58
 800cfd0:	4614      	mov	r4, r2
 800cfd2:	461d      	mov	r5, r3
 800cfd4:	da07      	bge.n	800cfe6 <__swhatbuf_r+0x22>
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	602b      	str	r3, [r5, #0]
 800cfda:	89b3      	ldrh	r3, [r6, #12]
 800cfdc:	061a      	lsls	r2, r3, #24
 800cfde:	d410      	bmi.n	800d002 <__swhatbuf_r+0x3e>
 800cfe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfe4:	e00e      	b.n	800d004 <__swhatbuf_r+0x40>
 800cfe6:	466a      	mov	r2, sp
 800cfe8:	f000 f8fa 	bl	800d1e0 <_fstat_r>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	dbf2      	blt.n	800cfd6 <__swhatbuf_r+0x12>
 800cff0:	9a01      	ldr	r2, [sp, #4]
 800cff2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cff6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cffa:	425a      	negs	r2, r3
 800cffc:	415a      	adcs	r2, r3
 800cffe:	602a      	str	r2, [r5, #0]
 800d000:	e7ee      	b.n	800cfe0 <__swhatbuf_r+0x1c>
 800d002:	2340      	movs	r3, #64	; 0x40
 800d004:	2000      	movs	r0, #0
 800d006:	6023      	str	r3, [r4, #0]
 800d008:	b016      	add	sp, #88	; 0x58
 800d00a:	bd70      	pop	{r4, r5, r6, pc}

0800d00c <__smakebuf_r>:
 800d00c:	898b      	ldrh	r3, [r1, #12]
 800d00e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d010:	079d      	lsls	r5, r3, #30
 800d012:	4606      	mov	r6, r0
 800d014:	460c      	mov	r4, r1
 800d016:	d507      	bpl.n	800d028 <__smakebuf_r+0x1c>
 800d018:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d01c:	6023      	str	r3, [r4, #0]
 800d01e:	6123      	str	r3, [r4, #16]
 800d020:	2301      	movs	r3, #1
 800d022:	6163      	str	r3, [r4, #20]
 800d024:	b002      	add	sp, #8
 800d026:	bd70      	pop	{r4, r5, r6, pc}
 800d028:	ab01      	add	r3, sp, #4
 800d02a:	466a      	mov	r2, sp
 800d02c:	f7ff ffca 	bl	800cfc4 <__swhatbuf_r>
 800d030:	9900      	ldr	r1, [sp, #0]
 800d032:	4605      	mov	r5, r0
 800d034:	4630      	mov	r0, r6
 800d036:	f7fe fb31 	bl	800b69c <_malloc_r>
 800d03a:	b948      	cbnz	r0, 800d050 <__smakebuf_r+0x44>
 800d03c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d040:	059a      	lsls	r2, r3, #22
 800d042:	d4ef      	bmi.n	800d024 <__smakebuf_r+0x18>
 800d044:	f023 0303 	bic.w	r3, r3, #3
 800d048:	f043 0302 	orr.w	r3, r3, #2
 800d04c:	81a3      	strh	r3, [r4, #12]
 800d04e:	e7e3      	b.n	800d018 <__smakebuf_r+0xc>
 800d050:	4b0d      	ldr	r3, [pc, #52]	; (800d088 <__smakebuf_r+0x7c>)
 800d052:	62b3      	str	r3, [r6, #40]	; 0x28
 800d054:	89a3      	ldrh	r3, [r4, #12]
 800d056:	6020      	str	r0, [r4, #0]
 800d058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d05c:	81a3      	strh	r3, [r4, #12]
 800d05e:	9b00      	ldr	r3, [sp, #0]
 800d060:	6163      	str	r3, [r4, #20]
 800d062:	9b01      	ldr	r3, [sp, #4]
 800d064:	6120      	str	r0, [r4, #16]
 800d066:	b15b      	cbz	r3, 800d080 <__smakebuf_r+0x74>
 800d068:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d06c:	4630      	mov	r0, r6
 800d06e:	f000 f8c9 	bl	800d204 <_isatty_r>
 800d072:	b128      	cbz	r0, 800d080 <__smakebuf_r+0x74>
 800d074:	89a3      	ldrh	r3, [r4, #12]
 800d076:	f023 0303 	bic.w	r3, r3, #3
 800d07a:	f043 0301 	orr.w	r3, r3, #1
 800d07e:	81a3      	strh	r3, [r4, #12]
 800d080:	89a0      	ldrh	r0, [r4, #12]
 800d082:	4305      	orrs	r5, r0
 800d084:	81a5      	strh	r5, [r4, #12]
 800d086:	e7cd      	b.n	800d024 <__smakebuf_r+0x18>
 800d088:	0800ce1d 	.word	0x0800ce1d

0800d08c <_raise_r>:
 800d08c:	291f      	cmp	r1, #31
 800d08e:	b538      	push	{r3, r4, r5, lr}
 800d090:	4604      	mov	r4, r0
 800d092:	460d      	mov	r5, r1
 800d094:	d904      	bls.n	800d0a0 <_raise_r+0x14>
 800d096:	2316      	movs	r3, #22
 800d098:	6003      	str	r3, [r0, #0]
 800d09a:	f04f 30ff 	mov.w	r0, #4294967295
 800d09e:	bd38      	pop	{r3, r4, r5, pc}
 800d0a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d0a2:	b112      	cbz	r2, 800d0aa <_raise_r+0x1e>
 800d0a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0a8:	b94b      	cbnz	r3, 800d0be <_raise_r+0x32>
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	f000 f830 	bl	800d110 <_getpid_r>
 800d0b0:	462a      	mov	r2, r5
 800d0b2:	4601      	mov	r1, r0
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0ba:	f000 b817 	b.w	800d0ec <_kill_r>
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	d00a      	beq.n	800d0d8 <_raise_r+0x4c>
 800d0c2:	1c59      	adds	r1, r3, #1
 800d0c4:	d103      	bne.n	800d0ce <_raise_r+0x42>
 800d0c6:	2316      	movs	r3, #22
 800d0c8:	6003      	str	r3, [r0, #0]
 800d0ca:	2001      	movs	r0, #1
 800d0cc:	e7e7      	b.n	800d09e <_raise_r+0x12>
 800d0ce:	2400      	movs	r4, #0
 800d0d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	4798      	blx	r3
 800d0d8:	2000      	movs	r0, #0
 800d0da:	e7e0      	b.n	800d09e <_raise_r+0x12>

0800d0dc <raise>:
 800d0dc:	4b02      	ldr	r3, [pc, #8]	; (800d0e8 <raise+0xc>)
 800d0de:	4601      	mov	r1, r0
 800d0e0:	6818      	ldr	r0, [r3, #0]
 800d0e2:	f7ff bfd3 	b.w	800d08c <_raise_r>
 800d0e6:	bf00      	nop
 800d0e8:	240010a4 	.word	0x240010a4

0800d0ec <_kill_r>:
 800d0ec:	b538      	push	{r3, r4, r5, lr}
 800d0ee:	4d07      	ldr	r5, [pc, #28]	; (800d10c <_kill_r+0x20>)
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	4604      	mov	r4, r0
 800d0f4:	4608      	mov	r0, r1
 800d0f6:	4611      	mov	r1, r2
 800d0f8:	602b      	str	r3, [r5, #0]
 800d0fa:	f7f3 ff2f 	bl	8000f5c <_kill>
 800d0fe:	1c43      	adds	r3, r0, #1
 800d100:	d102      	bne.n	800d108 <_kill_r+0x1c>
 800d102:	682b      	ldr	r3, [r5, #0]
 800d104:	b103      	cbz	r3, 800d108 <_kill_r+0x1c>
 800d106:	6023      	str	r3, [r4, #0]
 800d108:	bd38      	pop	{r3, r4, r5, pc}
 800d10a:	bf00      	nop
 800d10c:	240016f8 	.word	0x240016f8

0800d110 <_getpid_r>:
 800d110:	f7f3 bf1c 	b.w	8000f4c <_getpid>

0800d114 <__sread>:
 800d114:	b510      	push	{r4, lr}
 800d116:	460c      	mov	r4, r1
 800d118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d11c:	f000 f894 	bl	800d248 <_read_r>
 800d120:	2800      	cmp	r0, #0
 800d122:	bfab      	itete	ge
 800d124:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d126:	89a3      	ldrhlt	r3, [r4, #12]
 800d128:	181b      	addge	r3, r3, r0
 800d12a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d12e:	bfac      	ite	ge
 800d130:	6563      	strge	r3, [r4, #84]	; 0x54
 800d132:	81a3      	strhlt	r3, [r4, #12]
 800d134:	bd10      	pop	{r4, pc}

0800d136 <__swrite>:
 800d136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d13a:	461f      	mov	r7, r3
 800d13c:	898b      	ldrh	r3, [r1, #12]
 800d13e:	05db      	lsls	r3, r3, #23
 800d140:	4605      	mov	r5, r0
 800d142:	460c      	mov	r4, r1
 800d144:	4616      	mov	r6, r2
 800d146:	d505      	bpl.n	800d154 <__swrite+0x1e>
 800d148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d14c:	2302      	movs	r3, #2
 800d14e:	2200      	movs	r2, #0
 800d150:	f000 f868 	bl	800d224 <_lseek_r>
 800d154:	89a3      	ldrh	r3, [r4, #12]
 800d156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d15a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d15e:	81a3      	strh	r3, [r4, #12]
 800d160:	4632      	mov	r2, r6
 800d162:	463b      	mov	r3, r7
 800d164:	4628      	mov	r0, r5
 800d166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d16a:	f000 b817 	b.w	800d19c <_write_r>

0800d16e <__sseek>:
 800d16e:	b510      	push	{r4, lr}
 800d170:	460c      	mov	r4, r1
 800d172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d176:	f000 f855 	bl	800d224 <_lseek_r>
 800d17a:	1c43      	adds	r3, r0, #1
 800d17c:	89a3      	ldrh	r3, [r4, #12]
 800d17e:	bf15      	itete	ne
 800d180:	6560      	strne	r0, [r4, #84]	; 0x54
 800d182:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d186:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d18a:	81a3      	strheq	r3, [r4, #12]
 800d18c:	bf18      	it	ne
 800d18e:	81a3      	strhne	r3, [r4, #12]
 800d190:	bd10      	pop	{r4, pc}

0800d192 <__sclose>:
 800d192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d196:	f000 b813 	b.w	800d1c0 <_close_r>
	...

0800d19c <_write_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	4d07      	ldr	r5, [pc, #28]	; (800d1bc <_write_r+0x20>)
 800d1a0:	4604      	mov	r4, r0
 800d1a2:	4608      	mov	r0, r1
 800d1a4:	4611      	mov	r1, r2
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	602a      	str	r2, [r5, #0]
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	f7f3 ff0d 	bl	8000fca <_write>
 800d1b0:	1c43      	adds	r3, r0, #1
 800d1b2:	d102      	bne.n	800d1ba <_write_r+0x1e>
 800d1b4:	682b      	ldr	r3, [r5, #0]
 800d1b6:	b103      	cbz	r3, 800d1ba <_write_r+0x1e>
 800d1b8:	6023      	str	r3, [r4, #0]
 800d1ba:	bd38      	pop	{r3, r4, r5, pc}
 800d1bc:	240016f8 	.word	0x240016f8

0800d1c0 <_close_r>:
 800d1c0:	b538      	push	{r3, r4, r5, lr}
 800d1c2:	4d06      	ldr	r5, [pc, #24]	; (800d1dc <_close_r+0x1c>)
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	4604      	mov	r4, r0
 800d1c8:	4608      	mov	r0, r1
 800d1ca:	602b      	str	r3, [r5, #0]
 800d1cc:	f7f3 ff19 	bl	8001002 <_close>
 800d1d0:	1c43      	adds	r3, r0, #1
 800d1d2:	d102      	bne.n	800d1da <_close_r+0x1a>
 800d1d4:	682b      	ldr	r3, [r5, #0]
 800d1d6:	b103      	cbz	r3, 800d1da <_close_r+0x1a>
 800d1d8:	6023      	str	r3, [r4, #0]
 800d1da:	bd38      	pop	{r3, r4, r5, pc}
 800d1dc:	240016f8 	.word	0x240016f8

0800d1e0 <_fstat_r>:
 800d1e0:	b538      	push	{r3, r4, r5, lr}
 800d1e2:	4d07      	ldr	r5, [pc, #28]	; (800d200 <_fstat_r+0x20>)
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	4608      	mov	r0, r1
 800d1ea:	4611      	mov	r1, r2
 800d1ec:	602b      	str	r3, [r5, #0]
 800d1ee:	f7f3 ff14 	bl	800101a <_fstat>
 800d1f2:	1c43      	adds	r3, r0, #1
 800d1f4:	d102      	bne.n	800d1fc <_fstat_r+0x1c>
 800d1f6:	682b      	ldr	r3, [r5, #0]
 800d1f8:	b103      	cbz	r3, 800d1fc <_fstat_r+0x1c>
 800d1fa:	6023      	str	r3, [r4, #0]
 800d1fc:	bd38      	pop	{r3, r4, r5, pc}
 800d1fe:	bf00      	nop
 800d200:	240016f8 	.word	0x240016f8

0800d204 <_isatty_r>:
 800d204:	b538      	push	{r3, r4, r5, lr}
 800d206:	4d06      	ldr	r5, [pc, #24]	; (800d220 <_isatty_r+0x1c>)
 800d208:	2300      	movs	r3, #0
 800d20a:	4604      	mov	r4, r0
 800d20c:	4608      	mov	r0, r1
 800d20e:	602b      	str	r3, [r5, #0]
 800d210:	f7f3 ff13 	bl	800103a <_isatty>
 800d214:	1c43      	adds	r3, r0, #1
 800d216:	d102      	bne.n	800d21e <_isatty_r+0x1a>
 800d218:	682b      	ldr	r3, [r5, #0]
 800d21a:	b103      	cbz	r3, 800d21e <_isatty_r+0x1a>
 800d21c:	6023      	str	r3, [r4, #0]
 800d21e:	bd38      	pop	{r3, r4, r5, pc}
 800d220:	240016f8 	.word	0x240016f8

0800d224 <_lseek_r>:
 800d224:	b538      	push	{r3, r4, r5, lr}
 800d226:	4d07      	ldr	r5, [pc, #28]	; (800d244 <_lseek_r+0x20>)
 800d228:	4604      	mov	r4, r0
 800d22a:	4608      	mov	r0, r1
 800d22c:	4611      	mov	r1, r2
 800d22e:	2200      	movs	r2, #0
 800d230:	602a      	str	r2, [r5, #0]
 800d232:	461a      	mov	r2, r3
 800d234:	f7f3 ff0c 	bl	8001050 <_lseek>
 800d238:	1c43      	adds	r3, r0, #1
 800d23a:	d102      	bne.n	800d242 <_lseek_r+0x1e>
 800d23c:	682b      	ldr	r3, [r5, #0]
 800d23e:	b103      	cbz	r3, 800d242 <_lseek_r+0x1e>
 800d240:	6023      	str	r3, [r4, #0]
 800d242:	bd38      	pop	{r3, r4, r5, pc}
 800d244:	240016f8 	.word	0x240016f8

0800d248 <_read_r>:
 800d248:	b538      	push	{r3, r4, r5, lr}
 800d24a:	4d07      	ldr	r5, [pc, #28]	; (800d268 <_read_r+0x20>)
 800d24c:	4604      	mov	r4, r0
 800d24e:	4608      	mov	r0, r1
 800d250:	4611      	mov	r1, r2
 800d252:	2200      	movs	r2, #0
 800d254:	602a      	str	r2, [r5, #0]
 800d256:	461a      	mov	r2, r3
 800d258:	f7f3 fe9a 	bl	8000f90 <_read>
 800d25c:	1c43      	adds	r3, r0, #1
 800d25e:	d102      	bne.n	800d266 <_read_r+0x1e>
 800d260:	682b      	ldr	r3, [r5, #0]
 800d262:	b103      	cbz	r3, 800d266 <_read_r+0x1e>
 800d264:	6023      	str	r3, [r4, #0]
 800d266:	bd38      	pop	{r3, r4, r5, pc}
 800d268:	240016f8 	.word	0x240016f8

0800d26c <_init>:
 800d26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d26e:	bf00      	nop
 800d270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d272:	bc08      	pop	{r3}
 800d274:	469e      	mov	lr, r3
 800d276:	4770      	bx	lr

0800d278 <_fini>:
 800d278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d27a:	bf00      	nop
 800d27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d27e:	bc08      	pop	{r3}
 800d280:	469e      	mov	lr, r3
 800d282:	4770      	bx	lr
